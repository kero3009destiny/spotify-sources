import _defineProperty from "/var/jenkins_home/workspace/tingle.6c662e67-baf8-4d1a-9d12-994578922c84/workspace/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty";
import _toConsumableArray from "/var/jenkins_home/workspace/tingle.6c662e67-baf8-4d1a-9d12-994578922c84/workspace/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// ignore-string-externalization
import React, { useContext, useReducer } from 'react';
import { jsx as _jsx } from "react/jsx-runtime";
export var BannerType;

(function (BannerType) {
  BannerType[BannerType["WARNING"] = 0] = "WARNING";
  BannerType[BannerType["ANNOUNCEMENT"] = 1] = "ANNOUNCEMENT";
  BannerType[BannerType["ERROR"] = 2] = "ERROR";
  BannerType[BannerType["SUCCESS"] = 3] = "SUCCESS";
  BannerType[BannerType["INFO"] = 4] = "INFO";
})(BannerType || (BannerType = {}));

export var ActionType;

(function (ActionType) {
  ActionType["SHOW"] = "SHOW";
  ActionType["HIDE"] = "HIDE";
})(ActionType || (ActionType = {}));

var initialState = {
  autogenIdCounter: 0,
  banners: []
};
export var BannerStateContext = /*#__PURE__*/React.createContext(initialState);
export var BannerDispatchContext = /*#__PURE__*/React.createContext(function (action) {
  return action;
});

var reducer = function reducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case ActionType.SHOW:
      {
        var bannerState = {
          id: action.bannerOptions.id || "autogen-banner-".concat(state.autogenIdCounter),
          message: action.message,
          type: action.bannerType,
          options: action.bannerOptions
        };
        return {
          // we increment regardless of whether the id was autogenerated or not (since nothing should
          // rely on predictable autogen'd IDs).
          autogenIdCounter: state.autogenIdCounter + 1,
          banners: [].concat(_toConsumableArray(state.banners.filter(function (_ref) {
            var id = _ref.id;
            return id !== bannerState.id;
          })), [bannerState])
        };
      }

    case ActionType.HIDE:
      return _objectSpread(_objectSpread({}, state), {}, {
        banners: action.bannerId ? state.banners.filter(function (b) {
          return b.id !== action.bannerId;
        }) : []
      });

    default:
      return state;
  }
};

export var useBannerState = function useBannerState() {
  return useContext(BannerStateContext);
};
export var useBannerDispatch = function useBannerDispatch() {
  return useContext(BannerDispatchContext);
};
export var BannerState = function BannerState(_ref2) {
  var _ref2$children = _ref2.children,
      children = _ref2$children === void 0 ? null : _ref2$children;

  var _useReducer = useReducer(reducer, initialState),
      state = _useReducer[0],
      dispatch = _useReducer[1];

  return /*#__PURE__*/_jsx(BannerStateContext.Provider, {
    value: state,
    children: /*#__PURE__*/_jsx(BannerDispatchContext.Provider, {
      value: dispatch,
      children: children
    })
  });
};