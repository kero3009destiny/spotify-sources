"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _get = _interopRequireDefault(require("lodash/get"));

var _kebabCase = _interopRequireDefault(require("lodash/kebabCase"));

var _isFunction = _interopRequireDefault(require("lodash/isFunction"));

var _isObject = _interopRequireDefault(require("lodash/isObject"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var CustomPropTypes = _interopRequireWildcard(require("./utils/CustomPropTypes"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const TreeMapNode = props => {
  const {
    node,
    getLabel,
    nodeStyle,
    labelStyle,
    minLabelWidth,
    minLabelHeight,
    NodeLabelComponent,
    parentNames
  } = props;
  const {
    depth,
    parent,
    x0,
    y0,
    x1,
    y1
  } = node;
  const parentName = (0, _get.default)(parent, 'data.name');
  const nodeGroupClass = parent ? `node-group-${(0, _kebabCase.default)(parentName)} node-group-i-${parentNames.indexOf(parentName)}` : '';
  const className = `rct-tree-map-node node-depth-${depth} ${nodeGroupClass}`;
  const style = {
    position: 'absolute',
    width: x1 - x0,
    height: y1 - y0,
    top: y0,
    left: x0,
    transition: 'all .2s'
  };
  const customStyle = (0, _isFunction.default)(nodeStyle) ? nodeStyle(node) : (0, _isObject.default)(nodeStyle) ? nodeStyle : {};
  Object.assign(style, customStyle);
  const handlers = ['onClick', 'onMouseEnter', 'onMouseLeave', 'onMouseMove'].reduce((acc, eventName) => {
    const handler = props[`${eventName}Node`];
    if (handler) acc[eventName] = handler.bind(null, node);
    return acc;
  }, {});
  return /*#__PURE__*/_react.default.createElement("div", _extends({
    className,
    style
  }, handlers), x1 - x0 > minLabelWidth && y1 - y0 > minLabelHeight ?
  /*#__PURE__*/
  // show label if node is big enough
  _react.default.createElement(NodeLabelComponent, {
    node,
    getLabel,
    labelStyle
  }) : null);
};

TreeMapNode.propTypes = {
  node: _propTypes.default.shape({
    parent: _propTypes.default.object,
    children: _propTypes.default.array,
    value: _propTypes.default.number,
    depth: _propTypes.default.number,
    x: _propTypes.default.number,
    y: _propTypes.default.number,
    dx: _propTypes.default.number,
    dy: _propTypes.default.number,
    x0: _propTypes.default.number,
    y0: _propTypes.default.number,
    x1: _propTypes.default.number,
    y1: _propTypes.default.number
  }),
  nodeStyle: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
  minLabelWidth: _propTypes.default.number,
  minLabelHeight: _propTypes.default.number,
  getLabel: CustomPropTypes.getter,
  labelStyle: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
  NodeLabelComponent: _propTypes.default.func,
  parentNames: _propTypes.default.arrayOf(_propTypes.default.string)
};
TreeMapNode.defaultProps = {
  minLabelWidth: 0,
  minLabelHeight: 0
};
var _default = TreeMapNode;
exports.default = _default;
//# sourceMappingURL=TreeMapNode.js.map