"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _d3Interpolate = require("d3-interpolate");

var _d3Scale = require("d3-scale");

var _d3ScaleChromatic = require("d3-scale-chromatic");

var _isString = _interopRequireDefault(require("lodash/isString"));

var _times = _interopRequireDefault(require("lodash/times"));

var _range = _interopRequireDefault(require("lodash/range"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _RangeRect = _interopRequireDefault(require("./RangeRect"));

var CustomPropTypes = _interopRequireWildcard(require("./utils/CustomPropTypes"));

var _Data = require("./utils/Data");

var _Scale = require("./utils/Scale");

var _xyPropsEqual = _interopRequireDefault(require("./utils/xyPropsEqual"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function interpolatorFromType(type) {
  switch (type.toLowerCase()) {
    case 'hcl':
      return _d3Interpolate.interpolateHcl;

    case 'hsl':
      return _d3Interpolate.interpolateHsl;

    case 'lab':
      return _d3Interpolate.interpolateLab;

    case 'rgb':
      return _d3Interpolate.interpolateRgb;

    default:
      return _d3Interpolate.interpolateLab;
  }
}

function makeColorScale(domain, colors, interpolator) {
  let interpolatorForColorScale = interpolator;

  if ((0, _isString.default)(interpolatorForColorScale)) {
    interpolatorForColorScale = interpolatorFromType(interpolator);
  }

  return (0, _d3Scale.scaleLinear)().domain(domain).range(colors).interpolate(interpolatorForColorScale);
}
/**
 * `ColorHeatmap` can be used to represent individual values contained in a matrix through colors.
 */


class ColorHeatmap extends _react.default.Component {
  static getDomain(props) {
    const {
      xScaleType,
      yScaleType,
      data,
      x,
      xEnd,
      y,
      yEnd
    } = props;
    return {
      x: (0, _Data.domainFromRangeData)(data, (0, _Data.makeAccessor2)(x), (0, _Data.makeAccessor2)(xEnd), (0, _Scale.dataTypeFromScaleType)(xScaleType)),
      y: (0, _Data.domainFromRangeData)(data, (0, _Data.makeAccessor2)(y), (0, _Data.makeAccessor2)(yEnd), (0, _Scale.dataTypeFromScaleType)(yScaleType))
    };
  }

  shouldComponentUpdate(nextProps) {
    const shouldUpdate = !(0, _xyPropsEqual.default)(this.props, nextProps, ['colors', 'valueDomain']);
    return shouldUpdate;
  }

  render() {
    const {
      data,
      xScale,
      yScale,
      value,
      x,
      xEnd,
      y,
      yEnd,
      interpolator,
      rectStyle,
      rectClassName
    } = this.props;
    const valueAccessor = (0, _Data.makeAccessor2)(value);
    let colorScale;

    if (this.props.colorScale) {
      colorScale = this.props.colorScale;
    } else {
      const valueDomain = this.props.valueDomain || (0, _Data.domainFromData)(data, valueAccessor);
      const colors = this.props.colors || (valueDomain.length === 2 ? ['#000000', '#ffffff'] : (0, _times.default)(valueDomain.length, (0, _d3ScaleChromatic.schemeCategory10)().domain((0, _range.default)(10))));
      colorScale = makeColorScale(valueDomain, colors, interpolator);
    }

    return /*#__PURE__*/_react.default.createElement("g", {
      className: "rct-color-heatmap-chart",
      "aria-hidden": "true"
    }, data.map((d, i) => {
      const color = colorScale(valueAccessor(d));

      const style = _objectSpread(_objectSpread({}, (0, _Data.getValue)(rectStyle, d, i)), {}, {
        fill: color
      });

      const className = `${(0, _Data.getValue)(rectClassName, d, i)}`;
      const key = `heatmap-rect-${i}`;
      return /*#__PURE__*/_react.default.createElement(_RangeRect.default, _extends({
        x: (0, _Data.getValue)(x, d, i),
        xEnd: (0, _Data.getValue)(xEnd, d, i),
        y: (0, _Data.getValue)(y, d, i),
        yEnd: (0, _Data.getValue)(yEnd, d, i)
      }, {
        xScale,
        yScale,
        style,
        className,
        key
      }));
    }));
  }

}

exports.default = ColorHeatmap;

_defineProperty(ColorHeatmap, "propTypes", {
  /**
   * Array of data to be plotted - should be 1D array of all grid values
   */
  data: _propTypes.default.array.isRequired,

  /**
   * Accessor function for the value of the datum, called once per datum, or a
   * single value to be used for all data.
   */
  value: CustomPropTypes.valueOrAccessor,

  /**
   * Accessor function for x values, called once per datum, or a
   * single value to be used for all `x` data.
   */
  x: CustomPropTypes.valueOrAccessor,

  /**
   * Accessor function for x end values, called once per datum, or a
   * single value to be used for all `xEnd` data.
   */
  xEnd: CustomPropTypes.valueOrAccessor,

  /**
   * Accessor function for y values, called once per datum, or a
   * single value to be used for all `y` data.
   */
  y: CustomPropTypes.valueOrAccessor,

  /**
   * Accessor function for y end values, called once per datum, or a
   * single value to be used for all `yEnd` data.
   */
  yEnd: CustomPropTypes.valueOrAccessor,

  /**
   * D3 scale for X axis - provided by XYPlot
   */
  xScale: _propTypes.default.func,

  /**
   * D3 scale for Y axis - provided by XYPlot
   */
  yScale: _propTypes.default.func,

  /**
   * A d3 color scale or function which receives the datum value as an argument.
   * This will be constructred from the `colors`, `valueDomain` and
   * `interpolator` props, if `colorScale` is undefined.
   */
  colorScale: _propTypes.default.func,

  /**
   * An array of color strings
   */
  colors: _propTypes.default.array,

  /**
   * Custom domain of the data.
   * Otherwise it will be the extent of your data.
   */
  valueDomain: _propTypes.default.array,

  /**
   * Interpolator for colors. Possible options include "hcl", "hsl", "lab" and "rgb"
   */
  interpolator: _propTypes.default.string,

  /**
   * Inline style object to be applied to each rect,
   * or accessor function which returns a style object.
   */
  rectStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func]),

  /**
   * Class attribute to be applied to each rect,
   * or accessor function which returns a class.
   */
  rectClassName: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func])
});

_defineProperty(ColorHeatmap, "defaultProps", {
  interpolator: 'lab',
  rectStyle: {},
  rectClassName: ''
});
//# sourceMappingURL=ColorHeatmap.js.map