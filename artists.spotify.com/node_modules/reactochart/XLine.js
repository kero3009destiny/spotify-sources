"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * `XLine` is a vertical line rendered on the x axis
 */
class XLine extends _react.default.Component {
  render() {
    const {
      xScale,
      value,
      yScale,
      yLimit,
      yDomain,
      height,
      style,
      spacingTop,
      spacingBottom
    } = this.props;
    const className = `rct-chart-line-x ${this.props.className}`;
    const lineX = xScale(value);
    let y1 = -spacingTop;
    let y2 = height + spacingBottom;

    if (typeof yLimit !== 'undefined') {
      y1 = yScale(yDomain[0]) + spacingBottom;
      y2 = yScale(yLimit);
    }

    return /*#__PURE__*/_react.default.createElement("line", _extends({
      "aria-hidden": "true"
    }, {
      x1: lineX,
      x2: lineX,
      y1: y1,
      y2: y2,
      className,
      style
    }));
  }

}

exports.default = XLine;

_defineProperty(XLine, "propTypes", {
  /**
   * Height of chart - provided by XYPlot
   */
  height: _propTypes.default.number,

  /**
   * D3 scale for X axis - provided by XYPlot
   */
  xScale: _propTypes.default.func,
  value: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.instanceOf(Date)]).isRequired,

  /**
   * D3 scale for Y axis - provided by XYPlot
   */
  yScale: _propTypes.default.func,
  yLimit: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.instanceOf(Date)]),

  /**
   * The Y domain of the data as an array - provided by XYPlot
   */
  yDomain: _propTypes.default.array,

  /**
   * Spacing top - provided by XYPlot
   */
  spacingTop: _propTypes.default.number,

  /**
   * Spacing bottom - provided by XYPlot
   */
  spacingBottom: _propTypes.default.number,

  /**
   * Inline style object to be applied to the line
   */
  style: _propTypes.default.object,

  /**
   * Class attribute to be applied to the line
   */
  className: _propTypes.default.string
});

_defineProperty(XLine, "defaultProps", {
  style: {},
  className: '',
  spacingTop: 0,
  spacingBottom: 0
});
//# sourceMappingURL=XLine.js.map