'use strict';

/* eslint no-console:0 */

var Level = {
  LOG: 1 << 0,
  DEBUG: 1 << 1,
  INFO: 1 << 2,
  WARN: 1 << 3,
  ERROR: 1 << 4
};

var slice = Array.prototype.slice;

function Logger(tag, description, predicate) {
  this.tag = tag;
  this.description = description;
  this._predicate = predicate;
  this._tagParts = tag.split('.');
  this._tagText = '[' + tag + ']';
  if (process.env.DEBUG === 'true') {
    this._enabled = true;
  } else {
    this._enabled = false;
  }
  this._level = 0;
  this.log = this.log.bind(this);
  this.debug = this.debug.bind(this);
  this.warn = this.warn.bind(this);
  this.error = this.error.bind(this);
}

Logger.prototype.matchesTag = function(tag) {
  var _tag = Array.isArray(tag) ? tag : tag.split('.');
  var tagParts = this._tagParts;
  if (_tag.length > tagParts.length) {
    return false;
  }
  for (var i = 0, l = _tag.length; i < l; i++) {
    if (_tag[i] === '*' && tagParts[i]) {
      // matches anything
      continue;
    }
    if (_tag[i] !== tagParts[i]) {
      return false;
    }
  }
  return true;
};

Logger.prototype.setLevel = function(level) {
  var value = 0;
  switch (level) {
  case 'error':
    value = Level.ERROR;
    break;
  case 'warn':
    value = Level.WARN | Level.ERROR;
    break;
  case 'info':
    value = Level.INFO | Level.WARN | Level.ERROR;
    break;
  case 'debug':
    value = Level.DEBUG | Level.INFO | Level.WARN | Level.ERROR;
    break;
  case 'log':
  default:
    value = Level.LOG | Level.DEBUG | Level.INFO | Level.WARN | Level.ERROR;
    break;
  }
  this._level = value;
};

Logger.prototype.enable = function() {
  if (process.env.DEBUG === 'true') {
    this._enabled = true;
  }
};

Logger.prototype.disable = function() {
  if (process.env.DEBUG === 'true') {
    this._enabled = false;
  }
};

Logger.prototype.log = function() {
  if (process.env.DEBUG === 'true') {
    if (!this._enabled && !(this._level & Level.LOG)) {
      return;
    }
    var _args = slice.call(arguments);
    var args = [this._tagText].concat(_args);
    var logObj = {
      type: 'log',
      tag: this.tag,
      args: _args
    };
    if (this._predicate(logObj)) {
      return;
    }
    console.log.apply(console, args);
  }
};

Logger.prototype.debug = function() {
  if (process.env.DEBUG === 'true') {
    if (!this._enabled && !(this._level & Level.DEBUG)) {
      return;
    }
    var _args = slice.call(arguments);
    var args = [this._tagText].concat(_args);
    var logObj = {
      type: 'debug',
      tag: this.tag,
      args: _args
    };
    if (this._predicate(logObj)) {
      return;
    }
    console.debug.apply(console, args);
  }
};

Logger.prototype.info = function() {
  if (process.env.DEBUG === 'true') {
    if (!this._enabled && !(this._level & Level.INFO)) {
      return;
    }
    var _args = slice.call(arguments);
    var args = [this._tagText].concat(_args);
    var logObj = {
      type: 'info',
      tag: this.tag,
      args: _args
    };
    if (this._predicate(logObj)) {
      return;
    }
    console.info.apply(console, args);
  }
};

Logger.prototype.warn = function() {
  if (process.env.DEBUG === 'true') {
    if (!this._enabled && !(this._level & Level.WARN)) {
      return;
    }
    var _args = slice.call(arguments);
    var args = [this._tagText].concat(_args);
    var logObj = {
      type: 'warn',
      tag: this.tag,
      args: _args
    };
    if (this._predicate(logObj)) {
      return;
    }
    console.warn.apply(console, args);
  }
};

Logger.prototype.error = function() {
  if (process.env.DEBUG === 'true') {
    if (!this._enabled && !(this._level & Level.ERROR)) {
      return;
    }
    var _args = slice.call(arguments);
    var args = [this._tagText].concat(_args);
    var logObj = {
      type: 'error',
      tag: this.tag,
      args: _args
    };
    if (this._predicate(logObj)) {
      return;
    }
    console.error.apply(console, args);
  }
};

module.exports = Logger;
