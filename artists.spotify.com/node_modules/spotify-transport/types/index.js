/* eslint no-unused-expressions: 0 */
/**
 * @module spotify-transport/types
 */

'use strict';

// Export separate files
exports.Event = require('./event');
exports.Method = require('./method');
exports.StatusCode = require('./status_code');
exports.StatusFamily = require('./status_family');

var InternalSocketCode = require('./internal_socket_code');
exports.INTERNAL_SOCKET_CLOSE_CODE = InternalSocketCode.CLOSE;

/**
 * A hash of the different messaging endpoint URIs.
 *
 * @typedef {Object}
 * @property {string} ap A websocket address for the WebSocket AP.
 * @property {string} dealer A websocket address for the Dealer.
 * @property {string} webgate An HTTP address for the webgate endpoint.
 * @property {string} webapi An HTTP address for the Web API endpoint.
 */
exports.Endpoints;

/**
 * A function that can be used to get the endpoints for a Session instance.
 *
 * @typedef {function}
 * @return {Promise.<module:spotify-transport/types.Endpoints>} A promise
 *     containing the endpoints for requests.
 */
exports.EndpointsProvider;

/**
 * A function that can be used to obtain an OAuth2 token that can be used to
 * connect to the messaging endpoints.
 *
 * @typedef {function}
 * @return {Promise.<string>} A promise that will be resolved to an OAuth token
 *    that can be used to connect to the messaging endpoints.
 */
exports.TokenProvider;

/**
 * A set of providers used by the Session object for operations.
 *
 * @typedef {Object}
 * @property {module:spotify-transport/types.EndpointsProvider} endpoints
 *     The endpoint provider function.
 * @property {module:spotify-transport/types.TokenProvider} token The token
 *     provider.
 */
exports.SessionProviders;

/**
 * The configuration object passed in the creation of a Session object.
 *
 * @typedef {Object}
 * @property {module:spotify-transport/types.SessionProviders} providers The
 *     providers for the session instance.
 */
exports.SessionConfig;

/**
 * A URI to an HTTP endpoint.
 *
 * @typedef {string}
 */
exports.HTTPURI;

/**
 * Arguments for an HTTP Request.
 *
 * @typedef {Object}
 * @property {module:spotify-transport/types.Method} method The method of
 *     the request.
 * @property {Object.<string, string>} headers A key-value map of the headers
 *     for the request.
 * @property {Array.<*>} payload The payload for the request.
 * @property {boolean} authorize When set to true, an Authorization header will
 *    automatically be added to the request. This option defaults to true.
 */
exports.HTTPArgs;

/**
 * A response for an HTTP request.
 *
 * @typedef {Object}
 * @property {module:spotify-transport/types.HTTPURL} url The URL of the
 *     response.
 * @property {number} status The HTTP Status code of the response.
 * @property {Object.<string, string>} headers Key-value pairs denoting the
 *     response headers for the request.
 * @property {string} body The response text.
 */
exports.HTTPResponse;

/**
 * A message from the Dealer service.
 *
 * @typedef {Object}
 * @property {string} uri The URI associated with the message.
 * @property {string} type The type of the message. Can either be "message" or
 *     "pong".
 * @property {Object.<string, string>=} headers An optional key-value map of the
 *     headers for the message.
 * @property {Array.<*>=} payloads An array of payloads for the message.
 */
exports.DealerMessage;

/**
 * Data for a ClientEvent message.
 *
 * @typedef {Object}
 * @property {string} source The source which generated the event.
 * @property {string} source_version The version of the source.
 * @property {string} source_vendor The vendor of the source.
 * @property {string} context An optional context of the event.
 * @property {string} event The name of the event.
 * @property {string} event_version An optional version number for the event.
 * @property {string} test_version The optional test case if A/B testing.
 * @property {Object} json_data A JavaScript value that is part of the message.
 */
exports.ClientEventData;
