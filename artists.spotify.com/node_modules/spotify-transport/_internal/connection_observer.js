'use strict';

var inherit = require('spotify-inheritance/inherit');
var EventEmitter = require('spotify-eventemitter');

var Event = require('../types/event');

function ConnectionObserver(options) {
  EventEmitter.call(this);

  var opts = options || {};

  this._navigator = global.navigator;

  if (typeof global.addEventListener === 'function') {
    global.addEventListener(
      'online',
      this.emitSync.bind(this, Event.CONNECTION_ONLINE, {})
    );
    global.addEventListener(
      'offline',
      this.emitSync.bind(this, Event.CONNECTION_OFFLINE, {})
    );

    if (opts.notifyBeforeUnload) {
      global.addEventListener(
        Event.WINDOW_BEFORE_UNLOAD,
        this.emitSync.bind(this, Event.WINDOW_BEFORE_UNLOAD, {})
      );
    }
  }
}
inherit(ConnectionObserver, EventEmitter);

ConnectionObserver.create = function(options) {
  return new ConnectionObserver(options);
};

ConnectionObserver.prototype.isOnline = function() {
  var navigator = this._navigator;
  if (navigator && 'onLine' in navigator) {
    return navigator.onLine;
  }
  return true;
};

module.exports = ConnectionObserver;
