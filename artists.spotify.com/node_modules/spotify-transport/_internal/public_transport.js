'use strict';

var inherit = require('spotify-inheritance/inherit');
var EventEmitter = require('spotify-eventemitter');
var Event = require('../types/event');
var StatusCode = require('../types/status_code');
var StatusFamily = require('../types/status_family');

/**
 * A publicly exportable version of transport that can be used by modules to
 * make requests.
 *
 * @class
 * @param {module:spotify-tranport/lib/transport} origin The transport instance
 *     that will be wrapped.
 */
function PublicTransport(origin) {
  EventEmitter.call(this);

  this.request = origin.request.bind(origin);
  this.getConnectionId = origin.getConnectionId.bind(origin);
  this.getEndpoints = origin.getEndpoints.bind(origin);
  this.getInitTime = origin.getInitTime.bind(origin);
  this.getLastToken = origin.getLastToken.bind(origin);
  this.matchMessages = origin.matchMessages.bind(origin);
  this.handlePushRequests = origin.handlePushRequests.bind(origin);

  this.proxyEmit(
    origin,
    Event.TRANSPORT_ACCESS_TOKEN,
    this.EVENT_ACCESS_TOKEN
  );
  this.proxyEmit(
    origin,
    Event.TRANSPORT_CONNECTION_OFFLINE,
    this.EVENT_CONNECTION_OFFLINE
  );
  this.proxyEmit(
    origin,
    Event.TRANSPORT_CONNECTION_ONLINE,
    this.EVENT_CONNECTION_ONLINE
  );
  this.proxyEmit(
    origin,
    Event.TRANSPORT_ENDPOINTS_RESOLVED,
    this.EVENT_ENDPOINTS_RESOLVED
  );

  // Handle the connection id event separately.
  this.onAddListener(
    this.EVENT_CONNECTION_ID,
    this._onAddConnectionIdListener.bind(this, this.on.bind(origin))
  );
  this.onRemoveListener(
    this.EVENT_CONNECTION_ID,
    this._onRemoveConnectionIdListener.bind(
      this,
      this.removeListener.bind(origin)
    )
  );
}
inherit(PublicTransport, EventEmitter);

/**
 * A constant for the access token event.
 *
 * @type {string}
 */
PublicTransport.prototype.EVENT_ACCESS_TOKEN = 'access_token';

/**
 * A constant for the connection id event.
 *
 * @type {string}
 */
PublicTransport.prototype.EVENT_CONNECTION_ID = 'connection_id';

/**
 * A constant for the connection id event.
 *
 * @type {string}
 */
PublicTransport.prototype.EVENT_CONNECTION_OFFLINE = 'connection_offline';

/**
 * A constant for the connection id event.
 *
 * @type {string}
 */
PublicTransport.prototype.EVENT_CONNECTION_ONLINE = 'connection_online';

/**
 * A constant for the endpoints resolved event.
 *
 * @type {string}
 */
PublicTransport.prototype.EVENT_ENDPOINTS_RESOLVED = 'endpoints_resolved';

/**
 * A reference to the StatusCode enum.
 *
 * @type {module:spotify-transport/types/status_code}
 */
PublicTransport.prototype.StatusCode = StatusCode;

/**
 * A reference to the StatusFamily enum.
 *
 * @type {module:spotify-transport/types/status_family}
 */
PublicTransport.prototype.StatusFamily = StatusFamily;

/**
 * Called when we add a listener for `EVENT_CONNECTION_ID`.
 *
 * Because `TRANSPORT_CONNECTION_ID` is state-aware, we cannot proxy the event,
 * because proxies are only added once, whereas state-aware events expect
 * individual listeners.
 *
 * Note that this will explicitly cancel adding a listener to this eventemitter
 * instance.
 *
 * @param {function} action An `addListener` function that's bound to the origin
 *     transport instance.
 * @param {module:spotify-eventemitter~Event} ev The add listener meta-event.
 */
PublicTransport.prototype._onAddConnectionIdListener = function(action, ev) {
  // We do not want to add this as an actual listener, since we will never
  // actually fire this event from within public transport.
  ev.preventDefault();

  // We need to wrap the event so we can get a proper event name.
  var eventName = this.EVENT_CONNECTION_ID;
  var listener = ev.listener;
  var renamingWrapper = function(connectionIdEvent) {
    listener.call(this, EventEmitter.createEvent(eventName, connectionIdEvent));
  }.bind(this);
  listener.$proxy_wrapper = renamingWrapper;
  action(Event.TRANSPORT_CONNECTION_ID, renamingWrapper, ev.options);
};

/**
 * Called when we remove a listener for `EVENT_CONNECTION_ID`.
 *
 * @param {function} action A `removeListener` function that's bound to the
 *     origin transport instance.
 * @param {module:spotify-eventemitter~Event} ev The remove listener meta-event.
 */
PublicTransport.prototype._onRemoveConnectionIdListener = function(action, ev) {
  ev.preventDefault();
  if (!ev.listener.$proxy_wrapper) {
    return;
  }
  action(Event.TRANSPORT_CONNECTION_ID, ev.listener.$proxy_wrapper, ev.options);
};

module.exports = PublicTransport;
