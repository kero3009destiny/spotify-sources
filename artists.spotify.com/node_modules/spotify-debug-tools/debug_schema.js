'use strict';

function getType(value) {
  var type = typeof value;
  if (type === 'object') {
    return value ?
      Object.prototype.toString.call(value).slice(8, -1) :
      null;
  }
  return type;
}

function checkArray(arr, expectedTypes) {
  for (var i = 0, len = arr.length; i < len; i++) {
    var type = getType(arr[i]);
    if (expectedTypes.indexOf(type) < 0) {
      throw new ReferenceError('Wrong subtype in data array.');
    }
  }
}

function checkMap(obj, expectedTypes) {
  for (var key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    var type = getType(obj[key]);
    if (expectedTypes.indexOf(type) < 0) {
      throw new ReferenceError('Wrong subtype in map.');
    }
  }
}

function verify(data, schema) {
  for (var key in data) {
    if (!data.hasOwnProperty(key)) {
      continue;
    }
    if (!schema.hasOwnProperty(key)) {
      throw new ReferenceError('Bad key, mismatching schema in logging data.');
    }
    if (schema[key].nullable && !data[key]) {
      continue;
    } else if (!data[key]) {
      throw new ReferenceError('Missing non-nullable value.');
    }

    var type = getType(data[key]);
    var expectedTypes = schema[key].type.split('|');
    var complexType = schema[key].complex_type;

    if (complexType === 'Array') {
      checkArray(data[key], expectedTypes);
    } else if (complexType === 'Object') {
      checkMap(data[key], expectedTypes);
    } else if (expectedTypes.indexOf(type) >= 0) {
      continue;
    } else {
      throw new ReferenceError('Type mismatch in logging data.');
    }
  }
  return data;
}

module.exports = verify;
