var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import Vibrant from 'node-vibrant';
import contrast from 'color-contrast';
import convert from 'color-convert';
const prioritizeSwatches = (palette, priority) => priority.map(swatchName => palette[swatchName]).filter(swatch => !!swatch);
const deprioratizeYellows = (swatches) => {
    const range = [20, 80];
    const yellows = [];
    const nonYellows = [];
    swatches.forEach(swatch => {
        const hue = swatch.hsl[0] * 360;
        if (hue >= range[0] && hue <= range[1]) {
            yellows.push(swatch);
        }
        else {
            nonYellows.push(swatch);
        }
    });
    return [...nonYellows, ...yellows];
};
const pickTopSwatch = (swatches) => swatches[0];
const getHex = (swatch) => swatch.hex;
const ensureContrastRatio = (hex) => {
    const AA = 4.5;
    const hsl = convert.hex.hsl(hex);
    while (contrast(`#${convert.hsl.hex(hsl)}`, '#FFFFFF') < AA && hsl[2] > 0) {
        hsl[2] -= 1;
    }
    return `#${convert.hsl.hex(hsl)}`;
};
const defaultSwatchPriority = [
    'Vibrant',
    'DarkVibrant',
    'LightVibrant',
    'Muted',
    'DarkMuted',
    'LightMuted',
];
const defaultConfig = {
    priority: defaultSwatchPriority,
    removeYellows: true,
    ensureContrast: true,
};
export const extractColor = (src, params = defaultConfig) => __awaiter(void 0, void 0, void 0, function* () {
    const config = Object.assign(Object.assign({}, defaultConfig), params);
    const { removeYellows, ensureContrast } = config;
    const priority = config.priority || defaultConfig.priority;
    return Vibrant.from(src)
        .getPalette()
        .then((palette) => {
        const prioritized = prioritizeSwatches(palette, priority);
        let deprioritizedYellows = [];
        if (removeYellows) {
            deprioritizedYellows = deprioratizeYellows(prioritized);
        }
        const prioritizedSwatches = deprioritizedYellows.length
            ? deprioritizedYellows
            : prioritized;
        const topSwatch = pickTopSwatch(prioritizedSwatches);
        const hex = getHex(topSwatch);
        if (ensureContrast) {
            const contrasted = ensureContrastRatio(hex);
            return contrasted;
        }
        return hex;
    });
});
//# sourceMappingURL=index.js.map