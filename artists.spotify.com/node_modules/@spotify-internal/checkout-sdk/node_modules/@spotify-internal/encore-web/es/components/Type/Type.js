import styled, { css } from 'styled-components';
import { fontWeightBlack, fontWeightBold, fontWeightBook, typeStyleBody1, typeStyleBody2, typeStyleBody3, typeStyleBody4, typeStyleCta1, typeStyleCta2, typeStyleCta3, typeStyleCta4, typeStyleDisplay1, typeStyleDisplay2, typeStyleH1, typeStyleH2, typeStyleH3, typeStyleH4 } from "../../styles";
import { assertNever } from "../../typeHelpers";
export var variants = {
  display1: 'display1',
  display2: 'display2',
  heading1: 'heading1',
  heading2: 'heading2',
  heading3: 'heading3',
  heading4: 'heading4',
  body1: 'body1',
  body2: 'body2',
  body3: 'body3',
  body4: 'body4',
  cta1: 'cta1',
  cta2: 'cta2',
  cta3: 'cta3',
  cta4: 'cta4'
};
export var weights = {
  book: 'book',
  bold: 'bold',
  black: 'black'
};
export var typeWeight = function typeWeight(weight) {
  switch (weight) {
    case 'book':
      return fontWeightBook;

    case 'bold':
      return fontWeightBold;

    case 'black':
      return fontWeightBlack;

    default:
      return assertNever(weight);
  }
};

var variantStyles = function variantStyles(variant) {
  switch (variant) {
    case 'display1':
      return typeStyleDisplay1();

    case 'display2':
      return typeStyleDisplay2();

    case 'heading1':
      return typeStyleH1();

    case 'heading2':
      return typeStyleH2();

    case 'heading3':
      return typeStyleH3();

    case 'heading4':
      return typeStyleH4();

    case 'body1':
      return typeStyleBody1();

    case 'body2':
      return typeStyleBody2();

    case 'body3':
      return typeStyleBody3();

    case 'body4':
      return typeStyleBody4();

    case 'cta1':
      return typeStyleCta1();

    case 'cta2':
      return typeStyleCta2();

    case 'cta3':
      return typeStyleCta3();

    case 'cta4':
      return typeStyleCta4();

    default:
      return assertNever(variant);
  }
};

export var TypeElement = styled.span.withConfig({
  displayName: "Type__TypeElement",
  componentId: "sc-9snywk-0"
})(["", ";", ";", ";", ";"], function (props) {
  return props.variant ? variantStyles(props.variant) : undefined;
}, function (props) {
  return props.condensed && css(["padding-bottom:0;"]);
}, function (props) {
  return props.typeColor && css(["color:", ";"], props.typeColor);
}, function (props) {
  return props.weight && css(["font-weight:", ";"], typeWeight(props.weight));
});