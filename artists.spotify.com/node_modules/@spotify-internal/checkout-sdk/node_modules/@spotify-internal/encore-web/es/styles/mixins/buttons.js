import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

var _buttonFontSize, _buttonPadding;

//
// Buttons
// --------------------------------------------------

/* eslint-disable import/prefer-default-export */
import { css } from 'styled-components';
import { fontWeightBold } from "../../styles";
export var buttonSizes = {
  sm: 'sm',
  md: 'md',
  lg: 'lg'
};
export var buttonFontWeight = fontWeightBold;
export var buttonBorderRadius = '500px';
export var buttonLineHeight = '1';
export var buttonFontSize = (_buttonFontSize = {}, _defineProperty(_buttonFontSize, buttonSizes.sm, '12px'), _defineProperty(_buttonFontSize, buttonSizes.md, '14px'), _defineProperty(_buttonFontSize, buttonSizes.lg, '16px'), _buttonFontSize);
export var buttonPadding = (_buttonPadding = {}, _defineProperty(_buttonPadding, buttonSizes.sm, '10px'), _defineProperty(_buttonPadding, buttonSizes.md, '17px'), _defineProperty(_buttonPadding, buttonSizes.lg, '20px'), _buttonPadding);
export var buttonTransitionFade = '33ms';
export var buttonBase = function buttonBase(_ref) {
  var buttonSize = _ref.buttonSize,
      condensed = _ref.condensed,
      variantRules = _ref.variantRules;
  return css(["background-color:transparent;border:0;border-radius:", ";display:inline-block;font-size:", ";font-weight:", ";letter-spacing:2px;line-height:", ";text-align:center;text-transform:uppercase;touch-action:manipulation;transition-duration:", ";transition-property:background-color,border-color,color,box-shadow,filter,transform;user-select:none;vertical-align:middle;transform:translate3d(0,0,0);", ";", ";&:focus{outline:none;}"], buttonBorderRadius, buttonFontSize[buttonSize], buttonFontWeight, buttonLineHeight, buttonTransitionFade, function () {
    var size = parseInt(buttonFontSize[buttonSize], 10);
    var padding = parseInt(buttonPadding[buttonSize], 10); // condensed text opion

    var paddingLeftRight = condensed ? 0 : size + padding * 2;
    return css(["padding:", "px ", "px;"], padding, paddingLeftRight);
  }, variantRules);
}; // Reset a button to a link looking thing

export var buttonReset = function buttonReset() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref2$lineHeight = _ref2.lineHeight,
      lineHeight = _ref2$lineHeight === void 0 ? buttonLineHeight : _ref2$lineHeight;

  return css(["background-color:transparent;border:0;color:inherit;line-height:", ";letter-spacing:inherit;padding:0;&:focus{outline:0;}"], lineHeight);
}; //  Hover primary and secondary buttons

export var buttonHover = function buttonHover() {
  return css(["transform:scale(1.04);"]);
}; // Make hoverable area of a button or link span the full height and width of its container

export var stretchedLink = function stretchedLink() {
  return css(["&::after{position:absolute;top:0;right:0;bottom:0;left:0;z-index:1;pointer-events:auto;content:'';}"]);
};