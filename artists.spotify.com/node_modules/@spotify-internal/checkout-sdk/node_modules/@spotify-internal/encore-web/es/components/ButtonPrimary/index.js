import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/* stylelint-disable no-descending-specificity */
import React from 'react';
import { gray70, gray90, green, greenDark, greenFocus, greenLight, white } from '@spotify-internal/encore-foundation';
import { css } from 'styled-components';
import { buttonHover, buttonSizes } from "../../styles/mixins/buttons";
import { colors, getColorOrDefault } from "../../styles/theme";
import { Button } from "../Button";

var isDarkTheme = function isDarkTheme(props) {
  var _props$theme;

  return ((_props$theme = props.theme) == null ? void 0 : _props$theme.button) === 'dark';
};

var hoverStyles = function hoverStyles() {
  return css(["", ";background-color:", ";color:", ";"], buttonHover(), function (props) {
    return getColorOrDefault(props.theme, colors.primaryColorHover, greenLight);
  }, function (props) {
    return getColorOrDefault(props.theme, colors.primaryColorText, white);
  });
};

var focusStyles = function focusStyles() {
  return css(["color:", ";background-color:", ";"], function (props) {
    return getColorOrDefault(props.theme, colors.primaryColorFocusText, gray90);
  }, function (props) {
    return getColorOrDefault(props.theme, colors.primaryColorFocus, greenFocus);
  });
};

var activeStyles = function activeStyles() {
  return css(["transform:scale(1);background-color:", ";box-shadow:none;color:", ";"], function (props) {
    return getColorOrDefault(props.theme, colors.primaryColorActive, greenDark);
  }, function (props) {
    return getColorOrDefault(props.theme, colors.primaryColorActiveText, gray70);
  });
};

var disabledStyles = function disabledStyles() {
  return css(["background-color:", ";color:", ";cursor:not-allowed;opacity:0.4;"], function (props) {
    return getColorOrDefault(props.theme, isDarkTheme(props) ? colors.primaryColorDisabledDark : colors.primaryColorDisabledLight, green);
  }, function (props) {
    return getColorOrDefault(props.theme, colors.primaryColorText, white);
  });
};

var buttonSolid = css(["background-color:", ";color:", ";&:hover:not(:focus):not(:disabled){", ";}", ";&:focus{", ";}", ";&:active{&,&:hover{", ";}}", ";&[disabled],fieldset[disabled] &{", ";}"], function (props) {
  return getColorOrDefault(props.theme, colors.primaryColor, green);
}, function (props) {
  return getColorOrDefault(props.theme, colors.primaryColorText, white);
}, hoverStyles(), function (props) {
  return props.hover && css(["", ";"], hoverStyles());
}, focusStyles(), function (props) {
  return props.focus && css(["", ";"], focusStyles());
}, activeStyles(), function (props) {
  return props.active && css(["", ";"], activeStyles());
}, disabledStyles());
var ButtonComponent = React.forwardRef(function (props, ref) {
  return React.createElement(Button, Object.assign({}, props, {
    condensed: false,
    variantRules: buttonSolid,
    ref: ref
  }));
});

var buttonHelpers = _objectSpread({}, buttonSizes, {
  darkTheme: {
    button: 'dark'
  },
  displayName: 'ButtonPrimary'
});

export var ButtonPrimary = Object.assign(ButtonComponent, buttonHelpers);
export default ButtonPrimary;