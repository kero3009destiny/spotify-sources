import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React from 'react';
import { ThemeProvider } from 'styled-components';
import { LoadingIndicatorCircle } from "./LoadingIndicatorCircle";
import { LoadingIndicatorSvg } from "./LoadingIndicatorSvg";
var indicatorSizes = {
  sm: 'sm',
  md: 'md',
  lg: 'lg'
};

function LoadingIndicatorComponent(_ref) {
  var _ref$theme = _ref.theme,
      theme = _ref$theme === void 0 ? {} : _ref$theme,
      _ref$indicatorSize = _ref.indicatorSize,
      indicatorSize = _ref$indicatorSize === void 0 ? 'sm' : _ref$indicatorSize,
      props = _objectWithoutProperties(_ref, ["theme", "indicatorSize"]);

  return React.createElement(ThemeProvider, {
    theme: theme
  }, React.createElement(LoadingIndicatorSvg, Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    x: "0px",
    y: "0px",
    viewBox: "0 0 1 100",
    xmlSpace: "preserve",
    indicatorSize: indicatorSize,
    role: "alert",
    "aria-live": "assertive"
  }, props), React.createElement(LoadingIndicatorCircle, {
    stroke: "none",
    cx: "-140",
    cy: "50",
    r: "32"
  }), React.createElement(LoadingIndicatorCircle, {
    stroke: "none",
    cx: "0",
    cy: "50",
    r: "32"
  }), React.createElement(LoadingIndicatorCircle, {
    stroke: "none",
    cx: "140",
    cy: "50",
    r: "32"
  })));
}

var loadingIndicatorHelpers = _objectSpread({}, indicatorSizes, {
  darkTheme: {
    loadingIndicator: 'dark'
  }
});

export var LoadingIndicator = Object.assign(LoadingIndicatorComponent, loadingIndicatorHelpers);
export default LoadingIndicator;