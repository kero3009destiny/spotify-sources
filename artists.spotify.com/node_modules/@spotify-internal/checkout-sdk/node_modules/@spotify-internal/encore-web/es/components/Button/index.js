import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React from 'react';
import { ThemeProvider } from 'styled-components';
import { buttonSizes } from "../../styles/mixins/buttons";
import ButtonElement from "./Button";
var ButtonComponent = React.forwardRef(function (_ref, ref) {
  var component = _ref.component,
      _ref$buttonSize = _ref.buttonSize,
      buttonSize = _ref$buttonSize === void 0 ? 'md' : _ref$buttonSize,
      _ref$theme = _ref.theme,
      theme = _ref$theme === void 0 ? {} : _ref$theme,
      elementProps = _objectWithoutProperties(_ref, ["component", "buttonSize", "theme"]);

  var propOverrides = {};

  if (!component && elementProps.href) {
    propOverrides.component = 'a';
  }

  if (elementProps.href && elementProps.target === '_blank') {
    propOverrides.rel = 'noopener noreferrer';
  }

  return React.createElement(ThemeProvider, {
    theme: theme
  }, React.createElement(ButtonElement, Object.assign({
    buttonSize: buttonSize,
    component: component
  }, elementProps, propOverrides, {
    ref: ref
  })));
});

var buttonHelpers = _objectSpread({}, buttonSizes, {
  darkTheme: {
    button: 'dark'
  },
  displayName: 'Button'
});

export var Button = Object.assign(ButtonComponent, buttonHelpers);
export default Button;