import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/* stylelint-disable no-descending-specificity */
import React from 'react';
import { black50, black60, black70, black90, green, greenDark, greenFocus, greenLight, white50, white60, white70, white90 } from '@spotify-internal/encore-foundation';
import { css } from 'styled-components';
import { buttonSizes } from "../../styles/mixins/buttons";
import { colors, getColorOrDefault } from "../../styles/theme";
import { Button } from "../Button";

var isDarkTheme = function isDarkTheme(props) {
  var _props$theme;

  return ((_props$theme = props.theme) == null ? void 0 : _props$theme.button) === 'dark';
};

var isGreen = function isGreen(color) {
  return color === 'green';
};

var defaultTextColor = function defaultTextColor(props) {
  return isDarkTheme(props) ? white50 : black50;
};

var defaultTextColorHover = function defaultTextColorHover(props) {
  return isDarkTheme(props) ? white90 : black90;
};

var defaultTextColorFocus = function defaultTextColorFocus(props) {
  return isDarkTheme(props) ? white70 : black70;
};

var defaultTextColorActive = function defaultTextColorActive(props) {
  return isDarkTheme(props) ? white60 : black60;
};

var textColor = function textColor(color) {
  return isGreen(color) ? green : defaultTextColor;
};

var textColorHover = function textColorHover(color) {
  return isGreen(color) ? greenLight : defaultTextColorHover;
};

var textColorActive = function textColorActive(color) {
  return isGreen(color) ? greenDark : defaultTextColorActive;
};

var textColorFocus = function textColorFocus(color) {
  return isGreen(color) ? greenFocus : defaultTextColorFocus;
};

var hoverStyles = function hoverStyles(color) {
  return css(["color:", ";"], function (props) {
    return color === 'gray' ? defaultTextColorHover : getColorOrDefault(props.theme, colors.primaryColorHover, textColorHover(color));
  });
};

var focusStyles = function focusStyles(color) {
  return css(["color:", ";outline:none;"], function (props) {
    return color === 'gray' ? defaultTextColorFocus : getColorOrDefault(props.theme, colors.primaryColorFocus, textColorFocus(color));
  });
};

var activeStyles = function activeStyles(color) {
  return css(["color:", ";outline:none;"], function (props) {
    return color === 'gray' ? defaultTextColorActive : getColorOrDefault(props.theme, colors.primaryColorActive, textColorActive(color));
  });
};

var buttonText = function buttonText(color) {
  return css(["background-color:transparent;color:", ";&:hover:not(:focus):not(:disabled){", ";}", ";&:focus{", ";}", ";&:active{", ";}", ";&[disabled],fieldset[disabled] &{color:", ";cursor:not-allowed;opacity:0.4;}"], function (props) {
    return color === 'gray' ? defaultTextColor : getColorOrDefault(props.theme, colors.primaryColor, textColor(color));
  }, hoverStyles(color), function (props) {
    return props.hover && css(["", ";"], hoverStyles(color));
  }, focusStyles(color), function (props) {
    return props.focus && css(["", ";"], focusStyles(color));
  }, activeStyles(color), function (props) {
    return props.active && css(["", ";"], activeStyles(color));
  }, function (props) {
    return color === 'gray' ? defaultTextColor : getColorOrDefault(props.theme, colors.primaryColor, textColor(color));
  });
};

var ButtonComponent = React.forwardRef(function (_ref, ref) {
  var _ref$color = _ref.color,
      color = _ref$color === void 0 ? 'gray' : _ref$color,
      _ref$condensed = _ref.condensed,
      condensed = _ref$condensed === void 0 ? false : _ref$condensed,
      props = _objectWithoutProperties(_ref, ["color", "condensed"]);

  return React.createElement(Button, Object.assign({}, props, {
    condensed: condensed,
    variantRules: buttonText(color),
    ref: ref
  }));
});

var buttonHelpers = _objectSpread({}, buttonSizes, {
  darkTheme: {
    button: 'dark'
  },
  displayName: 'ButtonTertiary'
});

export var ButtonTertiary = Object.assign(ButtonComponent, buttonHelpers);
export default ButtonTertiary;