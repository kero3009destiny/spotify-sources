var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { Event } from '@spotify-internal/remote-config-resolver';
import * as React from 'react';
import RemoteConfigContext from './remoteConfigContext';
/**
 * Connects a component to remote configuration.
 *
 * @param mapConfigurationToProps -
 * @param options -
 */
var withRemoteConfig = function (mapConfigurationToProps, options) { return function (WrappedComponent) {
    if (typeof mapConfigurationToProps !== 'function') {
        throw new Error('mapConfigurationToProps must be a function');
    }
    if (options === null ||
        typeof options !== 'object' ||
        !('blockRendering' in options)) {
        throw new Error('"blockRendering" option is required');
    }
    var blockRendering = options.blockRendering;
    var WithRemoteConfig = /** @class */ (function (_super) {
        __extends(WithRemoteConfig, _super);
        function WithRemoteConfig() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.state = {
                mappedProps: _this.getMappedProps(),
            };
            _this.handleActivate = function () {
                _this.setState({ mappedProps: _this.getMappedProps() });
            };
            return _this;
        }
        WithRemoteConfig.prototype.componentDidMount = function () {
            this.props.configuration.addListener(Event.CHANGE, this.handleActivate);
        };
        WithRemoteConfig.prototype.componentWillUnmount = function () {
            this.props.configuration.removeListener(Event.CHANGE, this.handleActivate);
        };
        WithRemoteConfig.prototype.getMappedProps = function () {
            var _a = this.props, configuration = _a.configuration, passThroughProps = _a.passThroughProps;
            if (!configuration.isActive && blockRendering)
                return null;
            var mappedProps = mapConfigurationToProps(configuration, passThroughProps);
            if (typeof mappedProps === 'undefined')
                return {};
            return mappedProps;
        };
        WithRemoteConfig.prototype.render = function () {
            var passThroughProps = this.props.passThroughProps;
            var mappedProps = this.state.mappedProps;
            return (mappedProps && (React.createElement(WrappedComponent, __assign({}, cast(__assign(__assign({}, passThroughProps), mappedProps))))));
        };
        return WithRemoteConfig;
    }(React.Component));
    var DecoratedComponent = function (props) { return (React.createElement(RemoteConfigContext.Consumer, null, function (configuration) {
        if (!configuration) {
            throw new Error('You need to wrap this component in a RemoteConfigProvider');
        }
        return (React.createElement(WithRemoteConfig, { passThroughProps: props, configuration: configuration }));
    })); };
    DecoratedComponent.displayName = "WithRemoteConfig(" + getDisplayName(WrappedComponent) + ")";
    return DecoratedComponent;
}; };
function getDisplayName(Component) {
    return Component.displayName || Component.name || 'Component';
}
function cast(v) {
    return v;
}
export default withRemoteConfig;
//# sourceMappingURL=withRemoteConfig.js.map