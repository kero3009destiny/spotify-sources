var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
import React from 'react';
import { FormPosition } from '../types';
export function getAboveForms(additionalForms, useAddressCollectionSdk) {
    return additionalForms
        .filter(function (additionalForm) { return additionalForm.position === FormPosition.above; })
        .filter(function (additionalForm) {
        if (additionalForm.name !== 'address-collection-sdk') {
            return true;
        }
        return useAddressCollectionSdk;
    })
        .map(function (additionalForm) { return (React.createElement("span", { key: additionalForm.name }, additionalForm.component)); });
}
export function getBelowForms(additionalForms, useAddressCollectionSdk) {
    return additionalForms
        .filter(function (additionalForm) { return additionalForm.position === FormPosition.below; })
        .filter(function (additionalForm) {
        if (additionalForm.name !== 'address-collection-sdk') {
            return true;
        }
        return useAddressCollectionSdk;
    })
        .map(function (additionalForm) { return (React.createElement("span", { key: additionalForm.name }, additionalForm.component)); });
}
export function submitAdditionalForms(additionalForms, useAddressCollectionSdk) {
    return __awaiter(this, void 0, void 0, function () {
        var forms, forms_1, forms_1_1, form, e_1_1;
        var e_1, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    forms = additionalForms.filter(function (additionalForm) {
                        if (additionalForm.name !== 'address-collection-sdk') {
                            return true;
                        }
                        return useAddressCollectionSdk;
                    });
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 6, 7, 8]);
                    forms_1 = __values(forms), forms_1_1 = forms_1.next();
                    _b.label = 2;
                case 2:
                    if (!!forms_1_1.done) return [3, 5];
                    form = forms_1_1.value;
                    return [4, form.hooks.onSubmit()];
                case 3:
                    _b.sent();
                    _b.label = 4;
                case 4:
                    forms_1_1 = forms_1.next();
                    return [3, 2];
                case 5: return [3, 8];
                case 6:
                    e_1_1 = _b.sent();
                    e_1 = { error: e_1_1 };
                    return [3, 8];
                case 7:
                    try {
                        if (forms_1_1 && !forms_1_1.done && (_a = forms_1.return)) _a.call(forms_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7];
                case 8: return [2];
            }
        });
    });
}
export function additionalFormIsLoading(additionalForms) {
    return additionalForms.some(function (additionalForm) { return additionalForm.isLoading; });
}
export function getAdditionalFormErrors(additionalForms) {
    return additionalForms
        .map(function (additionalForm) { var _a; return (_a = additionalForm.errors) !== null && _a !== void 0 ? _a : []; })
        .reduce(function (acc, val) { return acc.concat(val); }, []);
}
export function getPostalCodeFromAdditionalForm(additionalForms) {
    var e_2, _a;
    var _b, _c;
    try {
        for (var additionalForms_1 = __values(additionalForms), additionalForms_1_1 = additionalForms_1.next(); !additionalForms_1_1.done; additionalForms_1_1 = additionalForms_1.next()) {
            var form = additionalForms_1_1.value;
            var postalCode = (_c = (_b = form.hooks)._getPostalCode) === null || _c === void 0 ? void 0 : _c.call(_b);
            if (postalCode) {
                return postalCode;
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (additionalForms_1_1 && !additionalForms_1_1.done && (_a = additionalForms_1.return)) _a.call(additionalForms_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return undefined;
}
