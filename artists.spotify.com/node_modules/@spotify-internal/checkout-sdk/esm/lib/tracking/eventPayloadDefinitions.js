var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
export var snakeCaseify = function (obj) {
    return Object.keys(obj).reduce(function (accum, current) {
        var _a;
        return (__assign(__assign({}, accum), (_a = {}, _a[current.replace(/[A-Z]/g, function (letter) { return "_" + letter.toLowerCase(); })] = obj[current], _a)));
    }, {});
};
export var enforceBooleans = function (eventParams, enforceKeys) {
    var result = __assign({}, eventParams);
    enforceKeys.forEach(function (key) {
        result[key] = Boolean(eventParams[key]);
    });
    return result;
};
var getEventParams = function (params, enforceKeys) {
    return snakeCaseify(enforceBooleans(params, enforceKeys));
};
export var checkoutViewEvent = function (payload) { return ({
    eventName: 'CheckoutViewJS',
    eventParams: getEventParams(payload, ['hasStoredDetails']),
}); };
export var checkoutClientConfigEvent = function (payload) { return ({
    eventName: 'CheckoutClientConfig',
    eventParams: getEventParams(payload, []),
}); };
export var checkoutPaymentAttemptEvent = function (eventParams) { return ({
    eventName: 'CheckoutPaymentAttemptJS',
    eventParams: getEventParams(eventParams, ['hasStoredDetails']),
}); };
export var checkoutPaymentValidationErrorEvent = function (payload) { return ({
    eventName: 'CheckoutPaymentValidationErrorJS',
    eventParams: getEventParams(payload, []),
}); };
export var checkoutPaymentViewEvent = function (payload) { return ({
    eventName: 'CheckoutPaymentView',
    eventParams: getEventParams(payload, []),
}); };
export var checkoutPaymentActionEvent = function (payload) { return ({
    eventName: 'CheckoutPaymentAction',
    eventParams: getEventParams(payload, []),
}); };
export var paymentErrorMessageEvent = function (payload) { return ({
    eventName: 'PaymentErrorMessage',
    eventParams: getEventParams(payload, []),
}); };
export var checkoutFlowStartEvent = function (payload) { return ({
    eventName: 'CheckoutFlowStart',
    eventParams: getEventParams(payload, []),
}); };
export var checkoutFormViewEvent = function (payload) { return ({
    eventName: 'CheckoutFormView',
    eventParams: getEventParams(payload, []),
}); };
