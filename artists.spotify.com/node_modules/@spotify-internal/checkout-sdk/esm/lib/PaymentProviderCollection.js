var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
import { captureException } from '@sentry/browser';
import { FormLayout } from '../types';
var createProviderFromDataResponse = function (providerResponse, offerLegalTerms) {
    var legalTerms = __spread(providerResponse.legalTerms, offerLegalTerms).map(function (term) { return (__assign({}, term)); });
    var originalData = JSON.stringify(__assign(__assign({}, providerResponse), { legalTerms: legalTerms }));
    if (!providerResponse.backendConfiguration)
        throw new Error('Provider is missing backend configuration');
    return Object.freeze(__assign(__assign({}, providerResponse), { legalTerms: legalTerms,
        originalData: originalData, backendConfiguration: providerResponse.backendConfiguration }));
};
var createProviderFromProceedResponse = function (provider, proceedResponse, legalTerms) {
    var additionalData = __assign(__assign({}, proceedResponse), { layout: proceedResponse.form, postUrl: proceedResponse.url, legalTerms: legalTerms || provider.legalTerms });
    return Object.freeze(__assign(__assign({}, provider), additionalData));
};
var PaymentProviderCollection = (function () {
    function PaymentProviderCollection(providerResponses, activeId, offerLegalTerms) {
        if (providerResponses === void 0) { providerResponses = []; }
        if (activeId === void 0) { activeId = ''; }
        if (offerLegalTerms === void 0) { offerLegalTerms = []; }
        this.offerLegalTerms = offerLegalTerms;
        this.activeId = '';
        this.providers = providerResponses.map(function (providerData) {
            return createProviderFromDataResponse(providerData, offerLegalTerms);
        });
        this.setActiveProvider(activeId);
    }
    PaymentProviderCollection.fromJSON = function (json) {
        var providerCollection = new PaymentProviderCollection();
        providerCollection.initializeFromJSON(json);
        return providerCollection;
    };
    PaymentProviderCollection.buildFromDataResponse = function (response, initialProviderIdProps, offerLegalTerms) {
        var _a;
        var propProviderId = initialProviderIdProps;
        if (propProviderId && propProviderId.indexOf('billing_') === -1) {
            propProviderId = "billing_" + propProviderId;
        }
        if (!response.providers.find(function (p) { return p.id === propProviderId; })) {
            if (propProviderId) {
                captureException(new Error("Invalid initialProviderId, '" + propProviderId + "' is not present in providers list: [" + response.providers
                    .map(function (p) { return p.id; })
                    .join(',') + "]"));
            }
            propProviderId = undefined;
        }
        var defaultProviderId = response.providers.length === 1 ? (_a = response.providers[0]) === null || _a === void 0 ? void 0 : _a.id : '';
        var activeProviderId = response.initialProviderId || propProviderId || defaultProviderId;
        return new PaymentProviderCollection(response.providers, activeProviderId, offerLegalTerms);
    };
    PaymentProviderCollection.prototype.toJSON = function () {
        return JSON.stringify({
            providers: this.providers,
            activeId: this.activeId,
        });
    };
    PaymentProviderCollection.prototype.initializeFromJSON = function (json) {
        var providers;
        var activeId;
        try {
            var parsedJson = JSON.parse(json);
            providers = parsedJson.providers;
            activeId = parsedJson.activeId;
        }
        catch (e) {
            providers = [];
            activeId = '';
        }
        this.providers = providers;
        this.activeId = activeId;
    };
    Object.defineProperty(PaymentProviderCollection.prototype, "hasProviders", {
        get: function () {
            return !!this.providers.length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PaymentProviderCollection.prototype, "hasActiveProvider", {
        get: function () {
            return !!this.activeProvider;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PaymentProviderCollection.prototype, "allProviders", {
        get: function () {
            return __spread(this.providers);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PaymentProviderCollection.prototype, "activeProvider", {
        get: function () {
            return this.findProvider(this.activeId);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PaymentProviderCollection.prototype, "activeProviderId", {
        get: function () {
            var _a;
            return ((_a = this.activeProvider) === null || _a === void 0 ? void 0 : _a.id) || '';
        },
        enumerable: false,
        configurable: true
    });
    PaymentProviderCollection.prototype.setActiveProvider = function (id) {
        if (id && this.findProvider(id)) {
            this.activeId = id;
        }
        return this;
    };
    PaymentProviderCollection.prototype.getProviderWithPci = function () {
        if (this.providerWithPci) {
            return this.providerWithPci;
        }
        this.providerWithPci = this.providers.find(function (provider) {
            return (provider.layout.find(function (layoutComponent) {
                return layoutComponent.type === FormLayout.Pci;
            }) !== undefined);
        });
        return this.providerWithPci;
    };
    PaymentProviderCollection.prototype.setProceedFormForActiveProvider = function (proceedFormResponse, legalTerms) {
        var newActiveProvider = createProviderFromProceedResponse(this.activeProvider, proceedFormResponse, legalTerms);
        this.replaceActiveProvider(newActiveProvider);
        return this;
    };
    PaymentProviderCollection.prototype.setInitalFormForActiveProvider = function () {
        var newActiveProvider = createProviderFromDataResponse(JSON.parse(this.activeProvider.originalData), this.offerLegalTerms);
        this.replaceActiveProvider(newActiveProvider);
        return this;
    };
    PaymentProviderCollection.prototype.toggleLegalTermCheckboxOnActiveProvider = function (legalTermIndex) {
        var activeProvider = this.activeProvider;
        var legalTerm = activeProvider.legalTerms[legalTermIndex];
        if (legalTerm && legalTerm.type === 'checkbox') {
            legalTerm.consent = !legalTerm.consent;
        }
        this.replaceActiveProvider(activeProvider);
        return this;
    };
    PaymentProviderCollection.prototype.findProvider = function (providerId) {
        return this.providers.find(function (provider) { return provider.id === providerId; });
    };
    PaymentProviderCollection.prototype.replaceActiveProvider = function (newActiveProvider) {
        var providers = __spread(this.providers);
        providers[this.activePoviderIndex] = newActiveProvider;
        this.providers = providers;
    };
    Object.defineProperty(PaymentProviderCollection.prototype, "activePoviderIndex", {
        get: function () {
            var _this = this;
            return this.providers.findIndex(function (provider) { return provider.id === _this.activeId; });
        },
        enumerable: false,
        configurable: true
    });
    return PaymentProviderCollection;
}());
export default PaymentProviderCollection;
