import { postRedirect } from './postRedirect';
import { captureException } from '@sentry/browser';
var REDIRECT = 'redirect';
export var DELIVERED = 'delivered';
var POST_REDIRECT = 'post_redirect';
var FORM = 'form';
var KLARNA_WIDGET = 'klarna_widget';
var WAIT = 'wait';
var ERROR = 'error';
var IFRAME_FINGERPRINT = 'iframe_fingerprint';
var IFRAME_CHALLENGE = 'iframe_challenge';
export function handleResponse(response, checkoutReduxActions, onSuccess) {
    switch (response.action) {
        case ERROR:
            checkoutReduxActions.addErrors(response.data.errors);
            break;
        case DELIVERED:
            if (onSuccess) {
                onSuccess();
            }
            else {
                checkoutReduxActions.setIsLoading(true);
                window.location = response.data.url;
            }
            break;
        case REDIRECT:
            checkoutReduxActions.showRedirectOverlay();
            window.location = response.data.url;
            break;
        case POST_REDIRECT:
            checkoutReduxActions.setIsLoading(true);
            postRedirect(response.data);
            break;
        case FORM:
            if (response.data.error) {
                checkoutReduxActions.addErrors([response.data.error]);
            }
            checkoutReduxActions.showProceedForm(response.data);
            break;
        case KLARNA_WIDGET:
            checkoutReduxActions.showKlarnaWidget(response.data);
            break;
        case WAIT:
            checkoutReduxActions.setDelayedRequest(response.data);
            break;
        case IFRAME_FINGERPRINT:
            checkoutReduxActions.set3ds2FingerprintData(response.data);
            break;
        case IFRAME_CHALLENGE:
            checkoutReduxActions.set3ds2ChallengeData(response.data);
            break;
        default: {
            var err = new Error('Received unsupported response action');
            captureException(err);
            throw err;
        }
    }
}
