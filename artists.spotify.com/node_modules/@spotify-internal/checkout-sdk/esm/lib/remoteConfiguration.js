var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { useBool, useConfiguration, useEnum, useInt, } from '@spotify-internal/remote-config-resolver-react';
import { properties } from './createRemoteConfigResolver';
import createTransport from 'spotify-transport';
import { Event } from 'spotify-transport/types';
import spotifyComProviders from 'spotify-transport/providers/spotify_com';
import { Environment, getBaseUrl, } from '../components/CheckoutProvider/environment';
import { readCookie } from './cookies';
import { isTransportEnabledForClient, returnDummyTransport } from './transport';
export var RC_RESOLVE_TIMEOUT = 2000;
var propertiesList = properties.properties
    ? properties.properties
    : [];
export var isUsingExperimentationPlatform = function () {
    return ((process.env.NODE_ENV === 'production' &&
        window.location.hostname.includes('spotify.com')) ||
        readCookie('router-bearer-token'));
};
var getDefaultValue = function (property) {
    if (!property) {
        return undefined;
    }
    if ('intSpec' in property && property.intSpec.default !== null) {
        return property.intSpec.default;
    }
    if ('boolSpec' in property && property.boolSpec.default !== null) {
        return property.boolSpec.default;
    }
    if ('enumSpec' in property && property.enumSpec.default !== null) {
        return property.enumSpec.default;
    }
    return undefined;
};
export var getInt = function (key, clientName, clientContext, options) {
    if (clientName === void 0) { clientName = ''; }
    if (clientContext === void 0) { clientContext = ''; }
    if (isUsingExperimentationPlatform() &&
        isTransportEnabledForClient(clientName, clientContext)) {
        return useInt(key, options);
    }
    return getDefaultValue(propertiesList.find(function (p) { return p.name === key; }));
};
export var getBool = function (key, clientName, clientContext, options) {
    if (clientName === void 0) { clientName = ''; }
    if (clientContext === void 0) { clientContext = ''; }
    if (isUsingExperimentationPlatform() &&
        isTransportEnabledForClient(clientName, clientContext)) {
        return useBool(key, options);
    }
    return getDefaultValue(propertiesList.find(function (p) { return p.name === key; }));
};
export var getEnum = function (key, clientName, clientContext, options) {
    if (clientName === void 0) { clientName = ''; }
    if (clientContext === void 0) { clientContext = ''; }
    if (isUsingExperimentationPlatform() &&
        isTransportEnabledForClient(clientName, clientContext)) {
        return useEnum(key, options);
    }
    return getDefaultValue(propertiesList.find(function (p) { return p.name === key; }));
};
export var getConfiguration = function () {
    if (process.env.NODE_ENV === 'production') {
        return useConfiguration();
    }
    return {};
};
export var patchTransportForCorsFetchCookies = function (transport) {
    var origFetchRequestFun = transport._Fetch.request;
    transport._Fetch.request = function (url, optArgs) {
        if (optArgs === void 0) { optArgs = {}; }
        return origFetchRequestFun(url, __assign(__assign({}, optArgs), { credentials: 'include' }));
    };
    return transport;
};
var createEnvEndPointsProvider = function () {
    var env = process.env.NODE_ENV !== Environment.PRODUCTION
        ? Environment.SHARED
        : Environment.PRODUCTION;
    return function () {
        return Promise.resolve({
            webgate: getBaseUrl(env) + "/api",
        });
    };
};
export var getTransport = function (clientName, clientContext) {
    if (clientContext === void 0) { clientContext = ''; }
    var transport;
    if (isUsingExperimentationPlatform() &&
        isTransportEnabledForClient(clientName, clientContext)) {
        transport = createTransport({
            providers: {
                endpoints: createEnvEndPointsProvider(),
                token: spotifyComProviders.createTokenProvider(),
            },
            requestMode: 'fetch',
        });
        transport = patchTransportForCorsFetchCookies(transport);
    }
    else {
        transport = returnDummyTransport();
    }
    transport.once(Event.TRANSPORT_CONNECTED, function () {
        transport.authenticate();
    });
    transport.connect();
    return transport;
};
