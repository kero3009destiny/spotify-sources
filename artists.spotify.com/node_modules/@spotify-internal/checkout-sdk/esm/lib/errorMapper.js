import { ERROR_CODES } from './errorCodes';
import { StoredErrorType } from '../components/Error/types';
var mapError = function (e, errorMessages, checkoutProps) {
    if (typeof e !== 'string') {
        if (e.code === ERROR_CODES.COUNTRY_MISMATCH &&
            checkoutProps.hasOnOpenCountryPicker &&
            errorMessages.countryMismatchWithPicker) {
            return {
                type: StoredErrorType.COUNTRY_MISMATCH,
                value: errorMessages.countryMismatchWithPicker,
            };
        }
        else if ([
            ERROR_CODES.DISCOUNT_ABUSE_BLOCKED,
            ERROR_CODES.DISCOUNT_BLOCKED,
        ].includes(e.code) &&
            checkoutProps.discountBlocker) {
            return {
                type: StoredErrorType.HTML,
                value: errorMessages.discountBlock
                    .replace('{fullPriceUrl}', checkoutProps.discountBlocker.fullPriceUrl)
                    .replace('{productName}', checkoutProps.discountBlocker.productName),
            };
        }
    }
    return {
        type: StoredErrorType.HTML,
        value: typeof e !== 'string' ? e.message : e,
    };
};
var mapErrors = function (newErrors, validationErrorMessages, checkoutProps) {
    return newErrors.map(function (e) {
        return mapError(e, validationErrorMessages, checkoutProps);
    });
};
export var getErrorFromErrorCode = function (responseError, errorMessages, checkoutProps) {
    var error = { code: responseError.code, message: '' };
    switch (responseError.code) {
        case ERROR_CODES.COUNTRY_MISMATCH:
            error.message = errorMessages.countryMismatch;
            break;
        case ERROR_CODES.DISCOUNT_BLOCKED:
            error.message = errorMessages.discountBlock;
            break;
        case ERROR_CODES.DISCOUNT_ABUSE_BLOCKED:
            error.message = errorMessages.discountBlock;
            break;
        default:
            error.message = responseError.message;
    }
    return mapError(error, errorMessages, checkoutProps);
};
export var getErrorFromString = function (errorMessage) { return ({
    type: StoredErrorType.HTML,
    value: errorMessage,
}); };
export default mapErrors;
