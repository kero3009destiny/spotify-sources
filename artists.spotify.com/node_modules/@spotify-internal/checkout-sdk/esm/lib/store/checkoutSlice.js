var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
import { createSlice } from '@reduxjs/toolkit';
import PaymentProviderCollection from '../PaymentProviderCollection';
import { FlowStep, FormLayout } from '../../types';
import errorMapper, { getErrorFromErrorCode, getErrorFromString, } from '../errorMapper';
var emptyThreeDS2State = {
    fingerprintData: null,
    challengeData: null,
};
var emptyCheckoutProps = {};
var emptyErrorArray = [];
var emptyDelayedRequest = {};
export var initialState = {
    errors: emptyErrorArray,
    isLoading: false,
    attemptId: '',
    flowId: '',
    formId: '',
    strings: {
        paymentPickerLabel: '',
        moreProviderLogosLabel: '',
        changePaymentMethodLabel: '',
        paymentDetailsLabel: '',
        ctaLabel: '',
        cancelLabel: '',
        redirectMessage: '',
        globalErrorMessage: '',
        validationErrorMessages: {
            email: '',
            required: '',
            countryMismatchWithPicker: '',
            countryMismatch: '',
            discountBlock: '',
        },
    },
    isRtl: false,
    checkoutProps: emptyCheckoutProps,
    providerCollection: '',
    threeDS2: emptyThreeDS2State,
    delayedRequest: emptyDelayedRequest,
    isFetchDataError: false,
    isRedirectOverlayShowing: false,
    isWaitOverlayShowing: false,
    isPaymentFormValid: false,
    flowStep: FlowStep.Prepare,
    skipPaymentAttemptTracking: false,
    configurationResolved: false,
    experimentIsApplied: false,
};
export var checkoutSlice = createSlice({
    name: 'checkout',
    initialState: initialState,
    reducers: {
        addErrors: function (state, action) {
            var errors = errorMapper(action.payload, state.strings.validationErrorMessages, state.checkoutProps);
            state.errors = __spread(state.errors, errors);
        },
        clearErrors: function (state) {
            state.errors = [];
        },
        setDataResponse: function (state, action) {
            var _a;
            var providerCollection = PaymentProviderCollection.buildFromDataResponse(action.payload, state.checkoutProps.initialProviderId, state.checkoutProps.offerLegalTerms);
            state.providerCollection = providerCollection.toJSON();
            state.isLoading = false;
            state.strings.paymentPickerLabel = action.payload.paymentPickerLabel;
            state.strings.moreProviderLogosLabel =
                action.payload.moreProviderLogosLabel;
            state.strings.changePaymentMethodLabel =
                action.payload.changePaymentMethodLabel;
            state.strings.paymentDetailsLabel = action.payload.paymentDetailsLabel;
            state.strings.ctaLabel = action.payload.ctaLabel;
            state.strings.redirectMessage = action.payload.redirectMessage;
            state.strings.globalErrorMessage = action.payload.globalErrorMessage;
            state.strings.validationErrorMessages =
                action.payload.validationErrorMessages;
            state.isRtl = action.payload.isRtl;
            state.formId = ((_a = providerCollection.activeProvider) === null || _a === void 0 ? void 0 : _a.formId) || '';
            var errors = state.errors;
            if (action.payload.initialErrorMessage) {
                errors = __spread(errors, [
                    getErrorFromString(action.payload.initialErrorMessage),
                ]);
            }
            else if (action.payload.initialError) {
                errors = __spread(errors, [
                    getErrorFromErrorCode(action.payload.initialError, action.payload.validationErrorMessages, state.checkoutProps),
                ]);
            }
            state.errors = errors;
        },
        setIsFetchDataError: function (state) {
            state.isWaitOverlayShowing = false;
            state.isFetchDataError = true;
        },
        showGlobalError: function (state) {
            state.errors = [getErrorFromString(state.strings.globalErrorMessage)];
            state.isWaitOverlayShowing = false;
            state.isLoading = false;
        },
        showRedirectOverlay: function (state) {
            state.isRedirectOverlayShowing = true;
        },
        setDelayedRequest: function (state, action) {
            state.delayedRequest = action.payload;
            state.isLoading = true;
            state.isWaitOverlayShowing = true;
        },
        setIsLoading: function (state, action) {
            state.isLoading = action.payload;
        },
        setFlowId: function (state, action) {
            state.flowId = action.payload;
        },
        setFormId: function (state, action) {
            state.formId = action.payload;
        },
        setAttemptId: function (state, action) {
            state.attemptId = action.payload;
        },
        setCheckoutProps: function (state, action) {
            state.checkoutProps = action.payload;
        },
        setActiveProviderId: function (state, action) {
            var providerCollection = PaymentProviderCollection.fromJSON(state.providerCollection).setActiveProvider(action.payload);
            state.providerCollection = providerCollection.toJSON();
        },
        showProceedForm: function (state, action) {
            var label = state.checkoutProps.buttonLabel || action.payload.ctaLabel;
            var ctaLabel = label;
            var uxCtaLabel = label;
            var providerCollection = PaymentProviderCollection.fromJSON(state.providerCollection).setProceedFormForActiveProvider(__assign(__assign({}, action.payload), { ctaLabel: ctaLabel,
                uxCtaLabel: uxCtaLabel }));
            state.providerCollection = providerCollection.toJSON();
            state.formId = action.payload.formId || '';
            state.flowStep = FlowStep.Proceed;
        },
        showInitialForm: function (state) {
            var providerCollection = PaymentProviderCollection.fromJSON(state.providerCollection).setInitalFormForActiveProvider();
            state.providerCollection = providerCollection.toJSON();
            state.flowStep = FlowStep.Prepare;
        },
        showKlarnaWidget: function (state, action) {
            var providerCollection = PaymentProviderCollection.fromJSON(state.providerCollection).setProceedFormForActiveProvider({
                form: [
                    {
                        type: FormLayout.KlarnaWidget,
                        options: {
                            clientToken: action.payload.clientToken,
                            name: 'authorizationToken',
                        },
                    },
                ],
                url: action.payload.url,
                checkoutId: action.payload.checkoutId,
            }, []);
            state.providerCollection = providerCollection.toJSON();
        },
        toggleLegalTermCheckbox: function (state, action) {
            var providerCollection = PaymentProviderCollection.fromJSON(state.providerCollection).toggleLegalTermCheckboxOnActiveProvider(action.payload);
            state.providerCollection = providerCollection.toJSON();
        },
        set3ds2FingerprintData: function (state, action) {
            state.threeDS2.fingerprintData = action.payload;
        },
        set3ds2ChallengeData: function (state, action) {
            state.threeDS2.challengeData = action.payload;
        },
        setConfigurationResolved: function (state) {
            state.configurationResolved = true;
        },
        setExperimentIsApplied: function (state) {
            state.experimentIsApplied = true;
        },
        setIsPaymentFormValid: function (state, action) {
            state.isPaymentFormValid = action.payload;
        },
        setSkipPaymentAttemptTracking: function (state, action) {
            state.skipPaymentAttemptTracking = action.payload;
        },
    },
});
export var checkoutSliceActions = checkoutSlice.actions;
export default checkoutSlice.reducer;
