var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { isSoundbetter, } from '../components/CheckoutProvider/environment';
import * as backend from './backend';
import { BackendType } from './backend';
import * as Sentry from '@sentry/browser';
import { getCsrfToken, setCsrfToken } from '../lib/csrf-store';
function addBackendConfiguration(backendType) {
    return function (response) {
        if (response.ok && response.body) {
            if (backendType === BackendType.SDK_SERVICE) {
                setCsrfToken(response.body.csrfToken);
            }
            response.body.providers.forEach(function (provider) {
                return (provider.backendConfiguration = {
                    backendType: backendType,
                    csrfToken: response.body.csrfToken,
                });
            });
        }
        return response;
    };
}
function getCheckoutDataFromWebsite(fetchParams, requestArgs) {
    return backend
        .getCheckoutData(fetchParams, requestArgs)
        .then(addBackendConfiguration(BackendType.WEBSITE));
}
function getCheckoutDataFromSdkService(fetchParams, requestArgs) {
    return (backend
        .getCheckoutData(__assign(__assign({}, fetchParams), { backendType: BackendType.SDK_SERVICE }), __assign(__assign({}, requestArgs), { paymentProviderIds: requestArgs.sdkServiceProviderIds || [] }), 1)
        .then(addBackendConfiguration(BackendType.SDK_SERVICE))
        .catch(function (error) {
        Sentry.withScope(function (scope) {
            scope.setExtra('sp-trace-id', error === null || error === void 0 ? void 0 : error.traceId);
            scope.setExtra('status-code', error === null || error === void 0 ? void 0 : error.status);
            Sentry.captureException(error);
        });
        return { ok: false };
    }));
}
function sdkServiceCanHandleAllProviders(requestArgs, sdkServiceSupportsStoredDetails) {
    var _a;
    if (isSoundbetter()) {
        return true;
    }
    return ((!requestArgs.storedPaymentDetails || sdkServiceSupportsStoredDetails) &&
        ((_a = requestArgs.sdkServiceProviderIds) === null || _a === void 0 ? void 0 : _a.length) ===
            requestArgs.paymentProviderIds.length);
}
function getCombinedCheckoutData(fetchParams, requestArgs) {
    return Promise.all([
        getCheckoutDataFromWebsite(fetchParams, requestArgs),
        getCheckoutDataFromSdkService(fetchParams, requestArgs),
    ]).then(function (responses) {
        var _a = __read(responses, 2), websiteResponse = _a[0], sdkServiceResponse = _a[1];
        if (!sdkServiceResponse.ok || !sdkServiceResponse.body) {
            return websiteResponse;
        }
        if (!websiteResponse.ok || !websiteResponse.body) {
            return sdkServiceResponse;
        }
        var websiteProviders = websiteResponse.body.providers;
        var sdkServiceProviders = sdkServiceResponse.body.providers;
        var combinedProviders = websiteProviders === null || websiteProviders === void 0 ? void 0 : websiteProviders.map(function (websiteProvider) {
            return (sdkServiceProviders === null || sdkServiceProviders === void 0 ? void 0 : sdkServiceProviders.find(function (sdkServiceProvider) { return sdkServiceProvider.id === websiteProvider.id; })) || websiteProvider;
        });
        return __assign(__assign({}, sdkServiceResponse), { body: __assign(__assign({}, sdkServiceResponse.body), { paymentDetailsLabel: websiteResponse.body.paymentDetailsLabel || '', providers: combinedProviders, initialProviderId: sdkServiceResponse.body.initialProviderId ||
                    websiteResponse.body.initialProviderId, initialErrorMessage: (!sdkServiceResponse.body.initialError &&
                    websiteResponse.body.initialErrorMessage) ||
                    '' }) });
    });
}
export var getCheckoutData = function (fetchParams, requestArgs, sdkServiceSupportsStoredDetails) {
    var _a;
    if (!((_a = requestArgs.sdkServiceProviderIds) === null || _a === void 0 ? void 0 : _a.length)) {
        return getCheckoutDataFromWebsite(fetchParams, requestArgs);
    }
    if (sdkServiceCanHandleAllProviders(requestArgs, sdkServiceSupportsStoredDetails)) {
        return getCheckoutDataFromSdkService(fetchParams, requestArgs)
            .then(function (response) {
            if (!response.ok || !response.body) {
                return getCheckoutDataFromWebsite(fetchParams, requestArgs);
            }
            return response;
        })
            .catch(function () { return getCheckoutDataFromWebsite(fetchParams, requestArgs); });
    }
    return getCombinedCheckoutData(fetchParams, requestArgs);
};
export var prepare = function (fetchParams, backendConfiguration, data, locale) {
    if (backendConfiguration.backendType === BackendType.WEBSITE) {
        data['checkout[_token]'] = backendConfiguration.csrfToken;
    }
    if (backendConfiguration.backendType === BackendType.SDK_SERVICE) {
        fetchParams.headers['X-CSRF-Token'] = getCsrfToken();
    }
    return backend.prepare(fetchParams, backendConfiguration, data, locale);
};
export var postRequest = function (additionalParameters, url, backendConfiguration, headers, data) {
    if (backendConfiguration.backendType === BackendType.WEBSITE) {
        data['checkout[_token]'] = backendConfiguration.csrfToken;
    }
    if (backendConfiguration.backendType === BackendType.SDK_SERVICE) {
        headers['X-CSRF-Token'] = getCsrfToken();
    }
    return backend.postRequest(additionalParameters, url, backendConfiguration, headers, data);
};
