import PciMessenger from './pci-messenger';
import { fingerprintsCollectionFactory } from './fingerprinter';
var IFRAME_CLASSNAME = 'pci-iframe';
var CARD_ICONS = ['visa', 'mastercard', 'amex', 'cb'];
var LABEL_TRANS_MAPPING = {
    cardNumber: 'cardnumber',
    expirationDate: 'expiration_date',
    month: 'label_month',
    year: 'label_year',
    securityCode: 'security_code',
    postalCode: 'label_postal_code',
    postalCodeChoices: 'label_postal_code_choices',
    postalCodeChoicesPlaceholder: 'label_postal_code_choices_select',
};
var EVENT_LOAD = 'load';
var EVENT_SUCCESS = 'success';
var EVENT_ERROR_SHOW = 'error:show';
var EVENT_ERROR_HIDE = 'error:hide';
var EVENT_TOOLTIP_SHOW = 'tooltip:show';
var EVENT_TOOLTIP_HIDE = 'tooltip:hide';
var EVENT_RESIZE = 'resize';
var EVENT_TRIGGER_SUBMIT = 'trigger:submit';
var EVENTS = [
    EVENT_LOAD,
    EVENT_SUCCESS,
    EVENT_ERROR_SHOW,
    EVENT_ERROR_HIDE,
    EVENT_TOOLTIP_SHOW,
    EVENT_TOOLTIP_HIDE,
    EVENT_RESIZE,
    EVENT_TRIGGER_SUBMIT,
];
var PciClient = (function () {
    function PciClient(el, opts, fingerprintGenerator) {
        var _this = this;
        this.isLoaded = false;
        this.boundResizeListener = this._resizeListener.bind(this);
        this.el = el;
        this.opts = this.buildOptions(opts);
        this.messenger = new PciMessenger(function () { return _this.iframe; }, this.handleMessage.bind(this));
        if (fingerprintGenerator) {
            this.fingerprintPromise = fingerprintGenerator();
        }
        else {
            var dfDo = require('./vendor/adyen-df');
            var createFingerprintGenerator = fingerprintsCollectionFactory(dfDo);
            this.fingerprintPromise = createFingerprintGenerator(this.opts.fingerprinting);
        }
        this.handlers = EVENTS.reduce(function (res, name) {
            res[name] = [];
            return res;
        }, {});
    }
    PciClient.prototype.load = function () {
        this.isLoaded = false;
        this.iframe = this.createIframe(this.opts.url, this.opts.className);
        this.messenger.addMessageListener();
        this.el.appendChild(this.iframe);
        return this;
    };
    PciClient.prototype.reload = function () {
        if (this.iframe) {
            this.el.removeChild(this.iframe);
        }
        this.load();
        return this;
    };
    PciClient.prototype.triggerResize = function () {
        var _this = this;
        if (this.isLoaded) {
            window.setTimeout(function () {
                _this.messenger.sendRoute('getHeight');
            }, 200);
        }
        return this;
    };
    PciClient.prototype.submit = function () {
        this.messenger.sendRoute('submit', {
            provider: this.opts.providers[this.opts.providers.length - 1],
            providers: this.opts.providers,
        });
        return this;
    };
    PciClient.prototype.showFieldError = function (errorType, msg) {
        this.messenger.sendRoute('showFieldError', {
            errorType: errorType,
            msg: msg,
        });
        return this;
    };
    PciClient.prototype.on = function (name, handler) {
        if (!this.isSupportedEvent(name)) {
            throw new TypeError("Unsupported event: " + name);
        }
        if (typeof handler === 'function') {
            this.handlers[name].push(handler);
        }
        return this;
    };
    PciClient.prototype.off = function (name, specificHandler) {
        if (!this.isSupportedEvent(name)) {
            return this;
        }
        if (specificHandler) {
            this.handlers[name] = this.handlers[name].filter(function (handler) { return handler !== specificHandler; });
        }
        else {
            this.handlers[name] = [];
        }
        return this;
    };
    PciClient.prototype.buildOptions = function (opts) {
        if (!opts.url) {
            throw new TypeError('Must provide opts.url');
        }
        if (!opts.providers || !opts.providers.length) {
            throw new TypeError('Must provide non empty opts.providers');
        }
        if (!opts.generationTime) {
            throw new TypeError('Must provide opts.generationTime');
        }
        var translations = {};
        var key;
        for (key in LABEL_TRANS_MAPPING) {
            if (opts.labels.hasOwnProperty(key)) {
                var pciField = LABEL_TRANS_MAPPING[key];
                translations[pciField] = opts.labels[key];
            }
        }
        return {
            url: opts.url,
            providers: opts.providers,
            className: opts.className || null,
            stylesheets: opts.stylesheets || [],
            translations: translations,
            icons: CARD_ICONS,
            generationTime: opts.generationTime,
            fieldValidationOnBlur: opts.fieldValidationOnBlur || false,
            autoAdvance: opts.autoAdvance || false,
            fingerprinting: opts.fingerprinting,
            isRtl: opts.isRtl || false,
            postal: opts.postal || {
                require: false,
            },
        };
    };
    PciClient.prototype.isSupportedEvent = function (name) {
        return EVENTS.indexOf(name) > -1;
    };
    PciClient.prototype.trigger = function (name) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (!this.isSupportedEvent(name) || !this.handlers[name].length) {
            return this;
        }
        this.handlers[name].map(function (func) {
            func.apply(func, args);
        });
        return this;
    };
    PciClient.prototype.createIframe = function (url, iframeClassname) {
        var className = iframeClassname || IFRAME_CLASSNAME;
        var el = document.createElement('iframe');
        el.setAttribute('src', url);
        el.setAttribute('height', '0');
        el.setAttribute('width', '100%');
        el.setAttribute('class', className);
        el.setAttribute('frameborder', '0');
        el.setAttribute('scrolling', 'no');
        return el;
    };
    PciClient.prototype.attachWindowResizeListener = function () {
        window.removeEventListener('resize', this.boundResizeListener);
        window.addEventListener('resize', this.boundResizeListener);
    };
    PciClient.prototype._resizeListener = function () {
        var _this = this;
        window.clearTimeout(this.resizeTimer);
        this.resizeTimer = window.setTimeout(function () {
            try {
                _this.messenger.sendRoute('getHeight');
            }
            catch (e) {
            }
        }, 200);
    };
    PciClient.prototype.handleMessage = function (msg) {
        var _this = this;
        switch (msg.route) {
            case 'ping':
                this.messenger.sendRoute('setDomain', window.location.origin);
                break;
            case 'load':
                this.attachWindowResizeListener();
                this.messenger.sendRoute('configure', {
                    css: this.opts.stylesheets,
                    translations: this.opts.translations,
                    icons: this.opts.icons,
                    postal: this.opts.postal,
                    genTime: this.opts.generationTime,
                    fieldValidationOnBlur: this.opts.fieldValidationOnBlur,
                    autoAdvance: this.opts.autoAdvance,
                    isRtl: this.opts.isRtl,
                });
                break;
            case 'display':
                this.messenger.sendRoute('getHeight');
                break;
            case 'resize':
                if (this.iframe) {
                    this.iframe.setAttribute('height', msg.data.height);
                    this.iframe.setAttribute('style', "min-height: " + msg.data.height + "px;");
                }
                this.trigger(EVENT_RESIZE, msg.data.height);
                if (!this.isLoaded) {
                    this.trigger(EVENT_LOAD);
                    this.isLoaded = true;
                }
                break;
            case 'showError':
                this.trigger(EVENT_ERROR_SHOW, msg.data.errorType, msg.data.msg);
                break;
            case 'hideError':
                this.trigger(EVENT_ERROR_HIDE, msg.data.errorType);
                break;
            case 'showTooltip':
                this.trigger(EVENT_TOOLTIP_SHOW, msg.data.key, msg.data.offset);
                break;
            case 'hideTooltip':
                this.trigger(EVENT_TOOLTIP_HIDE);
                break;
            case 'proceed':
                this.fingerprintPromise
                    .then(function (fingerprints) {
                    _this.trigger(EVENT_SUCCESS, msg.data.payload, msg.data.zipcode, fingerprints, msg.data.bin);
                })
                    .catch(function () {
                    _this.trigger(EVENT_SUCCESS, msg.data.payload, msg.data.zipcode, '', msg.data.bin);
                });
                break;
            case 'triggerSubmit':
                this.trigger(EVENT_TRIGGER_SUBMIT);
                break;
            case 'encryptionerror':
                throw new Error('PCI encryption error');
            default:
                throw new TypeError("Unknown message with route " + msg.route);
        }
    };
    return PciClient;
}());
export default PciClient;
