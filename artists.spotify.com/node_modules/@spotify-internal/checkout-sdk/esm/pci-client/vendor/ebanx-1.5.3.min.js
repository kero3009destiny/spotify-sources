"use strict";
!function (e, r) { "object" == typeof exports && "undefined" != typeof module ? module.exports = r() : "function" == typeof define && define.amd ? define(r) : (e = e || self).EBANX = r(); }(this, function () {
    "use strict";
    function e(r) { return (e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) { return typeof e; } : function (e) { return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e; })(r); }
    var r, t, o = { "BP-DR-101": "Â¡Lo sentimos!, vuelva a intentarlo con otra tarjeta.", "BP-DR-102": "Â¡Ups!, algo saliÃ³ mal, vuelve a intentarlo con otra tarjeta.", "BP-DR-76": "PaÃ­s nÃ£o informado.", "BP-DR-77": "PaÃ­s nÃ£o permitido.", "BP-DR-75": "El nÃºmero de la tarjeta es invalido. Confirma si no hay un error de escritura y vuelva a intentarlo.", "BP-DR-S-75": "El bandera de tarjeta de crÃ©dito es invÃ¡lido.", "BP-DR-51": "Â¡Ups!, faltÃ³ llenar este campo. LlÃ©nalo con el nombre que aparece en tu tarjeta.", "BP-DR-55": "El cÃ³digo de tarjeta de crÃ©dito es invÃ¡lido.", "BP-DR-57": "Por favor, escribe la fecha en el formato MM/AAAA.", "BP-DR-M-57": "El mes de tarjeta de crÃ©dito es invÃ¡lido.", "BP-DR-Y-57": "El aÃ±o de tarjeta de crÃ©dito es invÃ¡lido." }, i = { "BP-DR-101": "Ops! Esse cartÃ£o nÃ£o estÃ¡ liberado para fazer compras na internet. Entre em contato com o seu banco para mais informaÃ§Ãµes.", "BP-DR-102": "Ops, algo deu errado. Tente novamente com outro cartÃ£o.", "BP-DR-76": "PaÃ­s nÃ£o informado.", "BP-DR-77": "PaÃ­s nÃ£o permitido.", "BP-DR-75": "O nÃºmero do cartÃ£o informado Ã© invÃ¡lido. Confira se nÃ£o houve um erro de digitaÃ§Ã£o e tente de novo.", "BP-DR-S-75": "A bandeira do cartÃ£o de crÃ©dito Ã© invÃ¡lida.", "BP-DR-51": "Ei, faltou uma informaÃ§Ã£o aqui! Preencha com o nome que aparece em seu cartÃ£o.", "BP-DR-55": "O cÃ³digo do cartÃ£o de crÃ©dito Ã© invÃ¡lido.", "BP-DR-57": "A data do cartÃ£o de crÃ©dito deve estar no formato mes/ano, por exemplo, 12/2020.", "BP-DR-M-57": "O mÃªs data do cartÃ£o de crÃ©dito Ã© invÃ¡lido.", "BP-DR-Y-57": "O ano data do cartÃ£o de crÃ©dito Ã© invÃ¡lido." }, n = function () { var e = {}, r = { country: "", mode: "test", publicKey: "" }; if (e.config = { isLive: function () { return "production" === r.mode; }, setPublishableKey: function (e) { r.publicKey = String(e); }, setCountry: function (e) { n.validator.config.validateCountry(e), r.country = String(e); }, setMode: function (e) { n.validator.config.validateMode(e), r.mode = e; }, getMode: function () { return r.mode; }, getPublishableKey: function () { if ("" === r.publicKey.trim())
            throw new n.errors.InvalidConfigurationError("Missing publishable key. You need set publishable key using the method EBANX.config.setPublishableKey.", "publicKey"); return r.publicKey; }, getCountry: function () { return r.country || (r.country = "br"), r.country; }, getLocale: function () { return { br: "pt_BR", mx: "es", co: "es", ar: "es" }[n.config.getCountry()]; } }, e.config.isLive() && "https:" !== location.protocol)
        throw "EBANXInvalidConfigurationError: Your protocol needs to be https."; return e; }();
    return n.errors = { summary: { pt_BR: i, es: o }, InvalidValueFieldError: function (e, r) { this.message = n.errors.summary[n.config.getLocale()][e] || e, this.field = r, this.name = "InvalidValueFieldError"; }, InvalidConfigurationError: function (e, r) { this.message = n.errors.summary[n.config.getLocale()][e] || e, this.invalidConfiguration = r, this.name = "InvalidConfigurationError"; } }, n.validator = (r = { publicKey: {} }, { config: { validatePublishableKey: function (e, t) { var o = n.utils.api.resources.validPublicIntegrationKey(); r.publicKey[e] ? t(r.publicKey[e]) : n.http.ajax.request({ url: o.url, method: o.method, raw: !0, data: { public_integration_key: e } }).always(function (o) { r.publicKey[e] = o, t(o); }); }, validateCountry: function (e) { if (-1 === n.utils.availableCountries.indexOf(e))
                throw new n.errors.InvalidValueFieldError("BP-DR-77", "country"); }, validateMode: function (e) { if (null === e.match(/^(test|production)$/))
                throw new n.errors.InvalidConfigurationError('Invalid mode, please, use "test" or "production" as test mode.', "mode"); } }, card: { validateNumber: function (e) { if (!/^3[47][0-9]{13}$|^50[0-9]{14,17}$|^(636368|438935|504175|451416|636297|5067|4576|4011|50904|50905|50906)|^3(?:0[0-5]|[68][0-9])[0-9]{11}$|^6(?:011|5[0-9]{2})[0-9]{12}$|^(38|60)[0-9]{11,17}$|^5[1-5][0-9]{14}$|^4[0-9]{12}(?:[0-9]{3})?$/.test(e) || !this.luhnAlgCheck(String(e)))
                throw new n.errors.InvalidValueFieldError("BP-DR-75", "card_number"); }, validateName: function (e) { if ("string" != typeof e || 0 === e.length || null !== e.match(/[0-9]+/))
                throw new n.errors.InvalidValueFieldError("BP-DR-51", "card_name"); }, luhnAlgCheck: function (e) { var r, t, o, i; for (o = +e[r = e.length - 1], i = 0; r--;)
                t = +e[r], o += ++i % 2 ? 2 * t % 10 + (t > 4) : t; return o % 10 == 0; }, validateCvv: function (e) { var r = new RegExp("^[0-9]{3,4}$"); if (!String(e).match(r))
                throw new n.errors.InvalidValueFieldError("BP-DR-55", "card_cvv"); }, validateDueDate: function (e) { var r = (e + "").split("/"); if (r = { now: new Date, year: r[1], month: r[0] }, !0 !== /^\d+$/.test(r.month) || parseInt(r.month, 10) <= 12 != 1)
                throw new n.errors.InvalidValueFieldError("BP-DR-M-57", "card_due_date"); if (!/^\d+$/.test(r.year))
                throw new n.errors.InvalidValueFieldError("BP-DR-Y-57", "card_due_date"); if (r.expiration = new Date(r.year, r.month), r.expiration.setMonth(r.expiration.getMonth() - 1), r.expiration.setMonth(r.expiration.getMonth() + 1, 1), r.expiration > r.now != 1)
                throw new n.errors.InvalidValueFieldError("BP-DR-57", "card_due_date"); }, validate: function (e) { this.validateName(e.card_name), this.validateNumber(e.card_number), this.validateDueDate(e.card_due_date), this.validateCvv(e.card_cvv); } } }), n.tokenize = { card: { token: function (e, r, t) { var o = n.utils.api.resources.createToken(); n.http.ajax.request({ url: o.url, method: o.method, data: JSON.stringify({ public_integration_key: n.config.getPublishableKey(), payment_type_code: n.utils.creditCardScheme(e.card_number), country: n.config.getCountry(), card: e }) }).always(function (e) { return "ERROR" !== e.status && "token" in e ? r(e) : t(e); }); } } }, n.utils = ((t = { api: { path: function () { return n.config.isLive() ? "https://api.ebanxpay.com/" : "https://sandbox.ebanxpay.com/"; } }, availableCountries: ["br", "mx", "co", "ar"].join(", "), creditCardScheme: function (e) { n.validator.card.validateNumber(e); var r = { br: { aura: /^50[0-9]{14,17}$/, elo: /^(636368|438935|504175|451416|636297|5067|4576|4011|50904|50905|50906)/, diners: /^3(?:0[0-5]|[68][0-9])[0-9]{11}$/, discover: /^6(?:011|5[0-9]{2})[0-9]{12}$/, hipercard: /^(38|60)[0-9]{11,17}$/ }, mx: { carnet: /^5[6-9][0-9]{14}$/, mastercard__2: /^2[2-7][0-9]{14}$/ }, co: { diners: /^36[0-9]{12}$/ }, ar: { mastercard__all: /^[0-9]{16}$/ }, all: { amex: /^3[47][0-9]{13}$/, mastercard: /^5[1-5][0-9]{14}$/, visa: /^4[0-9]{12}(?:[0-9]{3})?$/ } }, t = {}; for (var o in r[n.config.getCountry()])
            t[o] = r[n.config.getCountry()][o]; for (var o in r.all)
            t[o] = r.all[o]; for (var i in t)
            if (t[i].test(e)) {
                var a = i, s = i.indexOf("__");
                return -1 !== s && (a = i.substr(0, s)), a;
            } throw new n.errors.InvalidValueFieldError("BP-DR-S-75", "card_number"); } }).api.url = function () { return t.api.path() + "ws"; }, t.api.resources = { createToken: function () { return { url: t.api.url() + "/token", method: "post" }; }, validPublicIntegrationKey: function () { return { url: t.api.url() + "/merchantIntegrationProperties/isValidPublicIntegrationKey", method: "get" }; }, fingerPrintResource: function () { return { url: t.api.path() + "fingerprint/", method: "get" }; }, fingerPrintProvidersResource: function () { return { url: t.api.path() + "fingerprint/provider", method: "get" }; } }, t), n.http = { normalize: { q: function (r, t) { var o = function r(t, o) { var i = []; return o = o || [], Object.keys(t).forEach(function (n) { if (t.hasOwnProperty(n)) {
                var a = o.slice();
                a.push(n);
                var s = [];
                "object" == e(t[n]) ? s = r(t[n], a) : s.push({ path: a, val: t[n] }), s.forEach(function (e) { return i.push(e); });
            } }), i; }(r), i = (o = o.map(function (e) { if (1 == e.path.length)
                e.path = e.path[0];
            else {
                var r = e.path[0], t = e.path.slice(1);
                e.path = r + "[" + t.join("][") + "]";
            } return e; })).map(function (e) { return e.path + "=" + e.val; }).join("&"); return t ? encodeURIComponent(i) : i; } }, ajax: { request: function (e) { return "string" == typeof e && (e = { url: e }), e.url = e.url || "", e.method = e.method || "get", e.data = e.data || {}, { host: {}, process: function (e) { var r = this; return this.xhr = null, window.ActiveXObject ? this.xhr = new window.ActiveXObject("Microsoft.XMLHTTP") : window.XMLHttpRequest && (this.xhr = new XMLHttpRequest), this.xhr && (this.xhr.onreadystatechange = function () { if (4 == r.xhr.readyState) {
                    var t = r.xhr.responseText || "{}";
                    void 0 === e.raw && "undefined" != typeof JSON && (t = JSON.parse(t)), r.alwaysCallback && r.alwaysCallback.apply(r.host, [t, r.xhr]);
                } }), "GET" == e.method.toUpperCase() && (e.url += "?" + n.http.normalize.q(e.data), delete e.data), this.xhr.open(e.method.toUpperCase(), e.url, !0), setTimeout(function () { r.xhr.send(e.data); }, 20), this; }, always: function (e) { return this.alwaysCallback = e, this; } }.process(e); } }, injectJS: function (e, r) { var t = document.createElement("script"); t.type = "text/javascript", t.async = !0, t.onload = r, t.src = e, document.getElementsByTagName("head")[0].appendChild(t); } }, n.card = { createToken: function (e, r) { var t = { data: {}, error: {} }, o = function (e) { t.data = e, n.deviceFingerprint.setup(function (e) { return t.data.deviceId = e, r(t); }); }, i = function (e) { return t.error.err = e, r(t); }, a = ""; try {
            a = n.config.getPublishableKey();
        }
        catch (e) {
            t.error.err = e, r(t);
        } n.validator.config.validatePublishableKey(a, function (a) { var s = JSON.parse(a); if (!s.success)
            return t.error.err = { status: "ERROR", status_code: "", status_message: s.body.error }, void r(t); try {
            n.validator.card.validate(e), n.tokenize.card.token(e, o, i);
        }
        catch (e) {
            t.error.err = e, r(t);
        } }); } }, n.deviceFingerprint = { ebanx_session_id: null, providerSessionList: [], providerPostPending: null, setup: function (e) { var r = this; this.getList(function (t) { t && t.ebanx_session_id && (n.deviceFingerprint.ebanx_session_id = t.ebanx_session_id, e(t.ebanx_session_id), t.providers.forEach(function (e) { r.getProviderSessionId(e); })); }); }, getList: function (e) { n.http.ajax.request({ url: n.utils.api.resources.fingerPrintResource().url, data: { publicIntegrationKey: n.config.getPublishableKey(), country: n.config.getCountry() } }).always(e); }, getProviderSessionId: function (e) { this.loadProvider(e, this.saveProviderSessionList); }, saveProviderSessionList: function (e) { var r = n.deviceFingerprint; r.providerPostPending && clearTimeout(r.providerPostPending), r.providerSessionList.push(e), r.providerPostPending = setTimeout(r.postProviderSessionList, 1e3); }, postProviderSessionList: function () { var e = n.deviceFingerprint, r = e.providerSessionList; e.providerSessionList = [], clearTimeout(e.providerPostPending), e.providerPostPending = null; var t = { publicIntegrationKey: n.config.getPublishableKey(), ebanx_session_id: e.ebanx_session_id, providers: r }, o = n.utils.api.resources.fingerPrintProvidersResource(); n.http.ajax.request({ url: o.url, method: o.method, data: t }); }, loadProvider: function (e, r) { n.http.injectJS(e.source, function () { n.deviceFingerprint[e.provider].setup(e.settings, function (t) { r({ provider: e.provider, session_id: t }); }); }); } }, n;
});
