var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { captureException } from '@sentry/browser';
import EBANX from './vendor/ebanx-1.5.3.min';
var _getEvent = function (eventType, options) {
    var event;
    if (typeof Event === 'function') {
        event = new Event(eventType, options);
    }
    else {
        event = document.createEvent('Event');
        event.initEvent(eventType, options.bubbles, options.cancelable);
    }
    return event;
};
export var createAdyenFingerprint = function (dfDo) { return __awaiter(void 0, void 0, void 0, function () {
    var targetElement;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                targetElement = document.createElement('input');
                dfDo(targetElement);
                window.document.dispatchEvent(_getEvent('DOMContentLoaded', {
                    bubbles: true,
                    cancelable: true,
                }));
                return [4, new Promise(function (resolve, reject) {
                        var interval = setInterval(function () {
                            if (targetElement.value !== '') {
                                clearInterval(interval);
                                resolve();
                            }
                        }, 50);
                        setTimeout(function () {
                            clearInterval(interval);
                            reject();
                        }, 1000);
                    })];
            case 1:
                _a.sent();
                return [2, targetElement.value];
        }
    });
}); };
export var createDigitalRiverFingerprint = function (fingerprintingConfig) { return __awaiter(void 0, void 0, void 0, function () {
    var fingerprint;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                fingerprint = '';
                window.EBANX = EBANX;
                EBANX.config.setPublishableKey(fingerprintingConfig.wl.publish_key);
                EBANX.config.setMode(fingerprintingConfig.wl.mode);
                return [4, new Promise(function (resolve) {
                        EBANX.deviceFingerprint.setup(function (deviceId) {
                            fingerprint = deviceId;
                            resolve(deviceId);
                        });
                    })];
            case 1:
                _a.sent();
                return [2, fingerprint];
        }
    });
}); };
var handleFingerprintsCollection = function (fingerprints) { return ({
    adyen: fingerprints[0] || '',
    digitalriver: fingerprints[1] || '',
}); };
var fingerprintOrEmpty = function (promise, index) { return __awaiter(void 0, void 0, void 0, function () {
    var e_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4, promise];
            case 1: return [2, _a.sent()];
            case 2:
                e_1 = _a.sent();
                captureException(e_1, {
                    extra: { message: 'Fingerprint not generated', index: index },
                });
                return [2, ''];
            case 3: return [2];
        }
    });
}); };
export var fingerprintsCollectionFactory = function (dfDo) {
    return function (fingerprintingConfig) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2, Promise.all([
                    createAdyenFingerprint(dfDo),
                    createDigitalRiverFingerprint(fingerprintingConfig),
                ].map(function (promise, index) { return fingerprintOrEmpty(promise, index); })).then(function (fingerprints) { return handleFingerprintsCollection(fingerprints); })];
        });
    }); };
};
