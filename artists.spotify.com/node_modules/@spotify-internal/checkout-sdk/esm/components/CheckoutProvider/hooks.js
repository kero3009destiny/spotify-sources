var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { isSoundbetter } from './environment';
import { getCheckoutData } from '../../api/migrationBackend';
import { retrieveStoredPaymentDetails } from '../../lib/storedPaymentMethod';
import { useContext, useEffect } from 'react';
import { ExamplePaymentMethodContext, } from '../Example/ExampleProvider';
import { isUsingExperimentationPlatform } from '../../lib/remoteConfiguration';
import { getIgnoreExperimentationPaymentMethods, getPaymentMethodExperimentKey, STORED_DETAILS_SDK_SERVICE_EXPERIMENT, } from '../../lib/rolloutConfiguration';
import shouldUseAddressCollectionSdk from '../../lib/shouldUseAddressCollectionSdk';
import { useSelector } from 'react-redux';
function getSdkServicePaymentMethodIds(resolver, paymentProviderIds, exampleConfiguration) {
    return __awaiter(this, void 0, void 0, function () {
        var billingPaymentProviderIds;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    billingPaymentProviderIds = paymentProviderIds.map(function (providerId) {
                        if (providerId.indexOf('billing_') === -1) {
                            return "billing_" + providerId;
                        }
                        return providerId;
                    });
                    if (!isUsingExperimentationPlatform()) return [3, 2];
                    return [4, resolver.activationPromise];
                case 1:
                    _a.sent();
                    return [2, billingPaymentProviderIds.filter(function (pm) {
                            if (getIgnoreExperimentationPaymentMethods(pm)) {
                                return true;
                            }
                            var experimentKey = getPaymentMethodExperimentKey(pm);
                            return experimentKey && resolver.getBool(experimentKey);
                        })];
                case 2:
                    if (exampleConfiguration.enabled) {
                        return [2, exampleConfiguration.paymentMethodIds];
                    }
                    if (isSoundbetter()) {
                        return [2, billingPaymentProviderIds.filter(function (pm) {
                                return [
                                    'billing_paypal',
                                    'billing_adyen_cards',
                                    'billing_braintree_cards',
                                ].includes(pm);
                            })];
                    }
                    return [2, billingPaymentProviderIds.filter(function (pm) {
                            return getPaymentMethodExperimentKey(pm);
                        })];
            }
        });
    });
}
function getIsSdkServiceStoredDetailsEnabled(resolver, exampleConfiguration) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!isUsingExperimentationPlatform()) return [3, 2];
                    return [4, resolver.activationPromise];
                case 1:
                    _a.sent();
                    try {
                        return [2, resolver.getBool(STORED_DETAILS_SDK_SERVICE_EXPERIMENT)];
                    }
                    catch (e) {
                        return [2, false];
                    }
                    _a.label = 2;
                case 2: return [2, exampleConfiguration.enabled || isSoundbetter()];
            }
        });
    });
}
export function useGetPaymentProviders(fetchParams, requestArgs, trackingMethods, resolver, reduxActions) {
    var _this = this;
    var shouldApplyResponse = true;
    var exampleConfiguration = useContext(ExamplePaymentMethodContext);
    var hasAddressCollectionSdk = useSelector(function (state) { return state.checkoutProps.hasAddressCollectionSdk; });
    var fetchData = function () { return __awaiter(_this, void 0, void 0, function () {
        var sdkServicePaymentMethodIds, isStoredDetailsEnabledOnSdkService, requestArgsWithSdkServiceProviders, _a, body, ok, _b, hasStoredPayment, hasStoredPaymentMethod, e_1;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    reduxActions.setIsLoading(true);
                    if (!isUsingExperimentationPlatform()) return [3, 2];
                    return [4, resolver.activationPromise];
                case 1:
                    _c.sent();
                    _c.label = 2;
                case 2:
                    requestArgs.hidePostal = shouldUseAddressCollectionSdk(requestArgs.country, resolver, hasAddressCollectionSdk);
                    return [4, getSdkServicePaymentMethodIds(resolver, requestArgs.paymentProviderIds, exampleConfiguration)];
                case 3:
                    sdkServicePaymentMethodIds = _c.sent();
                    return [4, getIsSdkServiceStoredDetailsEnabled(resolver, exampleConfiguration)];
                case 4:
                    isStoredDetailsEnabledOnSdkService = _c.sent();
                    _c.label = 5;
                case 5:
                    _c.trys.push([5, 7, , 8]);
                    requestArgsWithSdkServiceProviders = __assign(__assign({}, requestArgs), { sdkServiceProviderIds: sdkServicePaymentMethodIds });
                    return [4, getCheckoutData(fetchParams, requestArgsWithSdkServiceProviders, isStoredDetailsEnabledOnSdkService)];
                case 6:
                    _a = _c.sent(), body = _a.body, ok = _a.ok;
                    if (!ok || !body) {
                        throw new Error('Failed to load the checkout data');
                    }
                    else if (shouldApplyResponse) {
                        reduxActions.setDataResponse(body);
                        _b = __read(retrieveStoredPaymentDetails(body.providers), 2), hasStoredPayment = _b[0], hasStoredPaymentMethod = _b[1];
                        trackingMethods.trackCheckoutView(hasStoredPayment, hasStoredPaymentMethod);
                        trackingMethods.trackCheckoutClientConfig(fetchParams.clientConfig);
                    }
                    return [3, 8];
                case 7:
                    e_1 = _c.sent();
                    if (shouldApplyResponse) {
                        reduxActions.setIsFetchDataError();
                    }
                    return [3, 8];
                case 8: return [2];
            }
        });
    }); };
    useEffect(function () {
        fetchData();
        return function () {
            shouldApplyResponse = false;
        };
    }, [
        JSON.stringify(requestArgs.paymentProviderIds),
        requestArgs.country,
        requestArgs.isPayment,
        requestArgs.locale,
    ]);
}
