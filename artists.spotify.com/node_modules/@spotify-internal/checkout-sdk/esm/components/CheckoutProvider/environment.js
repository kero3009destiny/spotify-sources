var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var _a, _b, _c;
import { BackendType } from '../../api/backend';
export var Environment;
(function (Environment) {
    Environment["LOCAL"] = "local";
    Environment["SHARED"] = "shared";
    Environment["PRODUCTION"] = "production";
})(Environment || (Environment = {}));
var wwwBaseUrlMapping = (_a = {},
    _a[Environment.LOCAL] = 'https://www-local.spotify.net',
    _a[Environment.SHARED] = 'https://www-testing.spotify.net',
    _a[Environment.PRODUCTION] = 'https://www.spotify.com',
    _a);
var soundbetterBaseUrlMapping = (_b = {},
    _b[Environment.LOCAL] = 'https://local.soundbetter.com/p',
    _b[Environment.SHARED] = 'https://staging.soundbetter.com/p',
    _b[Environment.PRODUCTION] = 'https://soundbetter.com/p',
    _b);
export var isSoundbetter = function () {
    return window.location.hostname.indexOf('soundbetter.com') !== -1;
};
export var getBaseUrl = function (environment) {
    var mapping = isSoundbetter()
        ? soundbetterBaseUrlMapping
        : wwwBaseUrlMapping;
    return mapping[environment];
};
export var pciUrlMapping = (_c = {},
    _c[Environment.LOCAL] = 'https://pci-testing.spotify.com/static/form_no_selects.html',
    _c[Environment.SHARED] = 'https://pci-testing.spotify.com/static/form_no_selects.html',
    _c[Environment.PRODUCTION] = 'https://pci.spotify.com/static/form_no_selects.html',
    _c);
export var getFetchParams = function (premium, environment, clientData, clientConfig, version) {
    var additionalParameters = __assign(__assign({}, clientData), { version: version });
    return {
        baseUrl: getBaseUrl(environment || Environment.PRODUCTION),
        additionalParameters: additionalParameters,
        premium: premium,
        clientConfig: clientConfig,
        headers: {},
        backendType: BackendType.WEBSITE,
    };
};
