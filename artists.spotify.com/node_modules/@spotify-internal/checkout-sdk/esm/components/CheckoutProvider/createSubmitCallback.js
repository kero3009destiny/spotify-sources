var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { findActiveFormKeys } from '../ProviderForm/layoutHelpers';
import Pci from '../FormLayout/Pci/Pci';
import { postRequest, prepare } from '../../api/migrationBackend';
import { getPostalCodeFromAdditionalForm, submitAdditionalForms, } from '../../lib/additionalForms';
var FORM_DATA_TIMEOUT = 20000;
var providerHasOutstandingConsent = function (paymentProvider) {
    return paymentProvider.legalTerms.some(function (term) {
        return term.type === 'checkbox' && !term.consent;
    });
};
var getOutstandingConsentErrors = function (paymentProvider) {
    var errors = [];
    paymentProvider.legalTerms.forEach(function (term) {
        if (term.type === 'checkbox' && !term.consent)
            errors.push(term.error);
    });
    return errors;
};
var getCheckoutId = function (onSubmit, onSubmitData, isPremium, checkoutId) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!checkoutId) return [3, 1];
                return [2, checkoutId];
            case 1:
                if (!!isPremium) return [3, 3];
                return [4, onSubmit(onSubmitData)];
            case 2: return [2, _a.sent()];
            case 3: return [2, undefined];
        }
    });
}); };
var getDataPayloadFromPciForm = function (pciSection) { return __awaiter(void 0, void 0, void 0, function () {
    var pciData, payload;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, Pci.validate({
                    pciClient: pciSection,
                })];
            case 1:
                pciData = _a.sent();
                payload = {
                    'checkout[pci][token]': JSON.stringify(pciData.payload),
                    'checkout[pci][devicefps]': pciData.fingerprints,
                    'checkout[pci][bin]': pciData.bin,
                    'checkout[pci][browser-info]': pciData.browserInfo,
                };
                if (pciData.zipcode) {
                    payload['checkout[zip-code]'] = pciData.zipcode;
                }
                return [2, payload];
        }
    });
}); };
var getDataPayloadFromFormData = function (paymentProviderLayout, formData) { return __awaiter(void 0, void 0, void 0, function () {
    var requestData, activeFormKeys, _a, _b, _c, key, sectionData, e_1_1;
    var e_1, _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                requestData = {};
                activeFormKeys = findActiveFormKeys(paymentProviderLayout);
                _e.label = 1;
            case 1:
                _e.trys.push([1, 7, 8, 9]);
                _a = __values(Object.entries(formData)), _b = _a.next();
                _e.label = 2;
            case 2:
                if (!!_b.done) return [3, 6];
                _c = __read(_b.value, 2), key = _c[0], sectionData = _c[1];
                if (!(typeof sectionData !== 'string' && activeFormKeys.includes('pci'))) return [3, 4];
                return [4, getDataPayloadFromPciForm(sectionData.pciClient)];
            case 3:
                requestData = _e.sent();
                return [3, 5];
            case 4:
                if (activeFormKeys.includes(key)) {
                    requestData["" + key] = sectionData;
                }
                _e.label = 5;
            case 5:
                _b = _a.next();
                return [3, 2];
            case 6: return [3, 9];
            case 7:
                e_1_1 = _e.sent();
                e_1 = { error: e_1_1 };
                return [3, 9];
            case 8:
                try {
                    if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                }
                finally { if (e_1) throw e_1.error; }
                return [7];
            case 9: return [2, requestData];
        }
    });
}); };
var getPrepareProceedDataPayload = function (paymentProviderId, attemptId, flowId, checkoutViewId) {
    return {
        'checkout[payment-provider-id]': paymentProviderId,
        'checkout[stored-provider-id]': '',
        'checkout[checkout-view-id]': checkoutViewId,
        'checkout[attempt-id]': attemptId,
        'checkout[flow-id]': flowId,
    };
};
var getPremiumDataPayload = function (premiumData, country, isPayment) {
    if (premiumData) {
        var payload = {
            'checkout[country]': country,
            'checkout[return-url]': premiumData.returnUrl,
            'checkout[origin-url]': premiumData.originUrl,
            'checkout[offer-country-product-id]': premiumData.offerCountryProductId,
            'checkout[offer-uuid]': premiumData.offerUuid,
            'checkout[offer-key]': premiumData.offerKey,
            'checkout[product-description]': premiumData.productDescription,
            'checkout[is-change-details]': !isPayment,
        };
        if (premiumData.oneTimeCode) {
            payload['checkout[one-time-code]'] = premiumData.oneTimeCode;
        }
        return payload;
    }
    return {};
};
var getAdditionalDataPayload = function (formData) {
    var filteredData = {};
    Object.keys(formData).forEach(function (key) {
        if (key.indexOf('checkout[additional-data]') === 0 ||
            key.indexOf('checkout.additionalData') === 0) {
            filteredData[key] = formData[key];
        }
    });
    return filteredData;
};
var getCheckoutIdDataPayload = function (checkoutId) {
    if (checkoutId) {
        return {
            'checkout[checkout-id]': checkoutId,
        };
    }
    return {};
};
var getOnSubmitData = function (paymentProviderId, requestPayload) {
    var data = {
        paymentProviderId: paymentProviderId,
    };
    if (requestPayload['checkout[zip-code]']) {
        data.postalCode = requestPayload['checkout[zip-code]'];
    }
    return data;
};
var getRequest = function (paymentProvider, fetchParams, payload, locale) {
    if (paymentProvider.postUrl) {
        return postRequest(fetchParams.additionalParameters, paymentProvider.postUrl, paymentProvider.backendConfiguration, fetchParams.headers, payload);
    }
    return prepare(fetchParams, paymentProvider.backendConfiguration, payload, locale);
};
var getBinNumberFromPayload = function (payload) {
    return payload['checkout[pci][bin]'];
};
export var createSubmitCallback = function (fetchParams) { return function (paymentProvider, formData, checkoutReduxActions, checkoutViewId, checkoutProviderProps, handleRequest, trackingMethods, attemptId, flowId, skipPaymentAttemptTracking, trackValidatedFormSubmitted, additionalForms, useAddressCollectionSdk) {
    return function () { return __awaiter(void 0, void 0, void 0, function () {
        var errorShown, requestPayload, _a, postalCode, timeoutId, binNumber, e_2, checkoutId;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!paymentProvider)
                        return [2];
                    if (checkoutProviderProps.clearCustomErrors)
                        checkoutProviderProps.clearCustomErrors();
                    checkoutReduxActions.clearErrors();
                    if (providerHasOutstandingConsent(paymentProvider)) {
                        checkoutReduxActions.addErrors(getOutstandingConsentErrors(paymentProvider));
                        trackingMethods.trackCheckoutPaymentAttempt('');
                        return [2];
                    }
                    checkoutReduxActions.setIsLoading(true);
                    errorShown = false;
                    requestPayload = {};
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 3, , 4]);
                    return [4, submitAdditionalForms(additionalForms, useAddressCollectionSdk)];
                case 2:
                    _b.sent();
                    return [3, 4];
                case 3:
                    _a = _b.sent();
                    checkoutReduxActions.setIsLoading(false);
                    trackingMethods.trackCheckoutPaymentAttempt('');
                    return [2];
                case 4:
                    postalCode = getPostalCodeFromAdditionalForm(additionalForms);
                    timeoutId = setTimeout(function () {
                        checkoutReduxActions.showGlobalError();
                        errorShown = true;
                    }, FORM_DATA_TIMEOUT);
                    _b.label = 5;
                case 5:
                    _b.trys.push([5, 7, , 8]);
                    return [4, getDataPayloadFromFormData(paymentProvider.layout, formData)];
                case 6:
                    requestPayload = _b.sent();
                    if (postalCode) {
                        requestPayload['checkout.vendorData[zip_code]'] = postalCode;
                        requestPayload['checkout[zip-code]'] = postalCode;
                    }
                    clearTimeout(timeoutId);
                    binNumber = getBinNumberFromPayload(requestPayload) || '';
                    if (!skipPaymentAttemptTracking) {
                        trackingMethods.trackCheckoutPaymentAttempt(binNumber);
                    }
                    trackValidatedFormSubmitted();
                    return [3, 8];
                case 7:
                    e_2 = _b.sent();
                    clearTimeout(timeoutId);
                    checkoutReduxActions.setIsLoading(false);
                    trackingMethods.trackCheckoutPaymentAttempt('');
                    return [2];
                case 8:
                    if (errorShown) {
                        return [2];
                    }
                    return [4, getCheckoutId(checkoutProviderProps.onSubmit, getOnSubmitData(paymentProvider.id, requestPayload), !!checkoutProviderProps.premium, paymentProvider.checkoutId)];
                case 9:
                    checkoutId = _b.sent();
                    requestPayload = __assign(__assign(__assign(__assign(__assign({}, getPrepareProceedDataPayload(paymentProvider.id, attemptId, flowId, checkoutViewId)), getPremiumDataPayload(checkoutProviderProps.premium, checkoutProviderProps.country, checkoutProviderProps.isPayment)), getCheckoutIdDataPayload(checkoutId)), getAdditionalDataPayload(formData)), requestPayload);
                    return [4, handleRequest(getRequest(paymentProvider, fetchParams, requestPayload, checkoutProviderProps.locale))];
                case 10:
                    _b.sent();
                    return [2];
            }
        });
    }); };
}; };
