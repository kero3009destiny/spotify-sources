import { Trackers, trackEvent } from '../../lib/tracking/tracking';
import { checkoutFlowStartEvent, checkoutFormViewEvent, checkoutPaymentActionEvent, checkoutPaymentAttemptEvent, checkoutPaymentValidationErrorEvent, checkoutPaymentViewEvent, checkoutClientConfigEvent, checkoutViewEvent, paymentErrorMessageEvent, } from '../../lib/tracking/eventPayloadDefinitions';
import { Environment } from './environment';
import { hasStoredPaymentDetails } from '../../lib/storedPaymentMethod';
import tagHotjarError from '../../lib/tracking/tagHotjarError';
import { store } from '../../lib/store/store';
import uuid from 'uuid-random';
import PaymentProviderCollection from '../../lib/PaymentProviderCollection';
var checkoutViewId = null;
export var initializeCheckoutViewId = function (onTrackingIdChange) {
    if (checkoutViewId) {
        return;
    }
    checkoutViewId = uuid();
    if (onTrackingIdChange) {
        onTrackingIdChange(checkoutViewId);
    }
};
export var getCheckoutViewId = function () {
    if (!checkoutViewId) {
        throw new Error('checkoutViewId has not been initialized');
    }
    return checkoutViewId;
};
export var useTrackers = function (flowId, formId, attemptId, country, activeProviderId, providers, clientData, environment, premium) {
    var trackCheckoutView = function (hasStoredDetails, storedPaymentMethod) {
        if (storedPaymentMethod === void 0) { storedPaymentMethod = null; }
        trackEvent(checkoutViewEvent({
            checkoutViewId: getCheckoutViewId(),
            clientId: clientData ? clientData.clientName : '',
            clientContext: clientData ? clientData.clientContext : '',
            checkoutCountry: country,
            hasStoredDetails: hasStoredDetails,
            storedMethod: storedPaymentMethod,
        }), [Trackers.Gabito], clientData.clientName, environment);
    };
    var trackCheckoutClientConfig = function (clientConfig) {
        if (Object.values(clientConfig).length > 0) {
            trackEvent(checkoutClientConfigEvent({
                checkoutViewId: getCheckoutViewId(),
                clientConfig: clientConfig,
            }), [Trackers.Gabito], clientData.clientName, environment);
        }
    };
    var trackCheckoutPaymentValidationError = function () {
        tagHotjarError();
        trackEvent(checkoutPaymentValidationErrorEvent({
            checkoutViewId: getCheckoutViewId(),
            paymentMethod: activeProviderId,
            attemptId: attemptId,
            formId: formId,
            flowId: flowId,
        }), [Trackers.Gabito], clientData.clientName, environment);
    };
    var trackCheckoutPaymentAction = function () {
        if (premium) {
            trackEvent(checkoutPaymentActionEvent({
                market: country,
                paymentProvider: activeProviderId,
                productKey: premium.offerCountryProductId,
                view: premium.originUrl,
                offerUuid: getCheckoutViewId(),
                context: clientData ? clientData.clientContext : '',
            }), [Trackers.GoogleAnalytics], clientData.clientName, environment);
        }
    };
    var trackPaymentErrorMessage = function (message, code, type) {
        tagHotjarError();
        if (premium) {
            trackEvent(paymentErrorMessageEvent({ message: message, code: code, type: type }), [Trackers.GoogleAnalytics], clientData.clientName, environment);
        }
    };
    var trackCheckoutPaymentAttempt = function (bin) {
        var hasStoredDetails = hasStoredPaymentDetails(providers);
        trackEvent(checkoutPaymentAttemptEvent({
            checkoutViewId: getCheckoutViewId(),
            attemptId: attemptId,
            formId: formId,
            flowId: flowId,
            paymentMethod: activeProviderId,
            cardBin: bin,
            hasStoredDetails: hasStoredDetails,
        }), [Trackers.Gabito], clientData.clientName, environment);
    };
    var trackCheckoutFlowStart = function () {
        var hasStoredDetails = hasStoredPaymentDetails(providers);
        trackEvent(checkoutFlowStartEvent({
            checkoutViewId: getCheckoutViewId(),
            flowId: flowId,
            paymentMethod: activeProviderId,
            hasStoredDetails: hasStoredDetails,
        }), [Trackers.Gabito], clientData.clientName, environment);
    };
    var trackCheckoutFormView = function () {
        trackEvent(checkoutFormViewEvent({
            checkoutViewId: getCheckoutViewId(),
            flowId: flowId,
            formId: formId,
        }), [Trackers.Gabito], clientData.clientName, environment);
    };
    return {
        trackCheckoutView: trackCheckoutView,
        trackCheckoutClientConfig: trackCheckoutClientConfig,
        trackCheckoutPaymentValidationError: trackCheckoutPaymentValidationError,
        trackCheckoutPaymentAction: trackCheckoutPaymentAction,
        trackPaymentErrorMessage: trackPaymentErrorMessage,
        trackCheckoutPaymentAttempt: trackCheckoutPaymentAttempt,
        trackCheckoutFlowStart: trackCheckoutFlowStart,
        trackCheckoutFormView: trackCheckoutFormView,
    };
};
export var trackCheckoutPaymentView = function () {
    var state = store.getState();
    if (state.checkoutProps.premium) {
        var providerCollection = PaymentProviderCollection.fromJSON(state.providerCollection);
        trackEvent(checkoutPaymentViewEvent({
            sdkMarket: state.checkoutProps.country,
            paymentProvider: providerCollection.activeProviderId,
            productKey: state.checkoutProps.premium.offerCountryProductId,
            view: state.checkoutProps.premium.originUrl,
            offerUuid: getCheckoutViewId(),
            context: state.checkoutProps.clientContext,
        }), [Trackers.GoogleAnalytics], state.checkoutProps.clientName, state.checkoutProps.environment || Environment.PRODUCTION);
    }
};
