var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import React, { useEffect, useRef, useState } from 'react';
import styled from 'styled-components';
import SvgIcon from './Icon';
import { red, red5, white } from '../../constants/colors';
import { StoredErrorType } from './types';
import CountryMismatchError from './CountryMismatchError';
var Wrapper = styled.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  background: ", ";\n  text-align: left;\n  border-radius: 3px;\n  margin: 12px 0;\n  padding: 16px;\n  display: flex;\n  flex-direction: row;\n\n  svg {\n    margin-right: 9px;\n    margin-left: 0;\n\n    width: 19px;\n    height: 19px;\n    min-width: 19px;\n\n    circle:first-child {\n      fill: ", ";\n      stroke: ", ";\n    }\n\n    line {\n      stroke: ", ";\n    }\n\n    circle:last-child {\n      fill: ", ";\n      stroke: ", ";\n    }\n  }\n\n  p {\n    padding: 0;\n    margin: 0;\n    font-family: Circular, Helvetica, Arial, sans-serif;\n    font-size: 14px;\n    font-weight: 400;\n    color: #cd1a2b;\n    line-height: 1.5;\n\n    a {\n      color: ", " !important;\n    }\n  }\n"], ["\n  background: ", ";\n  text-align: left;\n  border-radius: 3px;\n  margin: 12px 0;\n  padding: 16px;\n  display: flex;\n  flex-direction: row;\n\n  svg {\n    margin-right: 9px;\n    margin-left: 0;\n\n    width: 19px;\n    height: 19px;\n    min-width: 19px;\n\n    circle:first-child {\n      fill: ", ";\n      stroke: ", ";\n    }\n\n    line {\n      stroke: ", ";\n    }\n\n    circle:last-child {\n      fill: ", ";\n      stroke: ", ";\n    }\n  }\n\n  p {\n    padding: 0;\n    margin: 0;\n    font-family: Circular, Helvetica, Arial, sans-serif;\n    font-size: 14px;\n    font-weight: 400;\n    color: #cd1a2b;\n    line-height: 1.5;\n\n    a {\n      color: ", " !important;\n    }\n  }\n"])), red5, red, red, white, white, white, red);
var storedErrorToError = function (storedError) {
    switch (storedError.type) {
        case StoredErrorType.HTML:
            return storedError.value;
        case StoredErrorType.COUNTRY_MISMATCH:
            return React.createElement(CountryMismatchError, { message: storedError.value });
        default:
            throw new Error('Unknown StoredError type');
    }
};
var getErrorsArray = function (customErrors, storedErrors, additionalFormErrors) {
    var externalErrors = customErrors
        ? customErrors.concat(additionalFormErrors)
        : additionalFormErrors;
    var checkoutErrors = storedErrors.map(storedErrorToError);
    return externalErrors.concat(checkoutErrors);
};
export default function ErrorContainer(_a) {
    var checkoutErrors = _a.checkoutErrors, customErrors = _a.customErrors, additionalFormErrors = _a.additionalFormErrors;
    var ref = useRef(null);
    var _b = __read(useState([]), 2), errors = _b[0], setErrors = _b[1];
    useEffect(function () {
        setErrors(getErrorsArray(customErrors, checkoutErrors, additionalFormErrors));
    }, [customErrors, checkoutErrors, additionalFormErrors]);
    useEffect(function () {
        var wrapper = ref.current;
        if (errors && errors.length > 0 && wrapper) {
            wrapper.scrollIntoView({
                behavior: 'smooth',
            });
        }
    }, [errors]);
    return (React.createElement(React.Fragment, null, errors && errors.length > 0 && (React.createElement(Wrapper, { ref: ref, "data-testid": "error-container" },
        React.createElement(SvgIcon, null),
        React.createElement("div", null, errors &&
            errors.map(function (error, id) {
                if (typeof error === 'string') {
                    return (React.createElement("p", { key: id, dangerouslySetInnerHTML: { __html: error } }));
                }
                return React.createElement(React.Fragment, { key: id }, error);
            }))))));
}
var templateObject_1;
