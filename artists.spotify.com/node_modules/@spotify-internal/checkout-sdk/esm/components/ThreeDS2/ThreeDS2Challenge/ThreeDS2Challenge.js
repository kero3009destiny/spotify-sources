var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import React, { useEffect, useState } from 'react';
import { createPortal } from 'react-dom';
import { base64Url, config, createForm, createIframe, } from '@spotify-internal/threeds2-js-utils';
import { CancelButton, ChallengeModal, Content, ContentWrapper, GlobalStyle, } from './components';
import ThreeDS2Interstitial from '../ThreeDS2Interstitial';
import { getBool } from '../../../lib/remoteConfiguration';
var interstitialTimeoutMs = 4000;
export var perform3DS2Challenge = function (domNode, challengeData) {
    var challengeWindowSize = config.validateChallengeWindowSize('05');
    var cReqData = {
        threeDSServerTransID: challengeData.serverTransId,
        acsTransID: challengeData.acsTransId,
        messageVersion: challengeData.messageVersion,
        messageType: 'CReq',
        challengeWindowSize: challengeWindowSize,
    };
    var stringifiedDataObject = JSON.stringify(cReqData);
    var base64URLencodedData = base64Url.encode(stringifiedDataObject);
    var IFRAME_NAME = 'threeDSChallengeIframe';
    var iframeSizesArr = config.getChallengeWindowSize(challengeWindowSize);
    createIframe(domNode, IFRAME_NAME, iframeSizesArr[0], iframeSizesArr[1]);
    var form = createForm('cReqForm', challengeData.acsUrl, IFRAME_NAME, 'creq', base64URLencodedData);
    domNode.appendChild(form);
    setTimeout(function () {
        domNode.removeChild(form);
    }, 1000);
    form.submit();
};
export function useScrollBlocker(isHidden) {
    useEffect(function () {
        if (!isHidden) {
            var scrollY_1 = window.scrollY;
            document.body.classList.add('threeds2-modal');
            document.body.style.top = "-" + scrollY_1 + "px";
            return function () {
                document.body.classList.remove('threeds2-modal');
                document.body.style.top = '';
                window.scrollTo(0, scrollY_1);
            };
        }
        return function () { };
    }, [isHidden]);
}
export function useHistoryModifier(isHidden, hide) {
    var _a = __read(useState(false), 2), hasExtraHistory = _a[0], setHasExtraHistory = _a[1];
    useEffect(function () {
        if (!isHidden) {
            var popstate_1 = function () {
                hide();
                setHasExtraHistory(false);
            };
            window.addEventListener('popstate', popstate_1);
            if (hasExtraHistory) {
                history.replaceState(null, '', window.location.href);
            }
            else {
                history.pushState(null, '', window.location.href);
                setHasExtraHistory(true);
            }
            return function () {
                window.removeEventListener('popstate', popstate_1);
            };
        }
        return function () { };
    }, [isHidden]);
}
export function useModalElement() {
    var _a = __read(useState(null), 2), el = _a[0], setEl = _a[1];
    useEffect(function () {
        var element = document.createElement('div');
        element.setAttribute('data-testid', 'modal-container');
        setEl(element);
        document.body.appendChild(element);
        return function () {
            document.body.removeChild(element);
            setEl(null);
        };
    }, []);
    return el;
}
export default function ThreeDS2Challenge(_a) {
    var challengeData = _a.challengeData, cancelLabel = _a.cancelLabel, forceInterstitial = _a.forceInterstitial;
    var _b = __read(useState(false), 2), isHidden = _b[0], setIsHidden = _b[1];
    var _c = __read(useState(false), 2), isLoaded = _c[0], setIsLoaded = _c[1];
    var _d = __read(useState(null), 2), ref = _d[0], setRef = _d[1];
    var el = useModalElement();
    useEffect(function () {
        setIsHidden(false);
    }, [challengeData]);
    useEffect(function () {
        if (ref) {
            perform3DS2Challenge(ref, challengeData);
        }
    }, [ref, challengeData]);
    useScrollBlocker(isHidden);
    useHistoryModifier(isHidden, function () { return setIsHidden(true); });
    var showInterstitial = forceInterstitial
        ? true
        : getBool('enable_sca_interstitial');
    var modalContent = !showInterstitial || isLoaded ? (React.createElement(React.Fragment, null,
        React.createElement(Content, { ref: function (_ref) { return setRef(_ref); } }),
        React.createElement(CancelButton, { onClick: function () { return setIsHidden(true); } }, cancelLabel))) : (React.createElement(Content, null,
        React.createElement(ThreeDS2Interstitial, { text: challengeData.interstitialText })));
    useEffect(function () {
        if (showInterstitial) {
            setTimeout(function () {
                setIsLoaded(true);
            }, interstitialTimeoutMs);
        }
    }, [challengeData, showInterstitial]);
    var children = (React.createElement(ChallengeModal, { hidden: isHidden },
        React.createElement(GlobalStyle, null),
        React.createElement(ContentWrapper, null, modalContent)));
    if (!el) {
        return null;
    }
    return createPortal(children, el);
}
