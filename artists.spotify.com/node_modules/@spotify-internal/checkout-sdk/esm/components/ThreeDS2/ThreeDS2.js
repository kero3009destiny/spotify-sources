import React, { useContext, useEffect } from 'react';
import CheckoutContext from '../CheckoutProvider';
import { DELIVERED, handleResponse } from '../../lib/responseHandler';
import ThreeDS2Fingerprint from './ThreeDS2Fingerprint';
import ThreeDS2Challenge from './ThreeDS2Challenge';
import { connect } from 'react-redux';
import { checkoutSliceActions, } from '../../lib/store/checkoutSlice';
import { bindActionCreators } from '@reduxjs/toolkit';
function ThreeDS2(props) {
    var checkout = useContext(CheckoutContext.Context);
    var handleIframeMessage = function (event) {
        var getReturnUrl = function () {
            if (checkout.premiumData && checkout.premiumData.returnUrl) {
                return checkout.premiumData.returnUrl.replace('{checkoutId}', event.data.checkoutId);
            }
            return event.data.responseAction.data.url;
        };
        var isFingerprintEventType = event.data && event.data.type === 'identifyShopper';
        var isChallengeEventType = event.data && event.data.type === 'challengeShopper';
        var shouldHandleEvent = event.origin === checkout.baseUrl &&
            (isFingerprintEventType || isChallengeEventType);
        if (shouldHandleEvent) {
            if (isFingerprintEventType) {
                props.checkoutReduxActions.set3ds2FingerprintData(null);
            }
            else if (isChallengeEventType) {
                props.checkoutReduxActions.set3ds2ChallengeData(null);
            }
            if (event.data.responseAction.action === DELIVERED) {
                event.data.responseAction.data.url = getReturnUrl();
            }
            handleResponse(event.data.responseAction, props.checkoutReduxActions, checkout.onSuccess);
        }
    };
    useEffect(function () {
        window.addEventListener('message', handleIframeMessage);
        return function () {
            window.removeEventListener('message', handleIframeMessage);
        };
    }, []);
    if (props.fingerprintData) {
        return (React.createElement(ThreeDS2Fingerprint, { fingerprintData: props.fingerprintData, setIsLoading: checkout.setIsLoading }));
    }
    if (props.challengeData) {
        return (React.createElement(ThreeDS2Challenge, { challengeData: props.challengeData, cancelLabel: checkout.redux.cancelLabel }));
    }
    return null;
}
var mapStateToProps = function (state) { return ({
    challengeData: state.threeDS2.challengeData,
    fingerprintData: state.threeDS2.fingerprintData,
}); };
var mapDispatchToProps = function (dispatch) { return ({
    checkoutReduxActions: bindActionCreators(checkoutSliceActions, dispatch),
}); };
export default connect(mapStateToProps, mapDispatchToProps)(ThreeDS2);
