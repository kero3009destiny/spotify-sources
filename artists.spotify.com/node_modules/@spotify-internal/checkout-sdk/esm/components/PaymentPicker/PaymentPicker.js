var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
import React, { useEffect, useRef } from 'react';
import { Type } from '../encoreOverrides';
import PaymentOption from '../PaymentOption';
import { trackCheckoutPaymentView } from '../CheckoutProvider/trackers';
import styled from 'styled-components';
import PaymentPickerList from './DropdownComponents/PaymentPickerList';
import PaymentPickerLink from './DropdownComponents/PaymentPickerLink';
import PaymentPickerListItem from './DropdownComponents/PaymentPickerListItem';
import { checkoutSliceActions, } from '../../lib/store/checkoutSlice';
import { connect } from 'react-redux';
import PaymentProviderCollection from '../../lib/PaymentProviderCollection';
import { bindActionCreators } from '@reduxjs/toolkit';
var PaymentPickerTitle = styled(Type.p)(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  padding-bottom: 13px;\n"], ["\n  padding-bottom: 13px;\n"])));
var SingleProviderWrapper = styled.div(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  margin-top: 13px;\n"], ["\n  margin-top: 13px;\n"])));
export function PaymentPicker(props) {
    var _a;
    var paymentPickerRef = useRef(null);
    var providerCollection = props.providerCollection, labelText = props.labelText, checkoutWidth = props.checkoutWidth, moreProviderLogosLabel = props.moreProviderLogosLabel, checkoutReduxActions = props.checkoutReduxActions;
    var scrollFormIntoView = function () {
        if (paymentPickerRef.current !== null) {
            paymentPickerRef.current.scrollIntoView({
                behavior: 'smooth',
            });
        }
    };
    var selectedProviderId = (_a = providerCollection.activeProvider) === null || _a === void 0 ? void 0 : _a.id;
    useEffect(function () {
        if (providerCollection.allProviders.length < 2 || !selectedProviderId) {
            return;
        }
        scrollFormIntoView();
    }, [selectedProviderId]);
    var paymentProviders = providerCollection.allProviders;
    if (paymentProviders.length === 0) {
        return null;
    }
    if (paymentProviders.length === 1) {
        var provider = paymentProviders[0];
        return (React.createElement(SingleProviderWrapper, null,
            React.createElement(PaymentOption, { key: provider.id, provider: provider, isActive: provider.id === selectedProviderId, subtitle: getPaymentOptionSubtitle(provider), checkoutWidth: checkoutWidth, showLogos: true, showText: true, moreProviderLogosLabel: moreProviderLogosLabel, hideRadio: true })));
    }
    return (React.createElement("div", null,
        React.createElement(PaymentPickerTitle, { id: "checkout-sdk-payment-picker-header", variant: Type.body2, weight: Type.bold }, labelText),
        React.createElement(PaymentPickerList, null, paymentProviders.map(function (provider) { return (React.createElement(PaymentPickerListItem, { key: provider.id },
            React.createElement(PaymentPickerLink, { href: "#", "data-value": provider.id, onClick: function (e) {
                    e.preventDefault();
                    checkoutReduxActions.setActiveProviderId(provider.id);
                    if (selectedProviderId === provider.id) {
                        trackCheckoutPaymentView();
                    }
                }, selected: selectedProviderId === provider.id },
                React.createElement(PaymentOption, { key: provider.id, provider: provider, isActive: provider.id === selectedProviderId, subtitle: getPaymentOptionSubtitle(provider), checkoutWidth: checkoutWidth, showLogos: true, showText: true, moreProviderLogosLabel: moreProviderLogosLabel })))); })),
        React.createElement("div", { ref: paymentPickerRef })));
}
export function getPaymentOptionSubtitle(provider) {
    if (!provider || provider.id !== 'billing_stored_details') {
        return undefined;
    }
    var options = provider.layout[0].options;
    var hasTitle = !!options.title;
    return "" + (options.title || '') + (hasTitle ? '  |  ' : '') + options.subtitle;
}
var mapStateToProps = function (state) { return ({
    paymentPickerLabel: state.strings.paymentPickerLabel,
    moreProviderLogosLabel: state.strings.moreProviderLogosLabel,
    providerCollection: PaymentProviderCollection.fromJSON(state.providerCollection),
}); };
var mapDispatchToProps = function (dispatch) { return ({
    checkoutReduxActions: bindActionCreators(checkoutSliceActions, dispatch),
}); };
export default connect(mapStateToProps, mapDispatchToProps)(PaymentPicker);
var templateObject_1, templateObject_2;
