var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React, { useContext } from 'react';
import { FormLayout, TooltipKeys, } from '../../types';
import RowComponent from '../FormLayout/Row';
import InputComponent from '../FormLayout/Input';
import DropdownComponent from '../FormLayout/Dropdown';
import TextComponent from '../FormLayout/Text';
import StoredPaymentDetailsComponent from '../FormLayout/StoredPaymentDetails';
import RadioContentComponent from '../FormLayout/RadioContent';
import CheckoutContext from '../CheckoutProvider';
import { formDataKeys } from '../FormLayout/StoredPaymentDetails/StoredPaymentDetails';
import styled from 'styled-components';
import { getLayoutComponent } from '../FormLayout/components';
import KlarnaWidget from '../FormLayout/KlarnaWidget';
import KlarnaPrepare from '../FormLayout/KlarnaWidget/KlarnaPrepare';
import { triggeredErrorOnFormValidationEvent } from '../../lib/tracking/exportableEventPayloadDefinitions';
export var Tooltip = styled.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  font-family: Circular, Helvetica, Arial, sans-serif;\n  display: block;\n  z-index: 1000;\n  position: absolute;\n  width: 50%;\n  max-width: 225px;\n  border: 1px solid #efefef;\n  padding: 1em;\n  text-align: left;\n  font-weight: 400;\n  color: #000;\n  ", ";\n  ", ";\n  ", ";\n  background: #fff;\n  transform: translateY(-100%) translateY(-40px);\n  border-radius: 4px;\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.25);\n  font-size: 14px;\n  line-height: 20px;\n"], ["\n  font-family: Circular, Helvetica, Arial, sans-serif;\n  display: block;\n  z-index: 1000;\n  position: absolute;\n  width: 50%;\n  max-width: 225px;\n  border: 1px solid #efefef;\n  padding: 1em;\n  text-align: left;\n  font-weight: 400;\n  color: #000;\n  ", ";\n  ",
    ";\n  ",
    ";\n  background: #fff;\n  transform: translateY(-100%) translateY(-40px);\n  border-radius: 4px;\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.25);\n  font-size: 14px;\n  line-height: 20px;\n"])), function (props) { return "top: " + props.top + "px;"; }, function (props) {
    return props.hasOwnProperty('left') &&
        "left: " + (props.left !== null ? props.left + "px" : 'inherit') + ";";
}, function (props) {
    return props.hasOwnProperty('right') &&
        "right: " + (props.right !== null ? props.right + "px" : 'inherit') + ";";
});
export var InputTooltip = styled(Tooltip)(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  position: absolute;\n  transform: unset;\n  right: ", ";\n  left: ", ";\n  bottom: 40px;\n  width: 100%;\n  min-width: 200px;\n"], ["\n  position: absolute;\n  transform: unset;\n  right: ", ";\n  left: ", ";\n  bottom: 40px;\n  width: 100%;\n  min-width: 200px;\n"])), function (props) { return (props.isRtl ? 'unset' : '0'); }, function (props) { return (props.isRtl ? '0' : 'unset'); });
export var getFormComponent = function (item, keyPrefix, key, formData, setFormData, breakRowsAtSmallerWidth) {
    if (formData === void 0) { formData = {}; }
    if (breakRowsAtSmallerWidth === void 0) { breakRowsAtSmallerWidth = false; }
    var extraChild = null;
    switch (item.type) {
        case FormLayout.Pci:
            break;
        case FormLayout.Row:
            if (item.options.hidden)
                break;
            extraChild = (React.createElement(RowComponent, { label: item.options.label, breakAtSmallerWidth: breakRowsAtSmallerWidth }, item.options.content &&
                item.options.content.map(function (childItem, childKey) {
                    return getFormComponent(childItem, key + "-", childKey, formData, setFormData, breakRowsAtSmallerWidth);
                })));
            break;
        case FormLayout.Input:
            if (item.options.hidden)
                break;
            extraChild = (React.createElement(InputComponent, { options: item.options, onChange: function (value) { return setFormData(item.options.name, value); }, value: formData[item.options.name] || '' }));
            break;
        case FormLayout.Dropdown:
            if (item.options.hidden)
                break;
            extraChild = (React.createElement(DropdownComponent, { options: item.options, onChange: function (value) { return setFormData(item.options.name, value); }, value: formData[item.options.name] || '' }));
            break;
        case FormLayout.Text:
            if (item.options.hidden)
                break;
            extraChild = React.createElement(TextComponent, { options: item.options });
            break;
        case FormLayout.StoredPaymentDetails:
            extraChild = (React.createElement(StoredPaymentDetailsComponent, __assign({ setFormData: setFormData }, item.options)));
            break;
        case FormLayout.RadioContent:
            if (item.options.hidden)
                break;
            extraChild = (React.createElement(RadioContentComponent, __assign({}, item.options, { breakRowsAtSmallerWidth: breakRowsAtSmallerWidth, formData: formData, setFormData: setFormData })));
            break;
        case FormLayout.KlarnaWidget:
            if (item.options.hidden)
                break;
            extraChild = React.createElement(KlarnaWidget, { options: item.options });
            break;
        case FormLayout.KlarnaPrepare:
            if (item.options.hidden)
                break;
            extraChild = React.createElement(KlarnaPrepare, null);
            break;
        case FormLayout.None:
            if (item.options.hidden)
                break;
            extraChild = null;
            break;
        default:
            extraChild = (React.createElement(React.Fragment, null,
                "Don't know how to render the",
                ' ',
                React.createElement("strong", null, item.type),
                " form type.",
                React.createElement("div", null, JSON.stringify(item))));
            break;
    }
    return (React.createElement(React.Fragment, { key: keyPrefix + ":" + key }, extraChild));
};
export var computeTooltipPosition = function (offset, messageKey, pciRef) {
    var left = offset.x + offset.w + pciRef.offsetLeft;
    var top = offset.y - offset.h + pciRef.offsetTop;
    switch (messageKey) {
        case TooltipKeys.CvcInfo:
            return {
                right: 0,
                top: offset.y - offset.h,
            };
        case TooltipKeys.SecurityExplained:
            return {
                right: 0,
                top: top,
            };
        default:
            return {
                left: left,
                top: top,
            };
    }
};
export var InputFormGroup = getLayoutComponent('floating-label-form-group');
export var SelectFormGroup = getLayoutComponent('static-label-form-group');
export var findActiveFormKeys = function (layout) {
    var activeFieldNames = layout
        .map(function (component) {
        if (component.type === FormLayout.Row) {
            return findActiveFormKeys(component.options.content);
        }
        else if (component.type === FormLayout.StoredPaymentDetails) {
            return Object.values(formDataKeys);
        }
        else if (component.options.hasOwnProperty('name')) {
            return component.options.name;
        }
        return null;
    })
        .reduce(function (acc, val) { return acc.concat(val); }, [])
        .filter(function (x) { return x !== null; });
    if (layout.some(function (component) { return component.type === FormLayout.Pci; })) {
        activeFieldNames.push('pci');
    }
    return activeFieldNames;
};
export var useTrackIndividualErrorEvent = function () {
    var checkout = useContext(CheckoutContext.Context);
    return function (field) {
        checkout.dispatchExportableEvent(triggeredErrorOnFormValidationEvent({
            paymentProviderId: checkout.redux.providerCollection.activeProviderId,
            field: field,
        }));
    };
};
var templateObject_1, templateObject_2;
