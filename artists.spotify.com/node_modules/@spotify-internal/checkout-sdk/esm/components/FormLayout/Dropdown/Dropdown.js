var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
import React, { useEffect } from 'react';
import { SelectFormGroup } from '../../ProviderForm/layoutHelpers';
import { Type } from '../../encoreOverrides';
import styled from 'styled-components';
var DropdownLabel = styled(Type.p).attrs({
    variant: Type.body2,
    weight: Type.bold,
})(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  padding-bottom: 13px;\n"], ["\n  padding-bottom: 13px;\n"])));
export default function Dropdown(_a) {
    var options = _a.options, value = _a.value, onChange = _a.onChange;
    useEffect(function () {
        if (options.initialValue) {
            onChange(options.initialValue);
        }
        else if (options.choices.length > 0) {
            onChange(options.choices[0].id);
        }
    }, []);
    var label = options.label && (React.createElement(DropdownLabel, { as: "label", htmlFor: options.name }, options.label));
    return (React.createElement(SelectFormGroup, { size: options.size },
        label,
        React.createElement("select", { id: options.name, value: value, onChange: function (event) {
                onChange(event.target.value);
            }, name: options.name, required: true }, options.choices.map(function (choice) { return (React.createElement("option", { value: choice.id, key: choice.id + choice.label }, choice.label)); }))));
}
var templateObject_1;
