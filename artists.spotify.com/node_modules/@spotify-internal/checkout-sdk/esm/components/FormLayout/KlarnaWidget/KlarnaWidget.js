var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import React, { useContext, useEffect } from 'react';
import { loadScript } from '../../../lib/loadScript';
import CheckoutContext from '../../CheckoutProvider';
import { checkoutSliceActions, } from '../../../lib/store/checkoutSlice';
import { bindActionCreators } from '@reduxjs/toolkit';
import { connect } from 'react-redux';
var KLARNA_WIDGET_CONTAINER = '#klarna-payments-container';
var PAYMENT_METHOD_CATEGORY = 'pay_later';
export function KlarnaWidget(props) {
    var checkout = useContext(CheckoutContext.Context);
    useEffect(function () {
        function load() {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(!window.Klarna || !window.Klarna.Payments)) return [3, 2];
                            return [4, loadScript('https://x.klarnacdn.net/kp/lib/v1/api.js')];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            window.Klarna.Payments.init({
                                client_token: props.options.clientToken,
                            });
                            window.Klarna.Payments.load({
                                container: KLARNA_WIDGET_CONTAINER,
                                payment_method_category: PAYMENT_METHOD_CATEGORY,
                            }, function (response) {
                                if (!response.show_form) {
                                    props.checkoutReduxActions.showGlobalError();
                                    return;
                                }
                                window.Klarna.Payments.authorize({
                                    payment_method_category: PAYMENT_METHOD_CATEGORY,
                                }, {
                                    purchase_currency: 'EUR',
                                }, function (authResponse) {
                                    var _a;
                                    if (authResponse.approved && authResponse.authorization_token) {
                                        checkout.setFormData('authorizationToken', authResponse.authorization_token);
                                        checkout.submit(true, true);
                                        return;
                                    }
                                    checkout.redux.providerCollection.setInitalFormForActiveProvider();
                                    var legalTermsCount = ((_a = checkout.redux.providerCollection.activeProvider) === null || _a === void 0 ? void 0 : _a.legalTerms.length) || 0;
                                    for (var i = 0; i < legalTermsCount; i++) {
                                        checkout.redux.providerCollection.toggleLegalTermCheckboxOnActiveProvider(i);
                                    }
                                    props.checkoutReduxActions.showGlobalError();
                                });
                            });
                            return [2];
                    }
                });
            });
        }
        load();
    }, []);
    return React.createElement("div", { id: "klarna-payments-container" });
}
var mapDispatchToProps = function (dispatch) { return ({
    checkoutReduxActions: bindActionCreators(checkoutSliceActions, dispatch),
}); };
export default connect(undefined, mapDispatchToProps)(KlarnaWidget);
