var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import React from 'react';
import styled from 'styled-components';
import { getBrowserInfo } from '@spotify-internal/threeds2-js-utils';
import FetchDataError from '../../Error/FetchDataError';
var errorCallback = null;
var PciContainer = styled.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  display: ", ";\n  position: relative;\n  min-height: 130px;\n  pointer-events: ", "\n    .pci-iframe {\n    // iOS doesn't handle iframes with `width: 100%` very well\n    // The hack below was found in a discussion about iframes here:\n    // https://github.com/ampproject/amphtml/issues/11133\n    max-height: 100%;\n    max-width: 100%;\n    min-height: 100%;\n    min-width: 100%;\n    width: 0;\n\n    transition: opacity 0.7s ease-out;\n    // While loading, opacity is set to 0\n    opacity: ", ";\n  }\n"], ["\n  display: ", ";\n  position: relative;\n  min-height: 130px;\n  pointer-events: ",
    "\n    .pci-iframe {\n    // iOS doesn't handle iframes with \\`width: 100%\\` very well\n    // The hack below was found in a discussion about iframes here:\n    // https://github.com/ampproject/amphtml/issues/11133\n    max-height: 100%;\n    max-width: 100%;\n    min-height: 100%;\n    min-width: 100%;\n    width: 0;\n\n    transition: opacity 0.7s ease-out;\n    // While loading, opacity is set to 0\n    opacity: ", ";\n  }\n"])), function (props) { return (props.isHidden ? 'none' : 'block'); }, function (props) {
    return props.isLoading || props.isHidden ? 'none' : 'auto';
}, function (props) { return (props.isLoading ? 0 : 1); });
var PciLoader = styled.div(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  opacity: 1;\n  display: block;\n  position: absolute;\n  top: 50%;\n  margin-top: -1em;\n  left: 0;\n  right: 0;\n  text-align: center;\n"], ["\n  opacity: 1;\n  display: block;\n  position: absolute;\n  top: 50%;\n  margin-top: -1em;\n  left: 0;\n  right: 0;\n  text-align: center;\n"])));
function Component(props) {
    return (React.createElement(PciContainer, { "data-testid": "pci-container", isHidden: props.isHidden, ref: props.nameRef, isLoading: props.isIframeLoading },
        props.isIframeLoading && React.createElement(PciLoader, { "data-testid": "pci-loader" }),
        props.pciLoadingFailed && React.createElement(FetchDataError, null)));
}
function validate(data) {
    return __awaiter(this, void 0, void 0, function () {
        var client, pciData;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    client = data.pciClient;
                    return [4, promisifyPci(client)];
                case 1:
                    pciData = _a.sent();
                    return [2, __assign(__assign({}, pciData), { browserInfo: JSON.stringify(getBrowserInfo()) })];
            }
        });
    });
}
function promisifyPci(client) {
    return new Promise(function (resolve, reject) {
        client.off('success');
        client.on('success', function (payload, zipcode, fingerprints, bin) {
            var fingerprintsData = JSON.stringify(fingerprints);
            resolve({ payload: payload, zipcode: zipcode, fingerprints: fingerprintsData, bin: bin });
        });
        if (errorCallback) {
            client.off('error:show', errorCallback);
        }
        errorCallback = reject;
        client.on('error:show', reject);
        client.submit();
    });
}
export default {
    Component: Component,
    validate: validate,
};
var templateObject_1, templateObject_2;
