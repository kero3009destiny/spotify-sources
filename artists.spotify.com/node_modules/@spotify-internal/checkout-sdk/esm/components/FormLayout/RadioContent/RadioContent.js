var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import React, { useState } from 'react';
import { getFormComponent } from '../../ProviderForm/layoutHelpers';
import { FormRadio } from '@spotify-internal/encore-web';
import { FormLayout } from '../../../types';
var getInputsToBeReset = function (content) {
    var getInputs = function (items) {
        if (!items || !items.length) {
            return [];
        }
        var result = items.filter(function (i) { return i.type === FormLayout.Input; }) || [];
        items.map(function (i) {
            if (i.type === FormLayout.Row) {
                result = result.concat(getInputs(i.options.content));
            }
        });
        return result;
    };
    return getInputs(content);
};
export default function RadioContentComponent(props) {
    var _a = __read(useState(props.defaultValue || 0), 2), selectedOption = _a[0], setSelectedOption = _a[1];
    var changeOption = function (value) {
        var inputFields = getInputsToBeReset(props.items[selectedOption].content);
        inputFields.map(function (i) {
            var _a;
            props.setFormData(i.options.name, (_a = i.options.initialValue) !== null && _a !== void 0 ? _a : '');
        });
        setSelectedOption(value);
    };
    var getSelectedOptionContent = function () {
        var content = props.items[selectedOption].content;
        return content.map(function (formLayout, key) {
            return getFormComponent(formLayout, selectedOption + "-", key, props.formData, props.setFormData, props.breakRowsAtSmallerWidth);
        });
    };
    return (React.createElement(React.Fragment, null,
        props.items.map(function (item, key) { return (React.createElement(FormRadio, { id: props.name + "-" + key, key: item.label, name: props.name, value: key, onChange: function (e) { return changeOption(e.target.value); }, defaultChecked: key === selectedOption }, item.label)); }),
        React.createElement("div", null, getSelectedOptionContent())));
}
