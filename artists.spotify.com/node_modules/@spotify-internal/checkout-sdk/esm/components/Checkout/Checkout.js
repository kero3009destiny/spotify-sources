var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React from 'react';
import { RemoteConfigProvider } from '@spotify-internal/remote-config-resolver-react';
import CheckoutContext from '../CheckoutProvider';
import { Environment } from '../CheckoutProvider/environment';
import { ErrorBoundary } from './ErrorBoundary';
import { useCheckoutWidth, useResolver, useSentry, useVerifyResetableProps, } from './hooks';
import { Provider } from 'react-redux';
import { store } from '../../lib/store/store';
import { initializeCheckoutViewId } from '../CheckoutProvider/trackers';
import CheckoutContent from './CheckoutContent';
import { CheckoutGlobalStyle } from './components';
import StoreCheckoutProps from './StoreCheckoutProps';
var defaultClientConfig = {};
export default function Checkout(props) {
    var _a;
    initializeCheckoutViewId(props.onTrackingIdChange);
    var isProduction = ![Environment.SHARED, Environment.LOCAL].includes((_a = props.environment) !== null && _a !== void 0 ? _a : Environment.PRODUCTION);
    useSentry(isProduction, props.clientContext, props.clientName);
    var _b = useCheckoutWidth(), checkoutWrapperRef = _b.checkoutWrapperRef, checkoutWidth = _b.checkoutWidth;
    var _c = useResolver(props.clientName, props.clientContext), resolver = _c.resolver, transport = _c.transport;
    useVerifyResetableProps(props);
    return (React.createElement(ErrorBoundary, null,
        React.createElement(CheckoutGlobalStyle, null),
        React.createElement(Provider, { store: store },
            React.createElement(StoreCheckoutProps, { props: props }),
            React.createElement(RemoteConfigProvider, { resolver: resolver },
                React.createElement(CheckoutContext.Provider, { remoteConfigResolver: resolver, onSubmit: props.onSubmit, offerLegalTerms: props.offerLegalTerms, paymentProviderIds: props.paymentProviderIds, country: props.country, locale: props.locale, isPayment: props.isPayment, customErrors: props.customErrors, clearCustomErrors: props.onClearErrors, onTrackingIdChange: props.onTrackingIdChange, onTrackingEventDispatch: props.onTrackingEventDispatch, environment: props.environment, showStoredPaymentDetails: props.showStoredPaymentDetails, clientId: props.clientId, clientData: {
                        clientContext: props.clientContext,
                        clientName: props.clientName,
                    }, clientConfig: props.clientConfig || defaultClientConfig, premium: props.premium, checkoutProps: props, checkoutWidth: checkoutWidth },
                    React.createElement(CheckoutContent, __assign({}, props, { resolver: resolver, transport: transport, checkoutWrapperRef: checkoutWrapperRef })))))));
}
