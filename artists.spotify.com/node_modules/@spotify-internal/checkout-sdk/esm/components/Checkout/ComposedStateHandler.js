import React from 'react';
import FetchDataError from '../Error/FetchDataError';
import LoadingIndicator from '../LoadingIndicator';
import RedirectOverlay from '../RedirectOverlay';
import { connect } from 'react-redux';
import PaymentProviderCollection from '../../lib/PaymentProviderCollection';
var mapStateToProps = function (state) { return ({
    isRtl: state.isRtl,
    redirectMessage: state.strings.redirectMessage,
    activePaymentProvider: PaymentProviderCollection.fromJSON(state.providerCollection).activeProvider,
    isFetchDataError: state.isFetchDataError,
    isRedirectOverlayShowing: state.isRedirectOverlayShowing,
    isWaitOverlayShowing: state.isWaitOverlayShowing,
}); };
var connector = connect(mapStateToProps);
export function ComposedStateHandler(_a) {
    var checkout = _a.checkout, isRtl = _a.isRtl, redirectMessage = _a.redirectMessage, activePaymentProvider = _a.activePaymentProvider, isFetchDataError = _a.isFetchDataError, isRedirectOverlayShowing = _a.isRedirectOverlayShowing, isWaitOverlayShowing = _a.isWaitOverlayShowing;
    var isLoading = checkout.isLoading;
    if (isFetchDataError) {
        return React.createElement(FetchDataError, null);
    }
    if (isRedirectOverlayShowing) {
        return React.createElement(RedirectOverlay, { redirectMessage: redirectMessage, isRtl: isRtl });
    }
    if (isLoading) {
        return (React.createElement(LoadingIndicator, { fullSize: isWaitOverlayShowing, text: isWaitOverlayShowing && activePaymentProvider
                ? activePaymentProvider.loadingText
                : undefined }));
    }
    return null;
}
export default connector(ComposedStateHandler);
