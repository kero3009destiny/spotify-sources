var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import React, { Component } from 'react';
import * as Sentry from '@sentry/browser';
import FetchDataError from '../Error/FetchDataError';
import { ServerError } from '../../lib/ServerError';
var ErrorBoundary = (function (_super) {
    __extends(ErrorBoundary, _super);
    function ErrorBoundary(props) {
        var _this = _super.call(this, props) || this;
        _this.state = { hasError: false };
        return _this;
    }
    ErrorBoundary.getDerivedStateFromError = function () {
        return { hasError: true };
    };
    ErrorBoundary.prototype.componentDidCatch = function (error, errorInfo) {
        Sentry.withScope(function (scope) {
            if (error instanceof ServerError) {
                scope.setExtra('sp-trace-id', error === null || error === void 0 ? void 0 : error.traceId);
                scope.setExtra('status-code', error === null || error === void 0 ? void 0 : error.status);
            }
            scope.setExtras(errorInfo);
            Sentry.captureException(error);
        });
    };
    ErrorBoundary.prototype.render = function () {
        if (this.state.hasError) {
            return React.createElement(FetchDataError, null);
        }
        return this.props.children;
    };
    return ErrorBoundary;
}(Component));
export { ErrorBoundary };
