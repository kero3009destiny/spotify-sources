var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { useEffect, useRef, useState } from 'react';
import * as Sentry from '@sentry/browser';
import version from '../../constants/version';
import { getBool, getTransport, RC_RESOLVE_TIMEOUT, } from '../../lib/remoteConfiguration';
import createResolver from '../../lib/createRemoteConfigResolver';
import { Event } from 'spotify-transport/types';
import { FormLayout } from '../../types';
import { store } from '../../lib/store/store';
export var useSentry = function (isProduction, clientName, clientContext) {
    useEffect(function () {
        if (isProduction) {
            Sentry.init({
                dsn: 'https://01c6a35fbc2046ff8dd497f8ee788337@sentry.io/1879691',
                release: version,
                integrations: function (integrations) {
                    return integrations.filter(function (i) { return i.name !== 'GlobalHandlers'; });
                },
            });
        }
    }, []);
    useEffect(function () {
        Sentry.configureScope(function configureScope(scope) {
            scope.setExtra('clientName', clientName);
            scope.setExtra('clientContext', clientContext);
        });
    }, [clientContext, clientName]);
};
export var useVerifyResetableProps = function (props) {
    var resetableProps = { locale: props.locale, country: props.country };
    var _a = __read(useState(resetableProps), 2), initialResetableProps = _a[0], setInitialResetableProps = _a[1];
    useEffect(function () {
        if (initialResetableProps !== resetableProps) {
            store.dispatch({ type: 'RESET_STATE' });
            setInitialResetableProps(resetableProps);
        }
    }, [props.country, props.locale]);
};
export var useResolver = function (clientName, clientContext) {
    var _a = __read(useState(getTransport(clientName, clientContext)), 1), transport = _a[0];
    var resolverOptions = {
        transport: transport,
        timeout: RC_RESOLVE_TIMEOUT,
        storage: null,
    };
    if (clientName === 'local') {
        resolverOptions.installationId = 'local_installation_id';
    }
    var _b = __read(useState(createResolver(resolverOptions)), 1), resolver = _b[0];
    useEffect(function () {
        transport.once(Event.TRANSPORT_AUTHENTICATED, function () {
            resolver.resolve({});
        });
    }, []);
    return { resolver: resolver, transport: transport };
};
var isPci = function (provider) {
    return (provider.layout &&
        provider.layout.some(function (i) { return i.type === FormLayout.Pci; }));
};
export var useShouldShowCtaModuleText = function (provider, clientName, clientContext) {
    if (!provider) {
        return false;
    }
    var isScaCtaMessageExperimentActive = getBool('enable_sca_cta_module_text', clientName, clientContext);
    if (isPci(provider)) {
        return !!(provider.ctaModuleText && isScaCtaMessageExperimentActive);
    }
    return !!provider.ctaModuleText;
};
export var shouldShowCtaModuleIcons = function (provider) {
    if (!provider || isPci(provider)) {
        return false;
    }
    return !!provider.ctaModuleText;
};
export var useCheckoutWidth = function () {
    var checkoutWrapperRef = useRef(null);
    var _a = __read(useState(undefined), 2), checkoutWidth = _a[0], setCheckoutWidth = _a[1];
    useEffect(function () {
        function handleResize() {
            if (checkoutWrapperRef.current !== null) {
                setCheckoutWidth(checkoutWrapperRef.current.offsetWidth);
            }
        }
        handleResize();
        window.addEventListener('resize', handleResize);
        return function () { return window.removeEventListener('resize', handleResize); };
    }, [checkoutWrapperRef]);
    return { checkoutWrapperRef: checkoutWrapperRef, checkoutWidth: checkoutWidth };
};
