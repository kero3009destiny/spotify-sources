import { useAppSelector } from '../../lib/store/hooks';
import PaymentPicker from '../PaymentPicker';
import StyleSheetManagerWrapper from './StyleSheetManagerWrapper';
import ComposedStateHandler from './ComposedStateHandler';
import RemoteConfigWrapper from './RemoteConfigWrapper';
import { getAboveForms, getAdditionalFormErrors, getBelowForms, } from '../../lib/additionalForms';
import ErrorContainer from '../Error/ErrorContainer';
import { FlowStep } from '../../types';
import { userClickedSubmitEvent } from '../../lib/tracking/exportableEventPayloadDefinitions';
import PaymentProviderCollection from '../../lib/PaymentProviderCollection';
import { store } from '../../lib/store/store';
import ProviderPanel from '../ProviderPanel';
import CtaModule from '../CtaModule';
import ChangePaymentMethodButton from '../ChangePaymentMethodButton/ChangePaymentMethodButton';
import CheckoutContext from '../CheckoutProvider/CheckoutProvider';
import React from 'react';
import { CheckoutWrapper } from './components';
import shouldUseAddressCollectionSdk from '../../lib/shouldUseAddressCollectionSdk';
import { useSelector } from 'react-redux';
export default function CheckoutContent(props) {
    var _a;
    var flowStep = useAppSelector(function (state) { return state.flowStep; });
    var additionalForms = (_a = props.additionalForms) !== null && _a !== void 0 ? _a : [];
    var hasAddressCollectionSdk = useSelector(function (state) { return state.checkoutProps.hasAddressCollectionSdk; });
    return (React.createElement(CheckoutContext.Consumer, null, function (checkout) {
        if (!checkout)
            return null;
        var additionalFormErrors = getAdditionalFormErrors(additionalForms);
        var shouldShowErrorContainer = function () {
            return !!((props.customErrors && props.customErrors.length) ||
                checkout.redux.errors.length ||
                additionalFormErrors.length);
        };
        if (props.transport.isDummy && !checkout.isConfigurationResolved()) {
            checkout.setConfigurationResolved();
        }
        props.resolver.activationPromise.then(function () {
            if (!checkout.isConfigurationResolved()) {
                checkout.setConfigurationResolved();
            }
        });
        var useAddressCollectionSdk = checkout.isConfigurationResolved() &&
            shouldUseAddressCollectionSdk(props.country, props.resolver, hasAddressCollectionSdk);
        return (React.createElement(StyleSheetManagerWrapper, { isRtl: checkout.isRtl },
            React.createElement(CheckoutWrapper, { ref: props.checkoutWrapperRef, enforceHeight: checkout.isLoading || checkout.redux.isFetchDataError, isRtl: checkout.isRtl },
                React.createElement(ComposedStateHandler, { checkout: checkout }),
                checkout.hasPaymentProviders() &&
                    checkout.isConfigurationResolved() && (React.createElement(RemoteConfigWrapper, null,
                    flowStep === FlowStep.Prepare &&
                        getAboveForms(additionalForms, useAddressCollectionSdk),
                    shouldShowErrorContainer() && (React.createElement(ErrorContainer, { checkoutErrors: checkout.redux.errors, customErrors: props.customErrors, additionalFormErrors: additionalFormErrors })),
                    flowStep === FlowStep.Prepare && React.createElement(PaymentPicker, null),
                    React.createElement("form", { noValidate: true, "data-testid": "checkout-form", onSubmit: function (e) {
                            e.preventDefault();
                            var isValid = e.currentTarget.checkValidity();
                            if (!checkout.isLoading) {
                                checkout.dispatchExportableEvent(userClickedSubmitEvent({
                                    paymentProviderId: PaymentProviderCollection.fromJSON(store.getState().providerCollection).activeProviderId,
                                }));
                                checkout.submit(isValid);
                            }
                            return isValid;
                        } },
                        React.createElement(ProviderPanel, null),
                        flowStep === FlowStep.Prepare &&
                            getBelowForms(additionalForms, useAddressCollectionSdk),
                        checkout.activePaymentProvider && (React.createElement(CtaModule, { buttonLabel: checkout.getCtaLabel(props.buttonLabel), provider: checkout.activePaymentProvider, moreProviderLogosLabel: checkout.redux.moreProviderLogosLabel, disabled: checkout.isLoading, onClick: checkout.trackingMethods.trackCheckoutPaymentAction, checkoutWidth: checkout.checkoutWidth, clientName: checkout.checkoutProps.clientName, clientContext: checkout.checkoutProps.clientContext }))),
                    React.createElement(ChangePaymentMethodButton, null))))));
    }));
}
