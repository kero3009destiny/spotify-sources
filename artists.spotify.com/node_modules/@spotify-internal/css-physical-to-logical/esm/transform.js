const values = {
    clear: {
        left: 'var(--inline-start, inline-start)',
        right: 'var(--inline-end, inline-end)',
    },
    float: {
        left: 'var(--inline-start, inline-start)',
        right: 'var(--inline-end, inline-end)',
    },
    'text-align': {
        left: 'start',
        right: 'end',
    },
};
const properties = {
    'border-bottom': 'border-block-end',
    'border-bottom-color': 'border-block-end-color',
    'border-bottom-style': 'border-block-end-style',
    'border-bottom-width': 'border-block-end-width',
    'border-top': 'border-block-start',
    'border-top-color': 'border-block-start-color',
    'border-top-style': 'border-block-start-style',
    'border-top-width': 'border-block-start-width',
    'border-right': 'border-inline-end',
    'border-right-color': 'border-inline-end-color',
    'border-right-style': 'border-inline-end-style',
    'border-right-width': 'border-inline-end-width',
    'border-left': 'border-inline-start',
    'border-left-color': 'border-inline-start-color',
    'border-left-style': 'border-inline-start-style',
    'border-left-width': 'border-inline-start-width',
    'border-top-left-radius': 'border-start-start-radius',
    'border-bottom-left-radius': 'border-start-end-radius',
    'border-top-right-radius': 'border-end-start-radius',
    'border-bottom-right-radius': 'border-end-end-radius',
    'margin-bottom': 'margin-block-end',
    'margin-top': 'margin-block-start',
    'margin-right': 'margin-inline-end',
    'margin-left': 'margin-inline-start',
    'padding-bottom': 'padding-block-end',
    'padding-top': 'padding-block-start',
    'padding-right': 'padding-inline-end',
    'padding-left': 'padding-inline-start',
    top: 'inset-block-start',
    bottom: 'inset-block-end',
    left: 'inset-inline-start',
    right: 'inset-inline-end',
    width: 'inline-size',
    height: 'block-size',
    'min-width': 'min-inline-size',
    'min-height': 'min-block-size',
    'max-width': 'max-inline-size',
    'max-height': 'max-block-size',
};
export function transform(property, value) {
    var _a, _b, _c;
    return [
        (_a = properties[property]) !== null && _a !== void 0 ? _a : property,
        (_c = (_b = values[property]) === null || _b === void 0 ? void 0 : _b[value]) !== null && _c !== void 0 ? _c : value,
    ];
}
//# sourceMappingURL=transform.js.map