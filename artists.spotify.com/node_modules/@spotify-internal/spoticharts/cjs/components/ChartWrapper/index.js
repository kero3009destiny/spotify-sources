"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChartWrapper = void 0;
const react_1 = __importStar(require("react"));
const prop_types_1 = __importDefault(require("prop-types"));
const isNull_1 = __importDefault(require("lodash/isNull"));
const isUndefined_1 = __importDefault(require("lodash/isUndefined"));
const reactochart_1 = require("reactochart");
const ErrorBoundaryChart_1 = __importDefault(require("./ErrorBoundaryChart"));
const MultiWindowXAxis_1 = __importDefault(require("../MultiWindowXAxis"));
const Utils_1 = require("../Utils");
const global_1 = __importDefault(require("../../styles/global"));
class ChartWrapper extends react_1.Component {
    render() {
        const _a = this.props, { children, height, width, xDomain, yDomain, xTickCount, yTickCount, formatXAxis, formatYAxis, xOffset, isEmpty, xLabelStyle, xNoLabelOverhang, yLabelStyle, labelStyle, labelDistance, xLabelDistance, yLabelDistance, showGrid, spacingLeft, spacingRight, xAxisWindows, yAxisComponent: YAxis } = _a, rest = __rest(_a, ["children", "height", "width", "xDomain", "yDomain", "xTickCount", "yTickCount", "formatXAxis", "formatYAxis", "xOffset", "isEmpty", "xLabelStyle", "xNoLabelOverhang", "yLabelStyle", "labelStyle", "labelDistance", "xLabelDistance", "yLabelDistance", "showGrid", "spacingLeft", "spacingRight", "xAxisWindows", "yAxisComponent"]);
        const size = { height, width };
        if (isEmpty) {
            return (react_1.default.createElement(react_1.Fragment, null,
                react_1.default.createElement(reactochart_1.XYPlot, Object.assign({ xDomain: [0, 10], yDomain: [0, 5, 100] }, size, rest),
                    react_1.default.createElement(reactochart_1.YGrid, { tickCount: 2 })),
                react_1.default.createElement(global_1.default, null)));
        }
        return (react_1.default.createElement(react_1.Fragment, null,
            react_1.default.createElement(ErrorBoundaryChart_1.default, Object.assign({}, size, rest),
                react_1.default.createElement(reactochart_1.XYPlot, Object.assign({ xDomain: xDomain, yDomain: yDomain }, size, { spacingLeft: spacingLeft, spacingRight: spacingRight }, rest),
                    xAxisWindows.length > 0 && (react_1.default.createElement(MultiWindowXAxis_1.default, { labelFormat: formatXAxis, labelStyle: xLabelStyle ? xLabelStyle : labelStyle, labelDistance: xLabelDistance != null ? xLabelDistance : labelDistance, labelOffset: xOffset, noLabelOverhang: xNoLabelOverhang, showGrid: showGrid, windows: xAxisWindows })),
                    xAxisWindows.length === 0 && (react_1.default.createElement(reactochart_1.XAxis, { tickCount: xTickCount, labelFormat: formatXAxis, labelStyle: xLabelStyle ? xLabelStyle : labelStyle, labelDistance: xLabelDistance != null ? xLabelDistance : labelDistance, noLabelOverhang: xNoLabelOverhang, labelOffset: xOffset, showGrid: showGrid, nice: false })),
                    react_1.default.createElement(reactochart_1.YGrid, { tickCount: yTickCount }),
                    react_1.default.createElement(YAxis, { tickCount: yTickCount, labelFormat: formatYAxis, labelStyle: yLabelStyle ? yLabelStyle : labelStyle, labelDistance: yLabelDistance != null ? yLabelDistance : labelDistance, showGrid: showGrid }),
                    react_1.default.Children.map(children, child => {
                        return isNull_1.default(child) || isUndefined_1.default(child)
                            ? null
                            : react_1.default.cloneElement(child, Object.assign({}, size));
                    }))),
            react_1.default.createElement(global_1.default, null)));
    }
}
exports.ChartWrapper = ChartWrapper;
ChartWrapper.propTypes = {
    children: prop_types_1.default.node,
    height: prop_types_1.default.number,
    width: prop_types_1.default.number,
    xDomain: prop_types_1.default.array,
    yDomain: prop_types_1.default.array,
    xTickCount: prop_types_1.default.number,
    yTickCount: prop_types_1.default.number,
    formatXAxis: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.func]),
    formatYAxis: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.func]),
    xOffset: prop_types_1.default.number,
    labelDistance: prop_types_1.default.number,
    xLabelDistance: prop_types_1.default.number,
    yLabelDistance: prop_types_1.default.number,
    isEmpty: prop_types_1.default.bool,
    labelStyle: prop_types_1.default.object,
    xLabelStyle: prop_types_1.default.object,
    xNoLabelOverhang: prop_types_1.default.bool,
    yLabelStyle: prop_types_1.default.object,
    showGrid: prop_types_1.default.bool,
    spacingLeft: prop_types_1.default.number,
    spacingRight: prop_types_1.default.number,
    onError: prop_types_1.default.func,
    xAxisWindows: prop_types_1.default.array,
    yAxisComponent: prop_types_1.default.func.isRequired,
};
ChartWrapper.defaultProps = {
    xTickCount: 5,
    yTickCount: 2,
    formatXAxis: x => x,
    formatYAxis: Utils_1.YAxisFormatter,
    xOffset: 0,
    labelStyle: { fontSize: '10px', fontFamily: 'Circular' },
    labelDistance: 20,
    showGrid: false,
    xAxisWindows: [],
    yAxisComponent: reactochart_1.YAxis,
};
exports.default = ChartWrapper;
//# sourceMappingURL=index.js.map