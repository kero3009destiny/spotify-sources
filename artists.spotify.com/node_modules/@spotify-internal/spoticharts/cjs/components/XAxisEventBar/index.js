"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const prop_types_1 = __importDefault(require("prop-types"));
const encore_foundation_1 = require("@spotify-internal/encore-foundation");
const Margin_1 = require("reactochart/utils/Margin");
const DotMarker_1 = __importDefault(require("../DotMarker"));
class XAxisEventBar extends react_1.Component {
    static getMargin(props) {
        const { distance, barHeight } = props;
        const margins = [
            {
                marginTop: 0,
                marginRight: 20,
                marginBottom: distance + barHeight,
                marginLeft: 20,
            },
        ];
        return Margin_1.sumMargins(margins, 'margin');
    }
    render() {
        const { events, x, dotColor, lineProps, mouseX, xScale, yScale, height, barHeight, barColor, distance, xEquals, } = this.props;
        if (!xScale) {
            return null;
        }
        const xFromPos = typeof mouseX === 'number' ? xScale.invert(mouseX) : null;
        const radius = barHeight / 2;
        const [lowerBound, higherBound] = xScale.domain();
        const barLeft = xScale(lowerBound);
        const barRight = xScale(higherBound);
        const yPos = height + distance + barHeight / 2;
        const bottomY = Math.min(...yScale.domain());
        return (react_1.default.createElement("g", { className: "event-bar" },
            react_1.default.createElement("circle", { cx: barLeft, cy: height + radius + distance, r: radius, fill: barColor, strokeWidth: 2 }),
            react_1.default.createElement("circle", { cx: barRight, cy: height + radius + distance, r: radius, fill: barColor, strokeWidth: 2 }),
            react_1.default.createElement("rect", { x: barLeft, y: height + distance, height: barHeight, width: barRight - barLeft, fill: barColor }),
            events.map((event, i) => {
                const eventX = x(event);
                const isSelected = xEquals(eventX, xFromPos);
                const xScaled = Math.round(xScale(eventX));
                return (react_1.default.createElement(react_1.Fragment, { key: i },
                    isSelected && (react_1.default.createElement("line", Object.assign({}, lineProps, { y1: yScale(bottomY), y2: yPos, x1: xScaled, x2: xScaled }))),
                    react_1.default.createElement(DotMarker_1.default, { xPos: xScaled, yPos: yPos, diameter: isSelected ? barHeight + 2 : barHeight - 2, fill: dotColor })));
            })));
    }
}
exports.default = XAxisEventBar;
XAxisEventBar.propTypes = {
    events: prop_types_1.default.array,
    x: prop_types_1.default.func,
    dotColor: prop_types_1.default.string,
    lineProps: prop_types_1.default.object,
    mouseX: prop_types_1.default.number,
    xScale: prop_types_1.default.func,
    yScale: prop_types_1.default.func,
    height: prop_types_1.default.number,
    barHeight: prop_types_1.default.number,
    barColor: prop_types_1.default.string,
    distance: prop_types_1.default.number,
    xEquals: prop_types_1.default.func.isRequired,
};
XAxisEventBar.defaultProps = {
    dotColor: encore_foundation_1.azure,
    barHeight: 12,
    distance: 24,
    barColor: encore_foundation_1.gray95,
    x: point => point,
    xEquals: (a, b) => a === b,
    lineProps: {
        stroke: 'black',
        strokeWidth: 1,
    },
};
//# sourceMappingURL=index.js.map