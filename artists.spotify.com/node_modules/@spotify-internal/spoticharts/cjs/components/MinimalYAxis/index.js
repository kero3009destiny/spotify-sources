"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const prop_types_1 = __importDefault(require("prop-types"));
const reactochart_1 = require("reactochart");
const Margin_1 = require("reactochart/utils/Margin");
const Axis_1 = require("reactochart/utils/Axis");
class MinimalYAxis extends react_1.Component {
    static getTickDomain(props) {
        if (!props.yScale)
            return null;
        return { yTickDomain: props.yScale.domain() };
    }
    static getMargin(props) {
        const { labelsProps } = Axis_1.getAxisChildProps(props);
        const margins = [
            {
                marginTop: 20,
                marginRight: 0,
                marginBottom: props.distance,
                marginLeft: 0,
            },
        ];
        margins.push(Object.assign(Object.assign({}, reactochart_1.YAxisLabels.getMargin(labelsProps)), { marginRight: 0, marginLeft: 0 }));
        return Margin_1.sumMargins(margins, 'margin');
    }
    render() {
        const { xScale, yScale, xDomain, yDomain, labelStyle, labelFormat, labelClassName, spacingLeft, spacingRight, width, position, } = this.props;
        const transform = position === 'left'
            ? `translate(${-spacingLeft}, 0)`
            : `translate(${width + spacingRight}, 0)`;
        return (react_1.default.createElement("g", { transform: transform },
            react_1.default.createElement("defs", null,
                react_1.default.createElement("filter", { id: "bubblewrap", x: "-50%", y: "-50%", width: "200%", height: "200%", filterUnits: "objectBoundingBox", primitiveUnits: "userSpaceOnUse", colorInterpolationFilters: "linearRGB" },
                    react_1.default.createElement("feGaussianBlur", { stdDeviation: "3 1", x: "0%", y: "-50%", width: "100%", height: "100%", in: "SourceGraphic", edgeMode: "none", result: "blur" }),
                    react_1.default.createElement("feColorMatrix", { type: "matrix", values: "1 1 1 1 1\n                      1 1 1 1 1\n                      1 1 1 1 1\n                      1 1 1 500 -20", x: "-50%", y: "-50%", width: "200%", height: "200%", in: "blur", result: "colormatrix" }),
                    react_1.default.createElement("feComposite", { in: "SourceGraphic", in2: "colormatrix", operator: "over", x: "-50%", y: "-50%", width: "200%", height: "200%", result: "composite" }))),
            react_1.default.createElement("g", { filter: "url(#bubblewrap)" },
                react_1.default.createElement("text", { y: yScale(yDomain[1]), x: xScale(xDomain[0]), style: Object.assign(Object.assign({}, labelStyle), { dominantBaseline: 'central', textAnchor: 'start' }), className: labelClassName, format: labelFormat }, labelFormat(yDomain[1])))));
    }
}
exports.default = MinimalYAxis;
MinimalYAxis.propTypes = {
    windows: prop_types_1.default.arrayOf(prop_types_1.default.shape({
        start: prop_types_1.default.object,
        end: prop_types_1.default.object,
        label: prop_types_1.default.string,
    })),
    labelStyle: prop_types_1.default.object,
    labelFormat: prop_types_1.default.func,
    labelClassName: prop_types_1.default.string,
    position: prop_types_1.default.string,
    spacingLeft: prop_types_1.default.number,
    spacingRight: prop_types_1.default.number,
    xDomain: prop_types_1.default.array,
    yDomain: prop_types_1.default.array,
    xScale: prop_types_1.default.func,
    yScale: prop_types_1.default.func,
    width: prop_types_1.default.number,
    height: prop_types_1.default.number,
    maxTicks: prop_types_1.default.number,
    nice: prop_types_1.default.bool,
    barHeight: prop_types_1.default.number,
    distance: prop_types_1.default.number.isRequired,
};
MinimalYAxis.defaultProps = {
    nice: false,
    barHeight: 14,
    distance: 7,
    labelClassName: '',
    position: 'left',
};
//# sourceMappingURL=index.js.map