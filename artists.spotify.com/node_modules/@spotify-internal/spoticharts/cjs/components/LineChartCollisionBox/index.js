"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const prop_types_1 = __importDefault(require("prop-types"));
const d3_time_1 = require("d3-time");
class LineChartCollisionBox extends react_1.Component {
    constructor(props) {
        super(props);
        this.state = this.deriveDimensions(props);
    }
    componentDidUpdate({ width: prevWidth, height: prevHeight }) {
        const { width, height } = this.props;
        if (width !== prevWidth || height !== prevHeight) {
            this.setState(() => this.deriveDimensions());
        }
    }
    deriveDimensions(props = this.props) {
        const { data, x, y, xScale, yScale, paddingLeft, paddingRight } = props;
        const xVal = x(data);
        const xPointPos = Math.round(xScale(x(data)));
        const yPointPos = Math.round(yScale(y(data)));
        let rectXPos = Math.round(xScale(d3_time_1.utcHour.offset(xVal, -12)));
        if (rectXPos < paddingLeft)
            rectXPos = paddingLeft;
        let rectXEndPos = Math.round(xScale(d3_time_1.utcHour.offset(xVal, 12)));
        if (rectXEndPos > paddingRight)
            rectXEndPos = paddingRight;
        const rectWidth = rectXEndPos - rectXPos;
        const rectHeight = Math.round(yScale(0));
        return {
            xPos: rectXPos,
            yPos: 0,
            width: rectWidth,
            height: rectHeight,
            xPointPos,
            yPointPos,
        };
    }
    render() {
        const { onMouseEnter, onMouseLeave, data } = this.props;
        const { xPos, yPos, xPointPos, yPointPos, width, height } = this.state;
        return (react_1.default.createElement("rect", { x: xPos, y: yPos, stroke: 0, fill: "rgba(0,0,0,0)", width: width, height: height, onMouseEnter: e => onMouseEnter(e, { xPos: xPointPos, yPos: yPointPos, data }), onMouseLeave: onMouseLeave }));
    }
}
exports.default = LineChartCollisionBox;
LineChartCollisionBox.propTypes = {
    data: prop_types_1.default.object.isRequired,
    x: prop_types_1.default.func.isRequired,
    y: prop_types_1.default.func.isRequired,
    xScale: prop_types_1.default.func.isRequired,
    yScale: prop_types_1.default.func.isRequired,
    width: prop_types_1.default.number,
    height: prop_types_1.default.number,
    paddingLeft: prop_types_1.default.number,
    paddingRight: prop_types_1.default.number,
    onMouseEnter: prop_types_1.default.func.isRequired,
    onMouseLeave: prop_types_1.default.func,
};
LineChartCollisionBox.defaultProps = {
    paddingLeft: -Infinity,
    paddingRight: Infinity,
};
//# sourceMappingURL=index.js.map