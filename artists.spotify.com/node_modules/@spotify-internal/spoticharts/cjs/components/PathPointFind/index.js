"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.debouncedWarn = void 0;
const react_1 = __importStar(require("react"));
const prop_types_1 = __importDefault(require("prop-types"));
const isNumber_1 = __importDefault(require("lodash/isNumber"));
const isFunction_1 = __importDefault(require("lodash/isFunction"));
const omit_1 = __importDefault(require("lodash/omit"));
const isEmpty_1 = __importDefault(require("lodash/isEmpty"));
const debounce_1 = __importDefault(require("lodash/debounce"));
const Utils_1 = require("../Utils");
exports.debouncedWarn = debounce_1.default(console.warn, 50);
function PathPointFindHOC(Component) {
    var _a;
    return _a = class PathPointFind extends react_1.PureComponent {
            render() {
                const { data, dataIndex, xPos, x, y, xScale, yScale, quantizer, xEquals, reconstructor, } = this.props;
                let scaledXPos = 0;
                let scaledYPos = 0;
                let selectedData = {};
                try {
                    if (isFunction_1.default(xScale) && isFunction_1.default(yScale)) {
                        if (isNumber_1.default(dataIndex)) {
                            selectedData = data[dataIndex];
                        }
                        else {
                            const xFromPos = quantizer(xScale.invert(xPos));
                            selectedData = data.find(d => xEquals(d, reconstructor(xFromPos), this.props));
                        }
                        if (isEmpty_1.default(selectedData))
                            return null;
                        scaledXPos = Math.round(xScale(x(selectedData)));
                        scaledYPos = Math.round(yScale(y(selectedData)));
                    }
                    return (react_1.default.createElement(Component, Object.assign({}, omit_1.default(this.props, PathPointFind.omittedProps), { xPos: scaledXPos, yPos: scaledYPos, selectedData: selectedData })));
                }
                catch (e) {
                    exports.debouncedWarn('PathPointFind lookup failed.');
                    return null;
                }
            }
        },
        _a.propTypes = {
            data: prop_types_1.default.arrayOf(prop_types_1.default.object),
            dataIndex: prop_types_1.default.number,
            xPos: Utils_1.requiredIfOtherIsUndefined('dataIndex'),
            x: prop_types_1.default.func.isRequired,
            y: prop_types_1.default.func.isRequired,
            xScale: prop_types_1.default.func,
            yScale: prop_types_1.default.func,
            quantizer: prop_types_1.default.func.isRequired,
            xEquals: prop_types_1.default.func.isRequired,
            reconstructor: prop_types_1.default.func.isRequired,
        },
        _a.defaultProps = {
            x: d => d.x,
            y: d => d.y,
            quantizer: x => Math.floor(x + 0.5),
            xEquals: (data, otherData, props) => props.x(data) === props.x(otherData),
            reconstructor: (x, y) => ({ x, y }),
        },
        _a.omittedProps = [
            'quantizer',
            'xEquals',
            'reconstructor',
            'mouseX',
            'mouseY',
            'x',
            'y',
            'dataIndex',
        ],
        _a;
}
exports.default = PathPointFindHOC;
//# sourceMappingURL=index.js.map