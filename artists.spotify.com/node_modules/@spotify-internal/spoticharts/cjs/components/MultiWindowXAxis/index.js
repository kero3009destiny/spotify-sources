"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const styled_components_1 = __importDefault(require("styled-components"));
const prop_types_1 = __importDefault(require("prop-types"));
const reactochart_1 = require("reactochart");
const Margin_1 = require("reactochart/utils/Margin");
const Axis_1 = require("reactochart/utils/Axis");
const MultiWindowXAxisContainer = styled_components_1.default.g `
  .rct-chart-value-labels-x {
    > g:first-of-type > text {
      text-anchor: start;
    }
    > g > text {
      text-anchor: middle;
    }
    > g:last-of-type > text {
      text-anchor: end;
    }
  }
`;
class MultiWindowXAxis extends react_1.Component {
    static getTickDomain(props) {
        if (!props.xScale)
            return null;
        return { xTickDomain: props.xScale.domain() };
    }
    static getMargin(props) {
        const { ticksProps, labelsProps, titleProps } = Axis_1.getAxisChildProps(props);
        const margins = [
            {
                marginTop: 0,
                marginRight: 20,
                marginBottom: props.distance,
                marginLeft: props.noLabelOverhang ? 4 : 20,
            },
        ];
        margins.push(reactochart_1.XTicks.getMargin(ticksProps));
        if (props.showTitle && props.title)
            margins.push(reactochart_1.XAxisTitle.getMargin(titleProps));
        margins.push(reactochart_1.XAxisLabels.getMargin(labelsProps));
        return Margin_1.sumMargins(margins, 'margin');
    }
    render() {
        const { windows, xScale, height, labelStyle, labelFormat, labelClassName, noLabelOverhang, xDomain, barHeight, distance, } = this.props;
        return (react_1.default.createElement(MultiWindowXAxisContainer, { labelClassName: labelClassName },
            windows.map(({ start, end, label }, i) => {
                const radius = barHeight / 2;
                const scaledStart = xScale(start);
                const scaledEnd = xScale(end);
                const scaledWidth = scaledEnd - scaledStart;
                let previousEnd;
                if (i > 0) {
                    const { end: prevEnd } = windows[i - 1];
                    previousEnd = xScale(prevEnd);
                }
                const gapUnitSpace = 1;
                const rectDimensions = {
                    start: Math.round(previousEnd + gapUnitSpace),
                    width: Math.round(scaledWidth - gapUnitSpace - gapUnitSpace),
                };
                if (i === 0) {
                    rectDimensions.start = noLabelOverhang
                        ? scaledStart + radius
                        : scaledStart;
                }
                if (i === 0 || i === windows.length - 1) {
                    rectDimensions.width = Math.round(scaledWidth - gapUnitSpace - (noLabelOverhang ? radius : 0));
                }
                return (react_1.default.createElement("g", { key: `multi-window-bar-${i}` },
                    i === 0 && (react_1.default.createElement("circle", { cx: noLabelOverhang ? scaledStart + radius : scaledStart, cy: height + radius + distance, r: radius, fill: "#eee", stroke: "#fff", strokeWidth: 2 })),
                    i === windows.length - 1 && (react_1.default.createElement("circle", { cx: noLabelOverhang ? scaledEnd - radius : scaledEnd, cy: height + radius + distance, r: radius, fill: "#eee", stroke: "#fff", strokeWidth: 2 })),
                    react_1.default.createElement("rect", { x: Math.round(rectDimensions.start), y: height + distance, height: barHeight, width: rectDimensions.width, fill: "#eee" }),
                    react_1.default.createElement("text", { x: scaledStart + rectDimensions.width / 2, y: height + distance + 2 + radius, textAnchor: "middle", alignmentBaseline: "middle", style: Object.assign(Object.assign({}, labelStyle), { textTransform: 'uppercase', fill: '#616161' }) }, label)));
            }),
            react_1.default.createElement(reactochart_1.XAxisLabels, Object.assign({}, this.props, { format: labelFormat, distance: barHeight + distance * 2, labelClassName: "multi-window-label", labelStyle: Object.assign(Object.assign({}, labelStyle), { textAnchor: 'auto' }), noLabelOverhang: noLabelOverhang, ticks: windows.reduce((ticks, { start, end }) => {
                    if (ticks[ticks.length - 1].valueOf() !== start.valueOf()) {
                        ticks.push(start);
                    }
                    if (start.valueOf() !== end.valueOf()) {
                        ticks.push(end);
                    }
                    return ticks;
                }, [xDomain[0]]) }))));
    }
}
exports.default = MultiWindowXAxis;
MultiWindowXAxis.propTypes = {
    windows: prop_types_1.default.arrayOf(prop_types_1.default.shape({
        start: prop_types_1.default.object,
        end: prop_types_1.default.object,
        label: prop_types_1.default.string,
    })),
    labelStyle: prop_types_1.default.object,
    labelFormat: prop_types_1.default.func,
    labelClassName: prop_types_1.default.string,
    noLabelOverhang: prop_types_1.default.bool,
    xDomain: prop_types_1.default.array,
    xScale: prop_types_1.default.func,
    width: prop_types_1.default.number,
    height: prop_types_1.default.number,
    maxTicks: prop_types_1.default.number,
    nice: prop_types_1.default.bool,
    barHeight: prop_types_1.default.number,
    distance: prop_types_1.default.number.isRequired,
};
MultiWindowXAxis.defaultProps = {
    nice: false,
    barHeight: 14,
    distance: 7,
    labelClassName: 'multi-window-label',
};
//# sourceMappingURL=index.js.map