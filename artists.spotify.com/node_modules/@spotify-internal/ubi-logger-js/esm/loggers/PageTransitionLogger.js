import { createUbiExpr2PageView } from '@spotify-internal/event-definitions/es5/events/createUbiExpr2PageView';
import { EventDispatcher } from '../dispatchers/EventDispatcher';
import { v4 as uuidv4 } from 'uuid';
import { NavigationReason, } from '@spotify-internal/ubi-types-js';
export var NavigationEvents;
(function (NavigationEvents) {
    NavigationEvents["NAVIGATION_IDLE"] = "navigation_idle";
    NavigationEvents["NAVIGATION_STARTED"] = "navigation_started";
    NavigationEvents["NAVIGATION_PENDING"] = "navigation_pending";
    NavigationEvents["NAVIGATION_COMPLETED"] = "navigation_completed";
})(NavigationEvents || (NavigationEvents = {}));
var NavigationError;
(function (NavigationError) {
    NavigationError["NAVIGATION_NOT_COMPLETED"] = "Navigation was not completed";
    NavigationError["NAVIGATION_NOT_STARTED"] = "Navigation was not started";
})(NavigationError || (NavigationError = {}));
export class PageTransitionLogger {
    constructor(options) {
        this._currentPageId = null;
        this._currentPageInstanceId = null;
        this._currentEntityURI = null;
        this._currentNavigationalRoot = null;
        this._currentNavigationStatus = null;
        this._pendingNavigationalRoot = null;
        this._pendingInteractionId = null;
        this._pendingNavigationReason = null;
        this._dispatcher = new EventDispatcher();
        this._eventSender = options.eventSender;
        this._pageInstanceIdProvider = options.pageInstanceIdProvider;
        this._currentNavigationStatus = NavigationEvents.NAVIGATION_IDLE;
        this._addEventListeners();
    }
    _resetNavStartInfo() {
        this._pendingInteractionId = null;
        this._pendingNavigationReason = null;
        this._pendingNavigationalRoot = null;
    }
    _populateNavigationReason() {
        if (this._pendingNavigationReason) {
            return this._pendingNavigationReason;
        }
        if (this._pendingInteractionId) {
            return `userInteraction(${this._pendingInteractionId})`;
        }
        return NavigationReason.UNKNOWN;
    }
    _generatePageInstanceId() {
        const uuid = uuidv4();
        this._pageInstanceIdProvider.setPageInstanceId(uuid);
        return uuid;
    }
    _getPageInstanceId(pageId) {
        if (this._currentPageId !== pageId) {
            return this._generatePageInstanceId();
        }
        return this._currentPageInstanceId;
    }
    _setCurrent(pageId, pageInstanceId, entityUri, navigationalRoot) {
        this._currentPageId = pageId;
        this._currentPageInstanceId = pageInstanceId;
        this._currentEntityURI = entityUri;
        this._currentNavigationalRoot = navigationalRoot;
    }
    _handleNavStart(navigationInfo) {
        const { navigationalRoot, interactionId, navigationReason } = navigationInfo;
        if (this._currentNavigationStatus !== NavigationEvents.NAVIGATION_IDLE) {
            const data = {
                page_instance_id: null,
                page_id: null,
                entity_uri: null,
                navigational_root: this._pendingNavigationalRoot,
                from_page_instance_id: this._currentPageInstanceId,
                from_page_id: this._currentPageId,
                from_entity_uri: this._currentEntityURI,
                from_navigational_root: this._currentNavigationalRoot,
                navigation_reason: this._populateNavigationReason(),
                errors: [NavigationError.NAVIGATION_NOT_COMPLETED],
            };
            const event = createUbiExpr2PageView(data);
            this._eventSender.send(event);
            this._resetNavStartInfo();
        }
        this._pendingInteractionId = interactionId !== null && interactionId !== void 0 ? interactionId : null;
        this._pendingNavigationReason = navigationReason !== null && navigationReason !== void 0 ? navigationReason : null;
        this._pendingNavigationalRoot = navigationalRoot !== null && navigationalRoot !== void 0 ? navigationalRoot : null;
        this._currentNavigationStatus = NavigationEvents.NAVIGATION_STARTED;
    }
    _handleNavEnd(navigationInfo) {
        const { pageId = null, entityUri = null } = navigationInfo;
        const pageInstanceId = this._getPageInstanceId(pageId);
        if (this._currentNavigationStatus === NavigationEvents.NAVIGATION_STARTED) {
            const data = {
                page_instance_id: pageInstanceId,
                page_id: pageId,
                entity_uri: entityUri,
                navigational_root: this._pendingNavigationalRoot,
                from_page_instance_id: this._currentPageInstanceId,
                from_page_id: this._currentPageId,
                from_entity_uri: this._currentEntityURI,
                from_navigational_root: this._currentNavigationalRoot,
                navigation_reason: this._populateNavigationReason(),
            };
            const event = createUbiExpr2PageView(data);
            this._eventSender.send(event);
            this._setCurrent(pageId, pageInstanceId, entityUri, this._pendingNavigationalRoot);
        }
        else {
            const data = {
                page_instance_id: pageInstanceId,
                page_id: pageId,
                entity_uri: entityUri,
                navigational_root: null,
                from_page_instance_id: this._currentPageInstanceId,
                from_page_id: this._currentPageId,
                from_entity_uri: this._currentEntityURI,
                from_navigational_root: this._currentNavigationalRoot,
                navigation_reason: NavigationReason.UNKNOWN,
                errors: [NavigationError.NAVIGATION_NOT_STARTED],
            };
            const event = createUbiExpr2PageView(data);
            this._eventSender.send(event);
            this._resetNavStartInfo();
        }
        this._currentNavigationStatus = NavigationEvents.NAVIGATION_IDLE;
    }
    _logClientLostFocus() {
        const pageInstanceId = this._generatePageInstanceId();
        const data = {
            page_instance_id: pageInstanceId,
            page_id: null,
            entity_uri: null,
            navigational_root: null,
            from_page_instance_id: this._currentPageInstanceId,
            from_page_id: this._currentPageId,
            from_entity_uri: this._currentEntityURI,
            from_navigational_root: this._currentNavigationalRoot,
            navigation_reason: NavigationReason.CLIENT_LOST_FOCUS,
        };
        const event = createUbiExpr2PageView(data);
        this._eventSender.send(event);
        this._setCurrent(this._currentPageId, pageInstanceId, this._currentEntityURI, this._currentNavigationalRoot);
    }
    _logClientGainedFocus() {
        const pageInstanceId = this._generatePageInstanceId();
        const data = {
            page_instance_id: pageInstanceId,
            page_id: this._currentPageId,
            entity_uri: this._currentEntityURI,
            navigational_root: this._currentNavigationalRoot,
            from_page_instance_id: this._currentPageInstanceId,
            from_page_id: null,
            from_entity_uri: null,
            from_navigational_root: null,
            navigation_reason: NavigationReason.CLIENT_GAINED_FOCUS,
        };
        const event = createUbiExpr2PageView(data);
        this._eventSender.send(event);
        this._setCurrent(this._currentPageId, pageInstanceId, this._currentEntityURI, this._currentNavigationalRoot);
    }
    _handleBackgroundStates() {
        if (document.hidden) {
            this._logClientLostFocus();
        }
        else {
            this._logClientGainedFocus();
        }
    }
    _addEventListeners() {
        document.addEventListener('visibilitychange', this._handleBackgroundStates.bind(this));
        this._dispatcher.addListener(NavigationEvents.NAVIGATION_STARTED, this._handleNavStart.bind(this));
        this._dispatcher.addListener(NavigationEvents.NAVIGATION_COMPLETED, this._handleNavEnd.bind(this));
    }
    startNavigation(navigationInfo) {
        this._dispatcher.dispatch(NavigationEvents.NAVIGATION_STARTED, navigationInfo);
    }
    completeNavigation(navigationInfo) {
        this._dispatcher.dispatch(NavigationEvents.NAVIGATION_COMPLETED, navigationInfo);
    }
}
//# sourceMappingURL=PageTransitionLogger.js.map