import { ImpressionEventConverter } from '../eventConverters/ImpressionEventConverter';
import { InteractionEventConverter } from '../eventConverters/InteractionEventConverter';
import { PageTransitionLogger } from './PageTransitionLogger';
import { v4 as uuid } from 'uuid';
import { UBIPageInstanceIdProvider, } from '../providers/PageInstanceIdProvider';
export class UBILogger {
    constructor(options) {
        this._pageInstanceProvider = new UBIPageInstanceIdProvider();
        this._pageTransitionLogger = new PageTransitionLogger({
            eventSender: options.eventSender,
            pageInstanceIdProvider: this._pageInstanceProvider,
        });
        if (!options.eventSender) {
            throw new Error('UBI logger must have an event sender');
        }
        else {
            this._eventSender = options.eventSender;
        }
    }
    logInteraction(event) {
        const pageInstanceId = this._pageInstanceProvider.getPageInstanceId();
        const interactionId = uuid();
        const gabitoEvent = InteractionEventConverter.makeGabitoEvent(interactionId, event, pageInstanceId, true);
        this._eventSender.send(gabitoEvent);
        return interactionId;
    }
    logNonAuthInteraction(event) {
        const pageInstanceId = this._pageInstanceProvider.getPageInstanceId();
        const interactionId = uuid();
        const gabitoEvent = InteractionEventConverter.makeGabitoEvent(interactionId, event, pageInstanceId, false);
        this._eventSender.send(gabitoEvent);
        return interactionId;
    }
    logImpression(event) {
        const pageInstanceId = this._pageInstanceProvider.getPageInstanceId();
        const impressionId = uuid();
        const gabitoEvent = ImpressionEventConverter.makeGabitoEvent(impressionId, event, pageInstanceId, true);
        this._eventSender.send(gabitoEvent);
        return impressionId;
    }
    logNonAuthImpression(event) {
        const pageInstanceId = this._pageInstanceProvider.getPageInstanceId();
        const impressionId = uuid();
        const gabitoEvent = ImpressionEventConverter.makeGabitoEvent(impressionId, event, pageInstanceId, false);
        this._eventSender.send(gabitoEvent);
        return impressionId;
    }
    logNavigationStart(navigationStartInfo) {
        this._pageTransitionLogger.startNavigation(Object.assign(Object.assign({}, navigationStartInfo), { interactionId: navigationStartInfo.interactionId }));
    }
    logNavigationEnd(navigationEndInfo) {
        this._pageTransitionLogger.completeNavigation(navigationEndInfo);
    }
}
//# sourceMappingURL=UBILogger.js.map