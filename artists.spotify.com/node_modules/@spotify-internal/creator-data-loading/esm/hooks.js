import { read } from 'react-read';
import { useEffect, useReducer, useCallback } from 'react';
export function usePut(loader, key) {
    return useCallback(function put(value) {
        const deffered = getDeffered(loader.load(key));
        loader.clear(key).prime(key, value);
        try {
            read(loader.load(key));
        }
        catch (suspender) {
            deffered.resolve(suspender);
        }
    }, [loader, key]);
}
export function useRead(loader, key) {
    const [, rerender] = useReducer(state => state + 1, 0);
    const source = loader.load(key);
    useEffect(() => {
        let subscribed = true;
        const deferred = getDeffered(source);
        deferred.promise.then(() => subscribed && rerender());
        return () => {
            subscribed = false;
        };
    }, [source]);
    return read(source);
}
const defferedKey = Symbol('deffered');
function getDeffered(source) {
    if (!source[defferedKey]) {
        const deferred = (source[defferedKey] = {});
        deferred.promise = new Promise((resolve, reject) => {
            deferred.resolve = resolve;
            deferred.reject = reject;
        });
    }
    return source[defferedKey];
}
//# sourceMappingURL=hooks.js.map