var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import stringify from 'fast-json-stable-stringify';
import useSWR, { mutate as globalMutate, cache } from 'swr';
let globalLoaderId = 0;
export function createSwrHook(loader, swrEscapeHatchOptions = {}) {
    const loaderId = globalLoaderId++;
    function useLoadData(params) {
        const needsSerialization = typeof params === 'object';
        const memoizedParams = needsSerialization ? stringify(params) : params;
        const { data, isValidating, mutate, revalidate } = useSWR([loaderId, memoizedParams], (_id, p) => loader(needsSerialization ? JSON.parse(p) : p), Object.assign(Object.assign({}, swrEscapeHatchOptions), { suspense: true }));
        const castData = data;
        return { data: castData, isValidating, mutate, revalidate };
    }
    function preload(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const needsSerialization = typeof params === 'object';
            const memoizedParams = needsSerialization ? stringify(params) : params;
            if (cache.has([loaderId, memoizedParams])) {
                return;
            }
            yield globalMutate([loaderId, memoizedParams], loader(params), false);
        });
    }
    return [useLoadData, preload];
}
export function clearCacheForTestingOnlyDoNotUse() {
    globalLoaderId = 0;
    return cache.clear();
}
//# sourceMappingURL=createSwrHook.js.map