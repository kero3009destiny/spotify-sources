import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/* stylelint-disable no-descending-specificity */
import React, { useContext } from 'react';
import { ThemeProvider } from 'styled-components';
import { KeyboardDetectionContext } from "../../contexts/KeyboardDetectionContext";
import { buttonSizes } from "../../styles";
import { Button } from "./Button";
var ButtonComponent = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var component = _ref.component,
      _ref$theme = _ref.theme,
      theme = _ref$theme === void 0 ? {} : _ref$theme,
      props = _objectWithoutProperties(_ref, ["component", "theme"]);

  var _useContext = useContext(KeyboardDetectionContext),
      isUsingKeyboard = _useContext.isUsingKeyboard;

  var rel = props.href && props.target === '_blank' ? 'noopener noreferrer' : null;
  return /*#__PURE__*/React.createElement(ThemeProvider, {
    theme: theme
  }, /*#__PURE__*/React.createElement(Button, Object.assign({}, props, {
    rel: rel,
    ref: ref,
    component: !component && props.href ? 'a' : component,
    isUsingKeyboard: isUsingKeyboard
  })));
});

var buttonHelpers = _objectSpread(_objectSpread({}, buttonSizes), {}, {
  darkTheme: {
    button: 'dark'
  },
  displayName: 'ButtonTertiary'
});
/**
* **ButtonTertiary** ![Status: Production](https://img.shields.io/badge/PRODUCTION-%2357B560|height=14)
*
* [GitHub](https://ghe.spotify.net/encore/web/tree/master/src/components/ButtonTertiary) | [Storybook](https://encore-web.spotify.net/?path=/story/components-button-buttontertiary--default) | [Encore](https://encore.spotify.net/web/components/button?format=figma-figma#buttontertiary) | [Figma](https://www.figma.com/file/bnQXqGkLeiTlbk8JXGDcsX/Encore-Web---Light-Theme-Toolkit?node-id=7643:5911) |
*
* Tertiary buttons are text-only buttons. These are used for the least important actions.
*
* @example
* export const Default = () => <ButtonTertiary>Default</ButtonTertiary>;
*
*/


export var ButtonTertiary = Object.assign(ButtonComponent, buttonHelpers);
export default ButtonTertiary;