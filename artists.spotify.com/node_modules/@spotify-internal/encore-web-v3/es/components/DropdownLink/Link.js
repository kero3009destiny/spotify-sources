import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React from 'react';
import { gray7, gray30, gray50, gray70, gray90, gray95, spacer16, white } from '@spotify-internal/encore-foundation';
import styled, { css } from 'styled-components';
import { buttonLinkReset, rootStyle, typeStyleBody2 } from "../../styles";

var isDarkTheme = function isDarkTheme(props) {
  var _props$theme;

  return ((_props$theme = props.theme) == null ? void 0 : _props$theme.dropdownLink) === 'dark';
};

// eslint-disable-next-line prefer-arrow-callback
export var Link = styled(function NavigationItemLink(_ref) {
  var divider = _ref.divider,
      Component = _ref.component,
      props = _objectWithoutProperties(_ref, ["divider", "component"]);

  return /*#__PURE__*/React.createElement(Component, props);
}).withConfig({
  displayName: "Link",
  componentId: "sc-1ytclx2-0"
})(["", ";", ";", ";display:block;padding:14px ", ";color:", ";text-decoration:none;&:hover{background-color:", ";color:", ";", ";}&:active,&:focus{&,&:hover{outline:none;background-color:", ";color:", ";}}", ";", ";", ";"], rootStyle(), function (props) {
  return props.component === 'button' && css(["", ";text-align:left;width:100%;"], buttonLinkReset());
}, typeStyleBody2(), spacer16, function (props) {
  return isDarkTheme(props) ? gray70 : gray50;
}, function (props) {
  return isDarkTheme(props) ? gray50 : gray95;
}, function (props) {
  return isDarkTheme(props) ? white : gray30;
}, function (props) {
  return !props.href && css(["cursor:default;"]);
}, function (props) {
  return isDarkTheme(props) ? gray30 : gray90;
}, function (props) {
  return isDarkTheme(props) ? white : gray30;
}, function (props) {
  return props.disabled && css(["&,&:hover{color:", ";background-color:transparent;cursor:not-allowed;}"], isDarkTheme(props) ? gray50 : gray70);
}, function (props) {
  return props.selected && css(["&,&:hover{background-color:", ";color:", ";}"], isDarkTheme(props) ? gray30 : gray90, isDarkTheme(props) ? white : gray7);
}, function (props) {
  return props.divider && css(["border-top:1px solid ", ";"], props.theme.dropdownLink === 'dark' ? gray30 : gray70);
});