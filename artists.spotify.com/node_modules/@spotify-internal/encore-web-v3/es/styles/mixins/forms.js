/* stylelint-disable no-descending-specificity */
//
// Forms
// --------------------------------------------------
import { failure, gray10, gray15, gray20, gray30, gray50, gray70, gray95, spacer4, spacer16, spacer32, white } from '@spotify-internal/encore-foundation';
import { css } from 'styled-components';
import { rootStyle } from "./baseline";
import { typeStyleBody1 } from "./type";
var formInputPadding = 14;

var borderColor = function borderColor(_ref) {
  var color = _ref.color,
      _ref$isUsingKeyboard = _ref.isUsingKeyboard,
      isUsingKeyboard = _ref$isUsingKeyboard === void 0 ? true : _ref$isUsingKeyboard;
  return css(["box-shadow:inset 0 0 0 1px ", ";&:focus{box-shadow:inset 0 0 0 ", "px ", ";}"], color, isUsingKeyboard ? 3 : 1, color);
}; // Shared styles for inputs, textareas, selects


export var formControlBase = function formControlBase() {
  return css(["-webkit-appearance:none;background-image:none;border:0;display:block;", ";transition:box-shadow ease-in-out 0.1s,color fade 0.1s;width:100%;&::placeholder{opacity:1;}&:focus,&:hover:focus{outline:0;}&:disabled,&[readonly]{cursor:not-allowed;opacity:1;}"], typeStyleBody1());
}; // Styles for inputs only

export var formControlBaseInput = function formControlBaseInput() {
  return css(["", ";margin-top:0;margin-bottom:0;border-radius:", ";padding:", "px;"], rootStyle(), spacer4, formInputPadding);
}; // Styles for textareas only

export var formControlBaseTextarea = function formControlBaseTextarea() {
  return css(["", ";margin-top:0;margin-bottom:0;border-radius:", ";padding:", "px;"], rootStyle(), spacer4, formInputPadding);
}; // Styles for selects only

export var formControlBaseSelect = function formControlBaseSelect() {
  return css(["", ";margin-top:0;margin-bottom:0;appearance:none;box-shadow:none;text-indent:0.01px;text-overflow:'';&::-ms-expand{display:none;}border-radius:", ";padding:14px 44px 14px 14px;"], rootStyle(), spacer4);
}; // Styles the down arrow icon on FormSelect and Dropdown

export var formChevronDown = function formChevronDown() {
  return css(["color:", ";pointer-events:none;position:absolute;right:14px;"], gray50);
}; // Shared styles for radios + checkboxes

export var formCheck = function formCheck() {
  return css(["", ";align-items:center;display:flex;padding-bottom:", ";padding-top:", ";position:relative;min-height:", ";"], rootStyle(), spacer4, spacer4, spacer32);
};
export var formCheckIndicator = function formCheckIndicator(radius) {
  return css(["", ";background:transparent;border-radius:", ";display:inline-block;height:", ";position:relative;user-select:none;width:", ";flex-shrink:0;align-self:flex-start;top:", ";"], rootStyle(), radius, spacer16, spacer16, spacer4);
}; // Light Theme

var themeLightColorDefault = gray10;
var themeLightColorPlaceholder = gray50;
var themeLightColorDisabled = gray50;
var themeLightBackgroundDefault = white;
var themeLightBackgroundDisabled = gray95;
var themeLightBorderDefault = gray70;
var themeLightBorderFocus = gray10;
var themeLightBorderDisabled = gray70;
var themeLightBorderError = failure; // Dark Theme

var themeDarkColorDefault = white;
var themeDarkColorPlaceholder = gray70;
var themeDarkColorDisabled = gray50;
var themeDarkBackgroundDefault = 'rgba(0, 0, 0, 0.4)';
var themeDarkBackgroundDisabled = gray15;
var themeDarkBorderDefault = gray30;
var themeDarkBorderFocus = white;
var themeDarkBorderDisabled = gray20;
var themeDarkBorderError = failure;
export var formControlTheme = function formControlTheme(_ref2) {
  var _ref2$theme = _ref2.theme,
      theme = _ref2$theme === void 0 ? 'light' : _ref2$theme,
      _ref2$isUsingKeyboard = _ref2.isUsingKeyboard,
      isUsingKeyboard = _ref2$isUsingKeyboard === void 0 ? true : _ref2$isUsingKeyboard,
      error = _ref2.error;

  // Dark Theme
  if (theme === 'dark') {
    return css(["background-color:", ";", ";color:", ";&:focus,&:hover:focus{", ";}&::placeholder{color:", ";}&:disabled,&[readonly]{", ";color:", ";background-color:", ";}&:invalid,&:invalid:hover{", ";}"], themeDarkBackgroundDefault, borderColor({
      color: themeDarkBorderDefault,
      isUsingKeyboard: isUsingKeyboard
    }), themeDarkColorDefault, borderColor({
      color: themeDarkBorderFocus,
      isUsingKeyboard: isUsingKeyboard
    }), themeDarkColorPlaceholder, borderColor({
      color: themeDarkBorderDisabled,
      isUsingKeyboard: isUsingKeyboard
    }), themeDarkColorDisabled, themeDarkBackgroundDisabled, error === undefined && borderColor({
      color: themeDarkBorderError,
      isUsingKeyboard: isUsingKeyboard
    }));
  } // Light Theme


  return css(["background-color:", ";", ";color:", ";&:focus,&:hover:focus{", ";}&::placeholder{color:", ";}&:disabled,&[readonly]{", ";color:", ";background-color:", ";}&:invalid,&:invalid:hover{", ";}"], themeLightBackgroundDefault, borderColor({
    color: themeLightBorderDefault,
    isUsingKeyboard: isUsingKeyboard
  }), themeLightColorDefault, borderColor({
    color: themeLightBorderFocus,
    isUsingKeyboard: isUsingKeyboard
  }), themeLightColorPlaceholder, borderColor({
    color: themeLightBorderDisabled,
    isUsingKeyboard: isUsingKeyboard
  }), themeLightColorDisabled, themeLightBackgroundDisabled, error === undefined && borderColor({
    color: themeLightBorderError,
    isUsingKeyboard: isUsingKeyboard
  }));
};
export var formControlInputIconTheme = function formControlInputIconTheme() {
  var theme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'light';

  // Dark Theme
  if (theme === 'dark') {
    return css(["color:", ";input:focus + &{color:", ";}input:disabled + &,input[readonly] + &{color:", ";}"], themeDarkBorderDefault, themeDarkBorderFocus, themeDarkBorderDisabled);
  }

  return css(["color:", ";input:focus + &{color:", ";}input:disabled + &,input[readonly] + &{color:", ";}"], themeLightBorderDefault, themeLightBorderFocus, themeLightBorderDisabled);
};
export var formControlErrorTheme = function formControlErrorTheme(_ref3) {
  var _ref3$theme = _ref3.theme,
      theme = _ref3$theme === void 0 ? 'light' : _ref3$theme,
      _ref3$isUsingKeyboard = _ref3.isUsingKeyboard,
      isUsingKeyboard = _ref3$isUsingKeyboard === void 0 ? true : _ref3$isUsingKeyboard;
  var errorTheme = theme === 'dark' ? themeDarkBorderError : themeLightBorderError; // Applying extra specificity via &&& to override base level
  // focus state returning to non error border color

  return css(["&,&&&,&:hover,&:hover:focus{", ";}"], borderColor({
    color: errorTheme,
    isUsingKeyboard: isUsingKeyboard
  }));
};