import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

//
// Overlays: Dialogs, Tooltips, Popovers, etc
// --------------------------------------------------
import { gray10, gray20, gray95, screenSmMin, spacer4, spacer8, spacer12, spacer24, spacer48, white } from '@spotify-internal/encore-foundation';
import { css } from 'styled-components';
import { fontWeightBook, zIndexDialog } from "../../styles";
import { assertNever } from "../../typeHelpers";
import { triangle } from "./triangle";
var overlayBoxShadow = "0 ".concat(spacer4, " ").concat(spacer12, " 0 rgba(0, 0, 0, 0.2)");
export var overlayDirections = {
  top: 'top',
  topRight: 'topRight',
  topLeft: 'topLeft',
  left: 'left',
  leftTop: 'leftTop',
  leftBottom: 'leftBottom',
  bottom: 'bottom',
  bottomLeft: 'bottomLeft',
  bottomRight: 'bottomRight',
  right: 'right',
  rightTop: 'rightTop',
  rightBottom: 'rightBottom'
};

var overlayBase = function overlayBase(isDarkTheme) {
  return css(["background:", ";border-radius:", ";box-shadow:", ";color:", ";font-weight:", ";text-align:left;"], isDarkTheme ? gray20 : white, spacer8, overlayBoxShadow, isDarkTheme ? gray95 : gray10, fontWeightBook);
};

export var dialog = function dialog(isDarkTheme) {
  return css(["", ";display:flex;flex-direction:column;max-height:90vh;max-width:calc(100% - ", ");z-index:", ";@media (min-width:", "){max-height:80vh;}"], overlayBase(isDarkTheme), spacer48, zIndexDialog, screenSmMin);
};
export var overlay = function overlay(_ref) {
  var _ref$maxWidth = _ref.maxWidth,
      maxWidth = _ref$maxWidth === void 0 ? '296px' : _ref$maxWidth,
      isDarkTheme = _ref.isDarkTheme;
  return css(["", ";cursor:default;display:inline-block;max-width:", ";position:relative;"], overlayBase(isDarkTheme), maxWidth);
};

var arrowBase = function arrowBase(isDarkTheme) {
  return {
    dropShadow: isDarkTheme ? undefined : 'rgba(0, 0, 0, 0.05)',
    color: isDarkTheme ? gray20 : white,
    width: spacer8
  };
};

export var overlayArrow = function overlayArrow(direction, isDarkTheme) {
  switch (direction) {
    case 'top':
      return triangle(_objectSpread(_objectSpread({}, arrowBase(isDarkTheme)), {}, {
        offset: 'center',
        position: 'top'
      }));

    case 'topLeft':
      return triangle(_objectSpread(_objectSpread({}, arrowBase(isDarkTheme)), {}, {
        offset: spacer8,
        position: 'top'
      }));

    case 'topRight':
      return triangle(_objectSpread(_objectSpread({}, arrowBase(isDarkTheme)), {}, {
        offset: "calc(100% - ".concat(spacer24, ")"),
        position: 'top'
      }));

    case 'bottom':
      return triangle(_objectSpread(_objectSpread({}, arrowBase(isDarkTheme)), {}, {
        offset: 'center',
        position: 'bottom'
      }));

    case 'bottomLeft':
      return triangle(_objectSpread(_objectSpread({}, arrowBase(isDarkTheme)), {}, {
        offset: spacer8,
        position: 'bottom'
      }));

    case 'bottomRight':
      return triangle(_objectSpread(_objectSpread({}, arrowBase(isDarkTheme)), {}, {
        offset: "calc(100% - ".concat(spacer24, ")"),
        position: 'bottom'
      }));

    case 'left':
      return triangle(_objectSpread(_objectSpread({}, arrowBase(isDarkTheme)), {}, {
        offset: 'center',
        position: 'left'
      }));

    case 'leftTop':
      return triangle(_objectSpread(_objectSpread({}, arrowBase(isDarkTheme)), {}, {
        offset: spacer8,
        position: 'left'
      }));

    case 'leftBottom':
      return triangle(_objectSpread(_objectSpread({}, arrowBase(isDarkTheme)), {}, {
        offset: "calc(100% - ".concat(spacer24, ")"),
        position: 'left'
      }));

    case 'right':
      return triangle(_objectSpread(_objectSpread({}, arrowBase(isDarkTheme)), {}, {
        offset: 'center',
        position: 'right'
      }));

    case 'rightTop':
      return triangle(_objectSpread(_objectSpread({}, arrowBase(isDarkTheme)), {}, {
        offset: spacer8,
        position: 'right'
      }));

    case 'rightBottom':
      return triangle(_objectSpread(_objectSpread({}, arrowBase(isDarkTheme)), {}, {
        offset: "calc(100% - ".concat(spacer24, ")"),
        position: 'right'
      }));

    default:
      return assertNever(direction);
  }
};