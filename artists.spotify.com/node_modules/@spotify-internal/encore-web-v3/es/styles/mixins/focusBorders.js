import { black, white } from '@spotify-internal/encore-foundation';
import { css } from 'styled-components';
var borderWidth = 3;
var defaultDarkThemeColor = white;
var defaultLightThemeColor = black;
export var focusTransitionFade = '200ms';
export var focusTransitionType = 'ease-in'; // applied regardless of whether we're showing a visible focus style
// to remove browser focus style

export var browserFocusReset = css(["&:focus{outline:none;}"]);
export function getFocusDimensionsAndPosition() {
  var dimension = "".concat(borderWidth * 4, "px");
  var position = "-".concat(borderWidth * 2, "px");
  return {
    dimension: dimension,
    position: position
  };
}
export var focusDimensionsAndPosition = function focusDimensionsAndPosition() {
  var _getFocusDimensionsAn = getFocusDimensionsAndPosition(),
      dimension = _getFocusDimensionsAn.dimension,
      position = _getFocusDimensionsAn.position;

  return css(["width:", ";height:", ";top:", ";left:", ";"], "calc(100% + ".concat(dimension, ")"), "calc(100% + ".concat(dimension, ")"), position, position);
};
export function focusGapBorder(isDarkTheme, borderRadius) {
  var isUsingKeyboard = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var darkThemeColor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultDarkThemeColor;
  var lightThemeColor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : defaultLightThemeColor;
  var focusStyle = isUsingKeyboard ? css(["&::after{", " content:'';display:block;position:absolute;pointer-events:none;background:transparent;border:", "px solid transparent;transition:border-color ", " ", ";border-radius:", ";box-sizing:border-box;}&:focus::after{border-color:", ";}"], focusDimensionsAndPosition(), borderWidth, focusTransitionFade, focusTransitionType, borderRadius, isDarkTheme ? darkThemeColor : lightThemeColor) : null;
  return css(["position:relative;", " ", ""], browserFocusReset, focusStyle);
}
export function focusBorderUsingProp(isDarkTheme) {
  var isUsingKeyboard = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var darkThemeColor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultDarkThemeColor;
  var lightThemeColor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultLightThemeColor;
  var focusStyle = isUsingKeyboard ? css(["&::after{border-color:", ";}"], isDarkTheme ? darkThemeColor : lightThemeColor) : null;
  return focusStyle;
}
export function focusBottomBorder(isDarkTheme) {
  var bottomBase = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var isUsingKeyboard = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var darkThemeColor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultDarkThemeColor;
  var lightThemeColor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : defaultLightThemeColor;
  var focusStyle = isUsingKeyboard ? css(["&::after{content:'';display:block;position:absolute;pointer-events:none;border-bottom:", "px solid transparent;transition:border-color ", " ease-in;width:100%;bottom:", "px;}&:focus::after{border-color:", ";}"], borderWidth, focusTransitionFade, bottomBase - borderWidth * 2, isDarkTheme ? darkThemeColor : lightThemeColor) : null;
  return css(["position:relative;", " ", ""], browserFocusReset, focusStyle);
}