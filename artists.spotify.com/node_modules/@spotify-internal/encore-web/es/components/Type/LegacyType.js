import { encoreContextStatus } from "../../contexts/EncoreContext";
import { typeStyleBody1, typeStyleBody2, typeStyleBody3, typeStyleBody4, typeStyleCta1, typeStyleCta2, typeStyleCta3, typeStyleCta4, typeStyleDisplay1, typeStyleDisplay2, typeStyleH1, typeStyleH2, typeStyleH3, typeStyleH4 } from "../../styles";
import { assertNever } from "../../typeHelpers";
import { variants } from "./Type";
export var legacyVariants = {
  display1: 'display1',
  display2: 'display2',
  heading1: 'heading1',
  heading2: 'heading2',
  heading3: 'heading3',
  heading4: 'heading4',
  body1: 'body1',
  body2: 'body2',
  body3: 'body3',
  body4: 'body4',
  cta1: 'cta1',
  cta2: 'cta2',
  cta3: 'cta3',
  cta4: 'cta4'
};
export var variantMap = {
  display1: variants.bass,
  display2: variants.forte,
  heading1: variants.altoBrio,
  heading2: variants.alto,
  heading3: variants.celloCanon,
  heading4: variants.cello,
  body1: variants.ballad,
  body2: variants.viola,
  body3: variants.finale,
  body4: variants.finale,
  cta1: variants.metronome,
  cta2: variants.metronome,
  cta3: variants.minuetBold,
  cta4: variants.finaleBold
};

function getMappedVariant(legacyVariant) {
  return variantMap[legacyVariant];
}

export function isLegacyVariant(variant) {
  return variant && legacyVariants.hasOwnProperty(variant);
}
export function legacyVariantCheck(variant, status) {
  if (!isLegacyVariant(variant)) return variant; // warn variant is outdated, find proper mapped value and return based on context status

  var unifiedVariant = getMappedVariant(variant);

  if (status === encoreContextStatus.next) {
    return unifiedVariant;
  }
  /* This warn will be made active once a code mod is availible
  eslint-disable-next-line no-console
  console.warn(
    `"${variant}" is a deprecated Typescale value that will be archived soon. Please update the variant prop to "${unifiedVariant}".`,
  );
  */


  return variant;
}
export var legacyVariantStyles = function legacyVariantStyles(variant) {
  switch (variant) {
    case 'display1':
      return typeStyleDisplay1();

    case 'display2':
      return typeStyleDisplay2();

    case 'heading1':
      return typeStyleH1();

    case 'heading2':
      return typeStyleH2();

    case 'heading3':
      return typeStyleH3();

    case 'heading4':
      return typeStyleH4();

    case 'body1':
      return typeStyleBody1();

    case 'body2':
      return typeStyleBody2();

    case 'body3':
      return typeStyleBody3();

    case 'body4':
      return typeStyleBody4();

    case 'cta1':
      return typeStyleCta1();

    case 'cta2':
      return typeStyleCta2();

    case 'cta3':
      return typeStyleCta3();

    case 'cta4':
      return typeStyleCta4();

    default:
      return assertNever(variant);
  }
};
export function legacyPaddingCheck(paddingBottom, condensed, isLegacy) {
  if (condensed) {
    if (!isLegacy)
      /* eslint-disable-next-line no-console */
      console.warn('Warning: The `condensed` prop on the `Type` component is deprecated and is no longer needed to remove bottom padding. Please remove it as it will be archived soon.');
    return '0';
  }

  return paddingBottom;
}