import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["component", "semanticColor", "condensed", "buttonSize", "hover", "active", "focus", "isUsingKeyboard", "useBrowserDefaultFocusStyle", "iconOnly", "iconLeading", "iconTrailing"],
    _excluded2 = ["component"];
import React, { useContext } from 'react';
import styled, { css } from 'styled-components';
import { BrowserDefaultFocusStyleContext } from "../../contexts/BrowserDefaultFocusStyleContext";
import { buttonStylesActive, buttonStylesBaseLegacy, buttonStylesDisabled, buttonStylesHover, cssColorValue, focusBorderWidth, focusBottomBorder, getButtonPaddingValuesLegacy, semanticColors } from "../../styles";

/**
 * Button Legacy
 * TODO: Archive in v6
 * */
export var ButtonLegacy = styled( /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _ref$component = _ref.component,
      Component = _ref$component === void 0 ? 'button' : _ref$component,
      semanticColor = _ref.semanticColor,
      condensed = _ref.condensed,
      buttonSize = _ref.buttonSize,
      hover = _ref.hover,
      active = _ref.active,
      focus = _ref.focus,
      isUsingKeyboard = _ref.isUsingKeyboard,
      useBrowserDefaultFocusStyle = _ref.useBrowserDefaultFocusStyle,
      iconOnly = _ref.iconOnly,
      iconLeading = _ref.iconLeading,
      iconTrailing = _ref.iconTrailing,
      props = _objectWithoutProperties(_ref, _excluded);

  if (iconOnly || iconLeading || iconTrailing) {
    // eslint-disable-next-line no-console
    console.warn("ButtonTertiary's `buttonLegacy` feature does not support `iconOnly`, `iconLeading`, or `iconTrailing`");
  }

  return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {
    ref: ref
  }));
})).withConfig({
  displayName: "ButtonLegacy",
  componentId: "sc-1oh201n-0"
})(["", ""], function (_ref2) {
  var _ref2$buttonSize = _ref2.buttonSize,
      buttonSize = _ref2$buttonSize === void 0 ? 'md' : _ref2$buttonSize,
      _ref2$semanticColor = _ref2.semanticColor,
      semanticColor = _ref2$semanticColor === void 0 ? 'textSubdued' : _ref2$semanticColor,
      hover = _ref2.hover,
      active = _ref2.active,
      focus = _ref2.focus,
      useBrowserDefaultFocusStyle = _ref2.useBrowserDefaultFocusStyle,
      isUsingKeyboard = _ref2.isUsingKeyboard,
      condensed = _ref2.condensed;
  var hoverStyles = css(["", " ", ""], buttonStylesHover, semanticColor === 'textSubdued' && css(["color:", ";"], cssColorValue(semanticColors.textBase)));
  var activeStyles = css(["", " color:", ";"], buttonStylesActive, cssColorValue(semanticColors.textSubdued));
  var disabledStyles = css(["", " color:", ";&::after{border-color:transparent;}"], buttonStylesDisabled, cssColorValue(semanticColors.textSubdued));

  var _getButtonPaddingValu = getButtonPaddingValuesLegacy(buttonSize),
      paddingTopBottom = _getButtonPaddingValu.paddingTopBottom,
      paddingLeftRight = _getButtonPaddingValu.paddingLeftRight;

  var focusBorderBase = paddingTopBottom + focusBorderWidth;
  return css(["", " color:", ";padding:", "px ", "px;", " &::after{width:", ";}&:hover{", "}", " &:active{", "}", " &[disabled],&[aria-disabled='true'],fieldset[disabled] &{", "}"], buttonStylesBaseLegacy(buttonSize, useBrowserDefaultFocusStyle), cssColorValue(semanticColor), paddingTopBottom, condensed ? 0 : paddingLeftRight, !useBrowserDefaultFocusStyle && focusBottomBorder(focusBorderBase, isUsingKeyboard, focus), "calc(100% - ".concat(condensed ? 0 : paddingLeftRight * 2, "px)"), hoverStyles, hover && hoverStyles, activeStyles, active && activeStyles, disabledStyles);
});
export var ButtonLegacyComponent = /*#__PURE__*/React.forwardRef(function (_ref3, ref) {
  var component = _ref3.component,
      props = _objectWithoutProperties(_ref3, _excluded2);

  var rel = props.href && props.target === '_blank' ? 'noopener noreferrer' : null;

  var _useContext = useContext(BrowserDefaultFocusStyleContext),
      useBrowserDefaultFocusStyle = _useContext.useBrowserDefaultFocusStyle;

  return /*#__PURE__*/React.createElement(ButtonLegacy, Object.assign({}, props, {
    rel: rel,
    ref: ref,
    component: !component && props.href ? 'a' : component,
    useBrowserDefaultFocusStyle: useBrowserDefaultFocusStyle
  }));
});