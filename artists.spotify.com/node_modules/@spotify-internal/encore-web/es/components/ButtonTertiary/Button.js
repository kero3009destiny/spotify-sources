import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["component", "semanticColor", "condensed", "condensedAll", "iconLeading", "iconTrailing", "iconOnly", "buttonSize", "iconSize", "hover", "active", "focus", "isUsingKeyboard", "useBrowserDefaultFocusStyle", "status"];
import React from 'react';
import styled, { css } from 'styled-components';
import { buttonHeightMinimum, buttonStylesActive, buttonStylesBase, buttonStylesDisabled, buttonStylesHover, buttonWithIconSidePadding, cssColorValue, focusBorderWidth, focusBottomBorder, getButtonPaddingValues, semanticColors } from "../../styles";
import { pxToInt } from "../../typeHelpers";
export var Button = styled( /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _ref$component = _ref.component,
      Component = _ref$component === void 0 ? 'button' : _ref$component,
      semanticColor = _ref.semanticColor,
      condensed = _ref.condensed,
      condensedAll = _ref.condensedAll,
      iconLeading = _ref.iconLeading,
      iconTrailing = _ref.iconTrailing,
      iconOnly = _ref.iconOnly,
      buttonSize = _ref.buttonSize,
      iconSize = _ref.iconSize,
      hover = _ref.hover,
      active = _ref.active,
      focus = _ref.focus,
      isUsingKeyboard = _ref.isUsingKeyboard,
      useBrowserDefaultFocusStyle = _ref.useBrowserDefaultFocusStyle,
      status = _ref.status,
      props = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {
    ref: ref
  }));
})).withConfig({
  displayName: "Button",
  componentId: "sc-1dqy6lx-0"
})(["", ""], function (_ref2) {
  var buttonSize = _ref2.buttonSize,
      _ref2$semanticColor = _ref2.semanticColor,
      semanticColor = _ref2$semanticColor === void 0 ? 'textSubdued' : _ref2$semanticColor,
      hover = _ref2.hover,
      active = _ref2.active,
      focus = _ref2.focus,
      useBrowserDefaultFocusStyle = _ref2.useBrowserDefaultFocusStyle,
      status = _ref2.status,
      isUsingKeyboard = _ref2.isUsingKeyboard,
      condensed = _ref2.condensed,
      condensedAll = _ref2.condensedAll,
      iconLeading = _ref2.iconLeading,
      iconTrailing = _ref2.iconTrailing,
      iconOnly = _ref2.iconOnly,
      iconSize = _ref2.iconSize;

  var _getButtonPaddingValu = getButtonPaddingValues(buttonSize),
      paddingTopBottom = _getButtonPaddingValu.paddingTopBottom,
      paddingLeftRight = _getButtonPaddingValu.paddingLeftRight;
  /**
   * Since the icons here are not absolute position and the icon size and font size are mismatched for 'md' buttons,
   * we have to account for the extra height added by the icons.
   * TODO: This logic will be removed once we align with mobile font size for buttons.
   */


  var mdIconBtnPaddingTopBottomComp = buttonSize === 'md' && (iconLeading || iconTrailing) ? -2 : 0;
  var paddingTopBottomComp = "".concat(pxToInt(paddingTopBottom) + mdIconBtnPaddingTopBottomComp, "px");
  var withIconPaddingLeftRight = buttonWithIconSidePadding[buttonSize];
  var iconOnlyPadding = "".concat((pxToInt(buttonHeightMinimum[buttonSize]) - pxToInt(iconSize)) / 2, "px");
  var paddingStyles = css(["", " ", " ", " ", " ", ""], !condensedAll && css(["padding-top:", ";padding-bottom:", ";"], iconOnly ? iconOnlyPadding : paddingTopBottomComp, iconOnly ? iconOnlyPadding : paddingTopBottomComp), condensedAll && css(["padding:0;"]), condensed && css(["padding-left:0;padding-right:0;"]), !condensed && !condensedAll && !iconOnly && css(["padding-left:", ";padding-right:", ";[dir='rtl'] &{padding-right:", ";padding-left:", ";}"], iconLeading ? withIconPaddingLeftRight : paddingLeftRight, iconTrailing ? withIconPaddingLeftRight : paddingLeftRight, iconLeading ? withIconPaddingLeftRight : paddingLeftRight, iconTrailing ? withIconPaddingLeftRight : paddingLeftRight), !condensed && !condensedAll && iconOnly && css(["padding-left:", ";padding-right:", ";"], iconOnlyPadding, iconOnlyPadding));
  var hoverStyles = css(["", " ", ""], buttonStylesHover, semanticColor === 'textSubdued' && css(["color:", ";"], cssColorValue(semanticColors.textBase)));
  var activeStyles = css(["", " color:", ";"], buttonStylesActive, cssColorValue(semanticColors.textSubdued));
  var disabledStyles = css(["", " color:", ";&::before{background-color:transparent;}&::after{border-color:transparent;}"], buttonStylesDisabled, cssColorValue(semanticColors.textSubdued));

  var focusStyles = function focusStyles() {
    var focusBorderBase = (condensedAll ? 0 : pxToInt(paddingTopBottomComp)) + focusBorderWidth;
    var focusBorderLength = iconOnly ? iconSize : "calc(100% - ".concat(condensed || condensedAll ? 0 : (iconLeading || iconTrailing ? pxToInt(withIconPaddingLeftRight) : pxToInt(paddingLeftRight)) * 2, "px)");
    return css(["", ";&::after{width:", ";}"], !useBrowserDefaultFocusStyle && focusBottomBorder(focusBorderBase, isUsingKeyboard, focus), focusBorderLength);
  };

  return css(["", " color:", ";", ";", " &:hover{", "}", " &:active{", "}", " ", " &[disabled],&[aria-disabled='true'],fieldset[disabled] &{", "}"], buttonStylesBase(buttonSize, useBrowserDefaultFocusStyle, status), cssColorValue(semanticColor), paddingStyles, (iconLeading || iconTrailing) && css(["display:inline-flex;align-items:center;justify-content:center;"]), hoverStyles, hover && hoverStyles, activeStyles, active && activeStyles, focusStyles, disabledStyles);
});