import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["dialogTitle", "body", "footer", "legal", "legalStrict", "className", "colorSet", "theme"];
import React, { useState } from 'react';
import { renamedPropWarning } from "../../deprecationWarnings";
import { addColorSet } from "../../styles";
import { Body } from "./Body";
import { Dialog } from "./Dialog";
import { Footer } from "./Footer";
import { Header } from "./Header";
import { Legal } from "./Legal";
import { LegalContainer } from "./LegalContainer";
import { Title } from "./Title";
export var DialogConfirmation = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var dialogTitle = _ref.dialogTitle,
      body = _ref.body,
      footer = _ref.footer,
      legal = _ref.legal,
      legalStrict = _ref.legalStrict,
      className = _ref.className,
      _ref$colorSet = _ref.colorSet,
      colorSet = _ref$colorSet === void 0 ? 'base' : _ref$colorSet,
      theme = _ref.theme,
      props = _objectWithoutProperties(_ref, _excluded);

  if (theme) {
    renamedPropWarning('theme', 'colorSet');
  }

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      hasBorder = _useState2[0],
      setHasBorder = _useState2[1];

  return /*#__PURE__*/React.createElement(Dialog, Object.assign({
    ref: ref
  }, props, {
    colorSet: colorSet,
    className: addColorSet(colorSet, className)
  }), /*#__PURE__*/React.createElement(Header, {
    colorSet: colorSet,
    hasBorder: hasBorder
  }, /*#__PURE__*/React.createElement(Title, null, dialogTitle)), /*#__PURE__*/React.createElement(Body, {
    colorSet: colorSet,
    onScroll: function onScroll(e) {
      return setHasBorder(e.target instanceof HTMLElement && e.target.scrollTop !== 0);
    }
  }, body), /*#__PURE__*/React.createElement(Footer, null, legal && /*#__PURE__*/React.createElement(LegalContainer, {
    legalStrict: legalStrict
  }, /*#__PURE__*/React.createElement(Legal, {
    colorSet: colorSet,
    legalStrict: legalStrict
  }, legal)), footer));
});
/**
* **DialogConfirmation** ![Status: Production](https://img.shields.io/badge/PRODUCTION-%2357B560|height=14)
*
* [GitHub](https://ghe.spotify.net/encore/web/tree/master/src/core/components/DialogConfirmation) | [Storybook](https://encore-web.spotify.net/?path=/story/components-dialog-dialogconfirmation--default) | [Encore](https://encore.spotify.net/web/components/dialog?format=figma-figma#dialogconfirmation) | [Figma](https://www.figma.com/file/bnQXqGkLeiTlbk8JXGDcsX/Encore-Web---Light-Theme-Toolkit?node-id=286:370) |
*
* DialogConfirmation requires that the user confirm the information and uses a primary button.
*
* @example
* () => (
*  <DialogConfirmation
*    dialogTitle="Title"
*    aria-label="Title"
*    aria-describedby="dialogBody"
*    body={
*      <div id="dialogBody">
*        <Type as="p">
*          Aenean lacinia bibendum nulla sed consectetur. Cras justo odio, dapibus ac facilisis in,
*          egestas eget quam. Duis mollis, est non commodo luctus.
*        </Type>
*        <Type as="p" condensed>
*          Etiam porta sem malesuada magna mollis euismod. Lorem ipsum dolor sit amet, consectetur
*          adipiscing elit.
*        </Type>
*      </div>
*    }
*    footer={
*      <div>
*        <ButtonTertiary buttonSize={ButtonTertiary.sm} condensed>
*          Cancel
*        </ButtonTertiary>
*        <ButtonPrimary buttonSize={ButtonTertiary.sm}>Accept</ButtonPrimary>
*      </div>
*    }
*  />
*);
*
*/

export default DialogConfirmation;