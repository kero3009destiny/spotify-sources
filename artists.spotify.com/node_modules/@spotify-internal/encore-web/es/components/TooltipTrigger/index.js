import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["children", "timeout", "onShow", "onHide", "isTouch", "withPortal"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { useEffect } from 'react';
import styled from 'styled-components';
import { overlayDirections } from "../../styles/mixins/overlays";
import { OverlayTrigger } from "../OverlayTrigger";
var TriggerContainer = styled.span.withConfig({
  displayName: "TooltipTrigger__TriggerContainer",
  componentId: "sc-13ojzs2-0"
})(["display:inline-flex;"]);
var TooltipTriggerComponent = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      _ref$timeout = _ref.timeout,
      timeout = _ref$timeout === void 0 ? 2000 : _ref$timeout,
      _ref$onShow = _ref.onShow,
      onShow = _ref$onShow === void 0 ? function () {} : _ref$onShow,
      _ref$onHide = _ref.onHide,
      onHide = _ref$onHide === void 0 ? function () {} : _ref$onHide,
      isTouch = _ref.isTouch,
      withPortal = _ref.withPortal,
      props = _objectWithoutProperties(_ref, _excluded);

  var triggerRef = React.useRef(null);
  var timeoutId = null;

  var handleOnHide = function handleOnHide(e) {
    onHide(e);

    if (timeoutId) {
      window.clearTimeout(timeoutId);
      timeoutId = null;
    }
  };

  var handleOnTouch = function handleOnTouch(e) {
    e.persist(); // re: https://reactjs.org/docs/events.html#event-pooling

    if (timeoutId) {
      handleOnHide(e);
    } else {
      onShow(e);
      timeoutId = window.setTimeout(function () {
        return handleOnHide(e);
      }, timeout);
    }
  };

  var handleKeyDown = function handleKeyDown(e) {
    var escape = 27;

    if (e.which === escape) {
      onHide(e);
    }
  };

  useEffect(function () {
    return function () {
      if (timeoutId) {
        window.clearTimeout(timeoutId);
      }
    };
  }, [timeoutId]);

  if (isTouch) {
    /* eslint-disable-next-line no-console */
    console.warn('Warning: The `isTouch` prop is deprecated and will be removed soon. Tooltip should only be used on desktop, not mobile or touch devices.');
  }

  if (timeout !== 2000) {
    /* eslint-disable-next-line no-console */
    console.warn('Warning: The `timeout` prop is deprecated and will be removed soon. Tooltip should only be used on desktop, not mobile or touch devices.');
  }

  var onTrigger = !isTouch ? onShow : undefined;
  var offTrigger = !isTouch ? handleOnHide : undefined;
  return /*#__PURE__*/React.createElement(OverlayTrigger, Object.assign({}, props, {
    withPortal: withPortal,
    ref: withPortal ? ref || triggerRef : null,
    closeOverlay: offTrigger
  }), /*#__PURE__*/React.createElement(TriggerContainer, {
    onClick: isTouch ? handleOnTouch : undefined,
    onMouseOver: onTrigger,
    onMouseOut: offTrigger,
    onFocus: onTrigger,
    onBlur: offTrigger,
    onKeyDown: handleKeyDown
  }, children));
});

var tooltipTriggerHelpers = _objectSpread({}, overlayDirections);
/**
* **TooltipTrigger** ![Status: Production](https://img.shields.io/badge/PRODUCTION-%2357B560|height=14)
*
* [GitHub](https://ghe.spotify.net/encore/web/tree/master/src/core/components/TooltipTrigger) | [Storybook](https://encore-web.spotify.net/?path=/story/components-tooltip-tooltiptrigger--default) | [Encore](https://encore.spotify.net/web/components/non-visual?format=figma-figma#tooltiptrigger) | [Figma](https://www.figma.com/file/bnQXqGkLeiTlbk8JXGDcsX/Encore-Web---Light-Theme-Toolkit?node-id=511:65) |
*
* null
*
* @example
* () => {
*  const [show, toggleShow] = useState(false);
*
*  return (
*    <TooltipTrigger
*      overlay={show && <Tooltip id="notifications">Notifications</Tooltip>}
*      placement={TooltipTrigger.right}
*      onShow={() => toggleShow(true)}
*      onHide={() => toggleShow(false)}
*    >
*      <ButtonTertiary
*        condensedAll
*        buttonSize="lg"
*        iconOnly={Experimental__IconNotifications}
*        aria-labelledby="notifications"
*      />
*    </TooltipTrigger>
*  );
*};
*
*/


export var TooltipTrigger = Object.assign(TooltipTriggerComponent, tooltipTriggerHelpers);
export default TooltipTrigger;