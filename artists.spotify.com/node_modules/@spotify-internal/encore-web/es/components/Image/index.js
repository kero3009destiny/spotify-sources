import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["alt", "onLoad"];
import React, { useRef, useState } from 'react';
import StyledImage, { PlaceholderImage as DefaultPlaceholderImage, PlaceholderImageWrapper, StyledLazyImage as DefaultStyledLazyImage } from "./Image";
import { useInView as defaultUseInView } from "./useInView";
export function defineLazyImage() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$StyledLazyImage = _ref.StyledLazyImage,
      StyledLazyImage = _ref$StyledLazyImage === void 0 ? DefaultStyledLazyImage : _ref$StyledLazyImage,
      _ref$PlaceholderImage = _ref.PlaceholderImage,
      PlaceholderImage = _ref$PlaceholderImage === void 0 ? DefaultPlaceholderImage : _ref$PlaceholderImage,
      _ref$useInView = _ref.useInView,
      useInView = _ref$useInView === void 0 ? defaultUseInView : _ref$useInView;

  return function LazyImage(_ref2) {
    var _ref2$alt = _ref2.alt,
        alt = _ref2$alt === void 0 ? '' : _ref2$alt,
        _onLoad = _ref2.onLoad,
        props = _objectWithoutProperties(_ref2, _excluded);

    var imageRef = useRef(null);

    var _useState = useState(false),
        _useState2 = _slicedToArray(_useState, 2),
        inView = _useState2[0],
        setInView = _useState2[1];

    var _useState3 = useState(false),
        _useState4 = _slicedToArray(_useState3, 2),
        isLoaded = _useState4[0],
        setIsLoaded = _useState4[1];

    var lazyImage = /*#__PURE__*/React.createElement(StyledLazyImage, Object.assign({}, props, {
      alt: alt,
      ref: imageRef,
      onLoad: function onLoad(event) {
        setIsLoaded(true);

        if (_onLoad) {
          _onLoad(event);
        }
      },
      isLoaded: isLoaded
    }));
    var placeholder = /*#__PURE__*/React.createElement(PlaceholderImageWrapper, props, /*#__PURE__*/React.createElement(PlaceholderImage, {
      alt: alt,
      ref: imageRef,
      src: props.placeholderSrc
    }));
    useInView(imageRef, function () {
      setInView(true);
    });

    if (inView) {
      return /*#__PURE__*/React.createElement(React.Fragment, null, !isLoaded && placeholder, lazyImage);
    }

    return placeholder;
  };
}
var LazyImage = defineLazyImage();
export var Image = function Image(_ref3) {
  var props = _extends({}, _ref3);

  if ('placeholderSrc' in props && props.placeholderSrc) {
    return /*#__PURE__*/React.createElement(LazyImage, props);
  }

  return /*#__PURE__*/React.createElement(StyledImage, props);
};
/**
* **Image** ![Status: Production](https://img.shields.io/badge/PRODUCTION-%2357B560|height=14)
*
* [GitHub](https://ghe.spotify.net/encore/web/tree/master/src/core/components/Image) | [Storybook](https://encore-web.spotify.net/?path=/story/components-image--default) | [Encore](https://encore.spotify.net/web/components/image) | [Figma](https://www.figma.com/file/bnQXqGkLeiTlbk8JXGDcsX/Encore-Web---Light-Theme-Toolkit?node-id=265:13) |
*
* Use Image to render a simple image by using a link to its location.
*
* @example
* () => (
*  <Image src="https://i.scdn.co/image/54470e5e056b93d7022076960d3a6b2267ece226" alt="Vacationer" />
*);
*
*/

export default Image;