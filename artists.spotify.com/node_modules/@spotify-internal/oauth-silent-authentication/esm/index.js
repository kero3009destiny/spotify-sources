var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { fetchAuthorized } from './fetchAuthorized';
import { interactiveLogin } from './login';
import { getNewToken } from './getNewToken';
import { interactiveLogout } from './logout';
import { getAccessTokenFromMemory } from './getAccessTokenFromMemory';
import { getLoginUrl } from './getLoginUrl';
import validate from './utils/jwt';
class Auth {
    constructor(clientConfig, authServerConfig) {
        this._clientConfig = clientConfig;
        this._authServerConfig = authServerConfig;
    }
    fetch(input, init) {
        return fetchAuthorized(input, init, this._clientConfig, this._authServerConfig);
    }
    login(redirectUri) {
        return interactiveLogin(this._authServerConfig, this._clientConfig, redirectUri);
    }
    logout(redirectUri) {
        return interactiveLogout(this._authServerConfig, redirectUri);
    }
    getLoginUrl(redirectUri) {
        return getLoginUrl(this._authServerConfig, this._clientConfig, redirectUri);
    }
    tokenProvider() {
        return __awaiter(this, void 0, void 0, function* () {
            const token = yield getNewToken(this._clientConfig, this._authServerConfig);
            return [token.access_token, token.expires_in];
        });
    }
    getToken() {
        return __awaiter(this, void 0, void 0, function* () {
            const accessTokenFromMemory = getAccessTokenFromMemory();
            if (accessTokenFromMemory) {
                return accessTokenFromMemory;
            }
            const { access_token } = yield getNewToken(this._clientConfig, this._authServerConfig);
            return access_token;
        });
    }
    getIdToken() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._clientConfig.scopes.indexOf('openid') === -1) {
                throw {
                    error: 'client_error',
                    error_description: 'openid scope is required to get an id_token',
                };
            }
            const token = yield getNewToken(this._clientConfig, this._authServerConfig);
            if (!token.id_token) {
                throw {
                    error: 'unknown_error',
                    error_description: 'id_token is empty',
                };
            }
            return token.id_token;
        });
    }
    getUserInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            const idToken = yield this.getIdToken();
            const idTokenBody = yield validate(idToken, this._clientConfig, this._authServerConfig);
            const userInfo = {
                subject: idTokenBody.sub,
                email: idTokenBody.email,
            };
            if (idTokenBody.preferred_username) {
                userInfo.profile = {
                    username: idTokenBody.preferred_username,
                    picture: idTokenBody.picture,
                    displayName: idTokenBody.name,
                };
            }
            return userInfo;
        });
    }
}
export const createAuth = (clientConfig, authServerConfig) => {
    const serverConfig = authServerConfig || {
        url: window.location.hostname.endsWith('spotify.net')
            ? 'https://accounts.spotify.net'
            : 'https://accounts.spotify.com',
    };
    return new Auth(clientConfig, serverConfig);
};
//# sourceMappingURL=index.js.map