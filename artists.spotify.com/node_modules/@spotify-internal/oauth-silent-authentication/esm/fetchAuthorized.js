var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { getNewToken } from './getNewToken';
import { getAccessTokenFromMemory } from './getAccessTokenFromMemory';
import { MetricTypes } from '@spotify-internal/semantic-metrics';
import { MetricActions, defaultTags, sendMetric } from './utils/metricsHelper';
const getNewAccessToken = (clientConfig, authServerConfig) => __awaiter(void 0, void 0, void 0, function* () {
    const token = yield getNewToken(clientConfig, authServerConfig);
    return token.access_token;
});
const doFetch = (input, init, accessToken) => __awaiter(void 0, void 0, void 0, function* () {
    const headers = Object.assign(Object.assign({}, init.headers), { Authorization: `Bearer ${accessToken}` });
    return fetch(input, Object.assign(Object.assign({}, init), { headers }));
});
const fetchAuthorized = (input, init, clientConfig, authServerConfig) => __awaiter(void 0, void 0, void 0, function* () {
    sendMetric({
        metric_type: MetricTypes.COUNTER,
        what: MetricActions.FETCH_AUTHORIZED,
        value: 1,
        tags: Object.assign({ clientId: clientConfig.clientId, serverUrl: authServerConfig.url }, defaultTags),
    });
    const accessToken = getAccessTokenFromMemory() ||
        (yield getNewAccessToken(clientConfig, authServerConfig));
    const response = yield doFetch(input, init, accessToken);
    if (response.status === 401) {
        return yield doFetch(input, init, yield getNewAccessToken(clientConfig, authServerConfig));
    }
    return response;
});
export { fetchAuthorized };
//# sourceMappingURL=fetchAuthorized.js.map