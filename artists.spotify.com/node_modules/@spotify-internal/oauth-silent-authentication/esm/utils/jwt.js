var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import IdTokenVerifier from 'idtoken-verifier';
import getOAuthServerMetadata from '../config/getOAuthServerMetadata';
export default function validate(token, clientConfig, authServerConfig) {
    return __awaiter(this, void 0, void 0, function* () {
        const serverMetadata = getOAuthServerMetadata(authServerConfig);
        const verifier = new IdTokenVerifier({
            issuer: serverMetadata.issuer,
            audience: clientConfig.clientId,
            jwksURI: serverMetadata.jwksUrl,
            jwksCache: new Map(),
        });
        return yield new Promise((resolve, reject) => {
            verifier.verify(token, '', (err, payload) => {
                if (err) {
                    return reject('Invalid token');
                }
                return resolve(payload);
            });
        });
    });
}
//# sourceMappingURL=jwt.js.map