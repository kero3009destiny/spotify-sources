var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { MetricTypes } from '@spotify-internal/semantic-metrics';
import generatePkce from '../utils/generatePkce';
import generateRandomString from '../utils/generateRandomString';
import getAuthCodeViaIframe from './util/getAuthCodeViaIframe';
import handleAuthCodeError from './util/handleAuthCodeError';
import { defaultTags, MetricActions, sendMetric } from '../utils/metricsHelper';
const getAuthCodeInfo = (clientConfig, authServerConfig) => __awaiter(void 0, void 0, void 0, function* () {
    const pkce = generatePkce();
    const state = generateRandomString(32);
    const authorizeRequest = {
        clientId: clientConfig.clientId,
        redirectUri: window.location.origin,
        scopes: clientConfig.scopes,
        codeChallenge: pkce.codeChallenge,
        state: state,
        responseMode: 'web_message',
        prompt: 'none',
        responseType: 'code',
    };
    const authCodeResult = yield getAuthCodeViaIframe(authorizeRequest, authServerConfig);
    if ('error' in authCodeResult) {
        sendMetric({
            metric_type: MetricTypes.COUNTER,
            what: MetricActions.AUTH_CODE_ERROR,
            value: 1,
            tags: Object.assign({ clientId: clientConfig.clientId, error: authCodeResult.error, serverUrl: authServerConfig.url }, defaultTags),
        });
        throw handleAuthCodeError(authCodeResult);
    }
    return {
        code: authCodeResult.code,
        codeVerifier: pkce.codeVerifier,
        redirectUri: window.location.origin,
    };
});
export default getAuthCodeInfo;
//# sourceMappingURL=getAuthCodeInfo.js.map