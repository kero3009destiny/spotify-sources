var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import withTimeout from '../../utils/timeout-promise';
import getOAuthServerMetadata from '../../config/getOAuthServerMetadata';
import buildAuthorizationUrl from '../../utils/buildAuthorizationUrl';
import generateRandomString from '../../utils/generateRandomString';
const AUTH_CODE_IFRAME_TIMEOUT_MS = 5000;
const getAuthCodeViaIframe = (authorizeRequest, authServerConfig) => __awaiter(void 0, void 0, void 0, function* () {
    const iframeId = generateRandomString(32);
    let iframe = document.getElementById(iframeId);
    if (!iframe) {
        iframe = document.createElement('iframe');
        iframe.setAttribute('id', iframeId);
        iframe.setAttribute('width', '0');
        iframe.setAttribute('height', '0');
        document.body.appendChild(iframe);
    }
    const authCodeUrl = buildAuthorizationUrl(authorizeRequest, authServerConfig);
    iframe.setAttribute('src', authCodeUrl);
    const { issuer } = getOAuthServerMetadata(authServerConfig);
    const authCodeRequest = new Promise((resolve, reject) => {
        function messageListener(evt) {
            if (evt.origin !== issuer)
                return;
            if (!evt.data.type)
                return;
            if (evt.data.type === 'authorization_response') {
                const source = evt.source;
                if (source === null) {
                    return;
                }
                if (evt.source !== iframe.contentWindow) {
                    return;
                }
                const response = evt.data.response;
                if (authorizeRequest.state !== response.state) {
                    const error = {
                        error: 'unknown_error',
                        error_description: "State doesn't match. Malicious request",
                    };
                    reject(error);
                }
                else
                    resolve(response);
            }
            window.removeEventListener('message', messageListener);
        }
        window.addEventListener('message', messageListener, false);
    });
    return withTimeout(authCodeRequest, AUTH_CODE_IFRAME_TIMEOUT_MS, () => {
        const error = {
            error: 'timeout',
            error_description: `Timeout when waiting for auth code from iframe: ${authCodeUrl}`,
        };
        return error;
    }).finally(() => {
        if (iframe) {
            document.body.removeChild(iframe);
        }
    });
});
export default getAuthCodeViaIframe;
//# sourceMappingURL=getAuthCodeViaIframe.js.map