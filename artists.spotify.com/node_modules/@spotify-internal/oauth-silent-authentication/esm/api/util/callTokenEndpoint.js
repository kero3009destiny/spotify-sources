var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import getOAuthServerMetadata from '../../config/getOAuthServerMetadata';
const callTokenEndpoint = (authServerConfig, body) => __awaiter(void 0, void 0, void 0, function* () {
    const { tokenEndpoint } = getOAuthServerMetadata(authServerConfig);
    const response = yield fetch(tokenEndpoint, {
        method: 'POST',
        headers: {
            Accept: 'application/json',
        },
        body,
    });
    switch (response.status) {
        case 200:
        case 400:
            return yield response.json();
        case 503:
        case 429:
            throw {
                error: 'unavailable',
                error_description: `${tokenEndpoint} returned ${response.status}`,
            };
        default:
            throw {
                error: 'unknown_error',
                error_description: `${tokenEndpoint} returned ${response.status}`,
            };
    }
});
export default callTokenEndpoint;
//# sourceMappingURL=callTokenEndpoint.js.map