var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { MetricTypes } from '@spotify-internal/semantic-metrics';
import callTokenEndpoint from './util/callTokenEndpoint';
import handleTokenError from './util/handleTokenError';
import { defaultTags, MetricActions, sendMetric } from '../utils/metricsHelper';
const getAccessTokenRefreshToken = (request, authServerConfig) => __awaiter(void 0, void 0, void 0, function* () {
    const tokenResult = yield callTokenEndpoint(authServerConfig, new URLSearchParams({
        grant_type: 'refresh_token',
        client_id: request.clientId,
        refresh_token: request.refreshToken,
        serverUrl: authServerConfig.url,
    }));
    if ('error' in tokenResult) {
        sendMetric({
            metric_type: MetricTypes.COUNTER,
            what: MetricActions.ACCESS_TOKEN_ERROR,
            value: 1,
            tags: Object.assign({ error: tokenResult.error, clientId: request.clientId, serverUrl: authServerConfig.url }, defaultTags),
        });
        throw handleTokenError(tokenResult);
    }
    return tokenResult;
});
export default getAccessTokenRefreshToken;
//# sourceMappingURL=getAccessTokenRefreshToken.js.map