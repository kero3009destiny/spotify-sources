var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import getAccessTokenRefreshToken from './api/getAccessTokenRefreshToken';
import getAccessTokenAuthorizationCode from './api/getAccessTokenAuthorizationCode';
import getAuthCodeInfo from './api/getAuthCodeInfo';
const tokenState = {
    refreshToken: '',
    expiryDate: undefined,
    accessToken: '',
};
Object.seal(tokenState);
function persistState(token) {
    tokenState.accessToken = token.access_token;
    const currentTime = new Date();
    currentTime.setSeconds(token.expires_in);
    tokenState.expiryDate = currentTime.getTime();
}
const getNewToken = (clientConfig, authServerConfig) => __awaiter(void 0, void 0, void 0, function* () {
    const { clientId } = clientConfig;
    if (tokenState.refreshToken) {
        const token = yield getAccessTokenRefreshToken({
            clientId,
            refreshToken: tokenState.refreshToken,
        }, authServerConfig);
        persistState(token);
        return token;
    }
    const codeInfo = yield getAuthCodeInfo(clientConfig, authServerConfig);
    const token = yield getAccessTokenAuthorizationCode(Object.assign({ clientId }, codeInfo), authServerConfig);
    persistState(token);
    return token;
});
export { getNewToken, tokenState };
//# sourceMappingURL=getNewToken.js.map