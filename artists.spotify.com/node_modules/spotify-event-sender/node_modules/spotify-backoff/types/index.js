'use strict';

/**
 * @typedef {string} strategyAlg Type of algorithm to use, one of, default
 *     'lin':
 *
 * deprecated since v0.6.1, replaced with strategyCurve.
 * ex:
 *     'static': Static 1 * b
 *     'lin'   : Linear n * b
 *     'exp'   : Exponential (e ^ n) * b
 *     'log'   : Logarithmic (log(n)) * b
 *         where n = number of retries
 *               b = baseTime (see below)
 * @type {string}
 */

/**
 * @typedef {string} strategyCurve Shape of the curve to use, one of, default
 *     'lin':
 * ex:
 *     'static'      : Static 1 * b
 *     'linear'      : Linear n * b
 *     'exponential' : Exponential (e ^ n) * b
 *     'logarithmic' : Logarithmic (log(n)) * b
 *         where n = number of retries
 *               b = baseTime (see below)
 * @type {string}
 */

/**
 * The default options used when initializing backoff. Values overridden if
 *     supplied to the constructor.
 *
 * @typedef {module:spotify-debounce/types/counterOptions}
 * @property {module:spotify-debounce/types/strategyAlg} algo Algorithm to use
 *     - deprecated since v0.6.1, replaced with curve.
 * @property {number} baseTime The minimum/base interval in ms, default 200.
 * @property {?number=} ceiling The ceiling property defines a max duration
 *     that does not terminate the backoff.
 *     Once this value is reached the backing off stops but the retrying
 *     continues with this value used as time between calls. defaults
 *     to unset.
 * @property {module:spotify-debounce/types/strategyAlg} curve Curve to use.
 */

/**
 * The default options used when initializing a Counter instance. Values in
 *     this object are overridden if supplied to the constructor.
 *
 * @type {module:spotify-debounce/types/counterOptions}
 */
exports.counterDefaults = {
  algo: 'lin', /* deprecated */
  baseTime: 200,
  ceiling: 0,
  curve: 'linear'
};

/**
 * @name module:spotify-backoff/types/backoff-options
 * @typedef {module:spotify-debounce/types/backoffOptions}
 * @property {module:spotify-debounce/types/strategyAlg} algo Algorithm to use
  *     - deprecated since v0.6.1, replaced with curve.
 * @property {?boolean=} backoffInitial True if the first call should be backed
 *     off.
 * @property {?number=} baseTime The minimum/base interval, default 200(ms).
 * @property {?number=} ceiling The ceiling property defines a max duration
 *     that does not terminate the backoff.
 *     Once this value is reached the backing off stops but the retrying
 *     continues with this value used as time between calls. defaults
 *     to unset.
 * @property {module:spotify-debounce/types/strategyAlg} curve Curve to use.
 * @property {?number=} maxDuration The longest allowed time for the retries to
 *     run, default Infinity.
 * @property {?number=} maxTime The longest time to allow passing between two
 *     retries, default Infinity.
 * @property {?number=} maxRetries The maximum number of retries, default
 *     Infinity.
 * @property {?function=} retryPredicate A function that indicates if the retry
 *     should happen, default noop.
 */

/**
 * The default options used when initializing a Backoff instance. Values in
 *     this object are overridden if supplied to the constructor.
 *
 * @type {module:spotify-backoff/types/backoff-options}
 */
exports.backoffDefaults = {
  algo: 'lin', /* deprecated */
  backoffInitial: false,
  baseTime: 200,
  ceiling: 0,
  curve: 'linear',
  maxDuration: Infinity,
  maxRetries: Infinity,
  maxTime: Infinity,
  retryPredicate: function() { return true; }
};

