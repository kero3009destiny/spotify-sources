'use strict';

var EventSender = require('./event_sender');
var createTransport = require('spotify-transport');
var endpointsProvider =
  require('spotify-transport/providers/endpoints/xresolve');
var Event = require('spotify-transport/types').Event;
var Promise = require('spotify-promise-plus');

/**
 * Create a logger instance.
 * Creates a transport for use internally.
 *
 * @param {module:spotify-event-sender/types.LoggerConfig} opts The logger
 *     options.
 * @return {EventSender} An EventSender instance.
 */
function createLogger(opts) {
  var options = opts || {};

  var provider = endpointsProvider(options.xresolve);

  var transport = createTransport({
    providers: {
      endpoints: function(publicTransport) {
        return provider(publicTransport).then(function(endpoints) {
          var override = options.endpoints;
          if (override) {
            for (var key in override) {
              if (override.hasOwnProperty(key) && override[key]) {
                endpoints[key] = override[key];
              }
            }
          }
          endpoints.dealer = null;
          return endpoints;
        }).catch(function() {
          return {
            webgate: 'https://spclient.wg.spotify.com'
          };
        });
      },
      token: function() {
        return new Promise(function(resolve) {
          options.getToken(function(token, optTTL) {
            if (typeof optTTL !== 'undefined') {
              resolve([token, optTTL]);
              return;
            }
            resolve(token);
          });
        });
      }
    }
  });

  transport.on(Event.TRANSPORT_CONNECTED, function() {
    if (!options.noAuthentication) {
      transport.authenticate();
    }
  });

  options.transport = transport;
  var logger = EventSender.create(options);

  transport.connect();
  return logger;
}
module.exports = createLogger;
