//
// Overlays: Dialogs, Tooltips, Popovers, etc
// --------------------------------------------------
import { gray10, gray20, gray95, screenSmMin, spacer4, spacer8, spacer12, spacer24, spacer48, white } from '@spotify-internal/encore-foundation';
import { css } from 'styled-components';
import { fontWeightBook, zIndexDialog } from "../../styles";
import { assertNever } from "../../typeHelpers";
import { cssColorValue, defaultTheme, semanticColors } from "../semantic-theme";
import { triangle } from "./triangle";
export var overlayBoxShadow = "0 ".concat(spacer4, " ").concat(spacer12, " 0 rgba(0, 0, 0, 0.2)");
export var overlayDirections = {
  top: 'top',
  topRight: 'topRight',
  topLeft: 'topLeft',
  left: 'left',
  leftTop: 'leftTop',
  leftBottom: 'leftBottom',
  bottom: 'bottom',
  bottomLeft: 'bottomLeft',
  bottomRight: 'bottomRight',
  right: 'right',
  rightTop: 'rightTop',
  rightBottom: 'rightBottom'
};

var overlayBase = function overlayBase(isDarkTheme) {
  return css(["background:", ";border-radius:", ";box-shadow:", ";color:", ";font-weight:", ";text-align:left;"], isDarkTheme ? gray20 : white, spacer8, overlayBoxShadow, isDarkTheme ? gray95 : gray10, fontWeightBook);
}; // TODO: rename to overlay after complete migration of components using original overlay


export var overlayColorTheme = function overlayColorTheme(_ref) {
  var _ref$maxWidth = _ref.maxWidth,
      maxWidth = _ref$maxWidth === void 0 ? '296px' : _ref$maxWidth,
      _ref$colorSet = _ref.colorSet,
      colorSet = _ref$colorSet === void 0 ? 'base' : _ref$colorSet;
  return css(["background:", ";color:", ";border-radius:", ";box-shadow:", ";font-weight:", ";text-align:left;cursor:default;display:inline-block;max-width:", ";position:relative;"], cssColorValue(semanticColors.backgroundElevatedBase, defaultTheme[colorSet].background.elevated.base), cssColorValue(semanticColors.textBase, defaultTheme[colorSet].text.base), spacer8, overlayBoxShadow, fontWeightBook, maxWidth);
};
export var dialog = function dialog(_ref2) {
  var colorSet = _ref2.colorSet;
  return css(["", ";display:flex;flex-direction:column;max-height:90vh;z-index:", ";@media (min-width:", "){max-height:80vh;}"], overlayColorTheme({
    maxWidth: "calc(100% - ".concat(spacer48, ")"),
    colorSet: colorSet
  }), zIndexDialog, screenSmMin);
};
export var overlay = function overlay(_ref3) {
  var _ref3$maxWidth = _ref3.maxWidth,
      maxWidth = _ref3$maxWidth === void 0 ? '296px' : _ref3$maxWidth,
      isDarkTheme = _ref3.isDarkTheme;
  return css(["", ";cursor:default;display:inline-block;max-width:", ";position:relative;"], overlayBase(isDarkTheme), maxWidth);
};
export var overlayArrow = function overlayArrow(direction) {
  switch (direction) {
    case 'top':
      return triangle({
        offset: 'center',
        position: 'top'
      });

    case 'topLeft':
      return triangle({
        offset: spacer8,
        position: 'top'
      });

    case 'topRight':
      return triangle({
        offset: "calc(100% - ".concat(spacer24, ")"),
        position: 'top'
      });

    case 'bottom':
      return triangle({
        offset: 'center',
        position: 'bottom'
      });

    case 'bottomLeft':
      return triangle({
        offset: spacer8,
        position: 'bottom'
      });

    case 'bottomRight':
      return triangle({
        offset: "calc(100% - ".concat(spacer24, ")"),
        position: 'bottom'
      });

    case 'left':
      return triangle({
        offset: 'center',
        position: 'left'
      });

    case 'leftTop':
      return triangle({
        offset: spacer8,
        position: 'left'
      });

    case 'leftBottom':
      return triangle({
        offset: "calc(100% - ".concat(spacer24, ")"),
        position: 'left'
      });

    case 'right':
      return triangle({
        offset: 'center',
        position: 'right'
      });

    case 'rightTop':
      return triangle({
        offset: spacer8,
        position: 'right'
      });

    case 'rightBottom':
      return triangle({
        offset: "calc(100% - ".concat(spacer24, ")"),
        position: 'right'
      });

    default:
      return assertNever(direction);
  }
};