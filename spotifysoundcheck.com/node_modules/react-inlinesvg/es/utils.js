var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import once from 'once';

export var supportsInlineSVG = once(function () {
  /* istanbul ignore next */
  if (!document) {
    return false;
  }

  var div = document.createElement('div');
  div.innerHTML = '<svg />';
  return div.firstChild && div.firstChild.namespaceURI === 'http://www.w3.org/2000/svg';
});

export var isSupportedEnvironment = once(function () {
  return supportsInlineSVG() && typeof window !== 'undefined' && window !== null ? window.XMLHttpRequest || window.XDomainRequest : false;
});

export var randomString = function randomString() {
  var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;

  var letters = 'abcdefghijklmnopqrstuvwxyz';
  var numbers = '1234567890';
  var charset = letters + letters.toUpperCase() + numbers;

  var randomCharacter = function randomCharacter(array) {
    return array[Math.floor(Math.random() * array.length)];
  };

  var R = '';
  for (var i = 0; i < length; i++) {
    R += randomCharacter(charset);
  }
  return R;
};

export var uniquifySVGIDs = function () {
  var mkAttributePattern = function mkAttributePattern(attr) {
    return '(?:(?:\\s|\\:)' + attr + ')';
  };

  var idPattern = new RegExp('(?:(' + mkAttributePattern('id') + ')="([^"]+)")|(?:(' + mkAttributePattern('href') + '|' + mkAttributePattern('role') + '|' + mkAttributePattern('arcrole') + ')="\\#([^"]+)")|(?:="url\\(\\#([^\\)]+)\\)")|(?:url\\(\\#([^\\)]+)\\))', 'g');

  return function (svgText, svgID, baseURL) {
    var uniquifyID = function uniquifyID(id) {
      return id + '___' + svgID;
    };

    return svgText.replace(idPattern, function (m, p1, p2, p3, p4, p5, p6) {
      //eslint-disable-line consistent-return
      /* istanbul ignore else */
      if (p2) {
        return p1 + '="' + uniquifyID(p2) + '"';
      }

      if (p4) {
        return p3 + '="' + baseURL + '#' + uniquifyID(p4) + '"';
      }

      if (p5) {
        return '="url(' + baseURL + '#' + uniquifyID(p5) + ')"';
      }

      if (p6) {
        return 'url(' + baseURL + '#' + uniquifyID(p6) + ')';
      }
    });
  };
}();

var InlineSVGError = function (_Error) {
  _inherits(InlineSVGError, _Error);

  function InlineSVGError(message) {
    var _ret;

    _classCallCheck(this, InlineSVGError);

    var _this = _possibleConstructorReturn(this, (InlineSVGError.__proto__ || Object.getPrototypeOf(InlineSVGError)).call(this));

    _this.name = 'InlineSVGError';
    _this.isSupportedBrowser = true;
    _this.isConfigurationError = false;
    _this.isUnsupportedBrowserError = false;
    _this.message = message;

    return _ret = _this, _possibleConstructorReturn(_this, _ret);
  }

  return InlineSVGError;
}(Error);

var createError = function createError(message, attrs) {
  var err = new InlineSVGError(message);

  return _extends({}, err, attrs);
};

export var unsupportedBrowserError = function unsupportedBrowserError(message) {
  var newMessage = message;

  /* istanbul ignore else */
  if (!newMessage) {
    newMessage = 'Unsupported Browser';
  }

  return createError(newMessage, {
    isSupportedBrowser: false,
    isUnsupportedBrowserError: true
  });
};

export var configurationError = function configurationError(message) {
  return createError(message, {
    isConfigurationError: true
  });
};