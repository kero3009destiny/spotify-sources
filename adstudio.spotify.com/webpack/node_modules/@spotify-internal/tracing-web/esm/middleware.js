import { Tags, globalTracer } from 'opentracing';
import { extractFromRequest } from './propagation/extract';
export const tracingMiddleware = ({ tracer = globalTracer(), predicate = () => true, additionalTags = {}, } = {}) => {
    return (req, res, next) => {
        if (!predicate(req)) {
            next === null || next === void 0 ? void 0 : next();
            return;
        }
        const parentSpan = extractFromRequest(req);
        const span = tracer.startSpan('Recv.request', {
            childOf: parentSpan || undefined,
        });
        span.addTags(additionalTags);
        span.addTags({
            [Tags.HTTP_METHOD]: req.method,
            [Tags.HTTP_URL]: req.url,
        });
        if (process.env.SPOTIFY_POD) {
            span.addTags({
                'spotify.pod': process.env.SPOTIFY_POD,
            });
        }
        const finish = () => {
            span.addTags({
                [Tags.HTTP_STATUS_CODE]: res.statusCode,
            });
            if (res.statusCode >= 500) {
                span.addTags({
                    [Tags.ERROR]: true,
                    [Tags.SAMPLING_PRIORITY]: 1,
                });
            }
            span.finish();
        };
        res.once('close', finish);
        res.once('finish', finish);
        req.span = span;
        next === null || next === void 0 ? void 0 : next();
    };
};
//# sourceMappingURL=middleware.js.map