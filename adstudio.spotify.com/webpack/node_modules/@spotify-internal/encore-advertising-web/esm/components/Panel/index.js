var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import styled from 'styled-components';
import { failure as failureColor, gray60, gray85, spacer4, spacer16, warning as warningColor, } from '@spotify-internal/encore-web';
import ThemedButtonTertiary from './ThemedButtonTertiary';
const Container = styled.div `
  align-items: center;
  border-radius: ${spacer4};
  border: ${props => {
    if (props.shadow)
        return 'none';
    if (props.border)
        return `1px solid ${gray60}`;
    return 'none';
}};
  border-color: ${props => {
    if (props.error)
        return failureColor;
    if (props.warning)
        return warningColor;
    return null;
}};
  box-shadow: ${props => props.shadow && `0 1px 3px 0 ${gray85}`};
  display: flex;
  justify-content: space-between;
  padding: ${props => (props.padding ? spacer16 : 0)};
`;
export const PanelContent = styled.div `
  align-items: center;
  display: flex;
  flex-grow: 1;
  justify-content: flex-start;
  min-width: 0;
`;
const CTA = styled.div `
  flex-shrink: 0;
`;
const CTAButton = styled(ThemedButtonTertiary) `
  padding-right: 0;
  display: ${props => props.$ctaListStacked && 'flex'};
  flex-direction: ${props => props.$ctaListStacked && 'column'};
  flex-shrink: 0;
`;
export function Panel({ border = true, children, className, ctaList, ctaListStacked, error, padding, shadow, warning, }) {
    const result = (React.createElement(Container, { className: className, error: error, warning: warning, border: border, shadow: shadow, padding: padding },
        React.createElement(PanelContent, { className: className }, children),
        ctaList && ctaList.length > 0 && (React.createElement(CTA, null, ctaList.map((_a) => {
            var { label, className: ctaClassName } = _a, ctaProps = __rest(_a, ["label", "className"]);
            return (React.createElement(CTAButton, Object.assign({ key: `panel-cta-${label}`, buttonSize: "sm", className: ctaClassName, "$ctaListStacked": ctaListStacked }, ctaProps), label));
        })))));
    return result;
}
Panel.defaultProps = {
    padding: true,
};
//# sourceMappingURL=index.js.map