var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import styled, { css, keyframes } from 'styled-components';
import { plum } from '../../styles/colors';
import { IconPlayAlt, IconPlayAltActive, IconPauseAlt, IconPauseAltActive, white, } from '@spotify-internal/encore-web';
const DEFAULT_ICON_SIZE = 64;
const pulsing = keyframes `
  0% { transform: scale(1, 1); }
  50% { transform: scale(1.1, 1.1); }
  100% { transform: scale(1, 1); }
`;
const StyledButton = styled.button `
  display: flex;
  cursor: pointer;
  background: none;
  border: none;
  padding: 0;
  margin: 0;
  outline: none;
  width: fit-content;

  ${props => props.animated &&
    css `
      svg {
        animation: ${pulsing} infinite 1s ease-out;
      }
    `}
  &:hover:enabled {
    svg {
      transform: scale(1.06);
      opacity: 0.9;
    }
  }
  &:disabled {
    svg {
      opacity: 0.6;
      cursor: not-allowed;
    }
  }
`;
const getIcon = (paused, overMedia) => {
    if (paused && !overMedia)
        return IconPlayAlt;
    if (paused && overMedia)
        return IconPlayAltActive;
    if (!paused && !overMedia)
        return IconPauseAlt;
    return IconPauseAltActive;
};
export const PlayPauseButton = (_a) => {
    var { paused, overMedia, iconSize = DEFAULT_ICON_SIZE, color = overMedia ? white : plum, animated, onClick, onPlay, onPause } = _a, buttonProps = __rest(_a, ["paused", "overMedia", "iconSize", "color", "animated", "onClick", "onPlay", "onPause"]);
    const Icon = getIcon(!!paused, !!overMedia);
    return (React.createElement(StyledButton, Object.assign({}, buttonProps, { animated: animated, onClick: (e) => {
            onClick === null || onClick === void 0 ? void 0 : onClick(e);
            if (paused) {
                onPlay === null || onPlay === void 0 ? void 0 : onPlay(e);
            }
            else
                onPause === null || onPause === void 0 ? void 0 : onPause(e);
        } }),
        React.createElement(Icon, { color: color, iconSize: iconSize, "aria-label": paused ? 'Play' : 'Pause' })));
};
//# sourceMappingURL=index.js.map