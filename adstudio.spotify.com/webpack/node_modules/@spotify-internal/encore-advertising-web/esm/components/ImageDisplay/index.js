import React from 'react';
import styled from 'styled-components';
import { Type, spacer8, spacer16, IconWithText, IconDelete, ButtonTertiary, } from '@spotify-internal/encore-web';
import { Thumb } from '../Thumb';
import { Panel } from '../Panel';
import onEnter from '../../utils/helpers/onEnter';
import { DELETE_LABEL } from './constants';
import { Box } from '../Box';
import { HStack } from '../Stack';
const Display = styled.div `
  align-items: center;
  display: flex;
  justify-content: flex-start;
  min-width: 0;
`;
const ClickableThumbnail = styled.div `
  cursor: pointer;
`;
export const Thumbnail = styled(Thumb) `
  flex-shrink: 0;
  margin-right: ${spacer16};
`;
export const RoundedThumbnail = styled(Thumb) `
  flex-shrink: 0;
  margin-right: ${spacer16};
  border-radius: ${spacer8};
`;
const Name = styled(Type.p) `
  flex: 1;
  flex-direction: column;
  overflow: hidden;
  padding: 0;
  text-overflow: ellipsis;
  white-space: nowrap;
`;
export function LegacyImageDisplay({ className, deleteLabel, name, onClickDelete, onClickImage, panelBorder, src, }) {
    let content = (React.createElement(Display, { className: className },
        React.createElement(Thumbnail, { onClick: onClickImage, size: 80, src: src }),
        React.createElement(Name, { variant: Type.body1, weight: Type.book }, name)));
    if (onClickImage) {
        content = (React.createElement(ClickableThumbnail, { onClick: onClickImage, onKeyPress: onEnter(onClickImage), role: "button", tabIndex: 0 }, content));
    }
    const ctaList = [];
    if (onClickDelete) {
        ctaList.push({
            label: deleteLabel ? deleteLabel : DELETE_LABEL,
            onClick: onClickDelete,
        });
    }
    return (React.createElement(Panel, { border: false, ctaList: ctaList, ctaListStacked: true, shadow: panelBorder }, content));
}
export function ImageDisplay({ className, deleteLabel, name, onClickDelete, onClickImage, src, }) {
    let content = (React.createElement(Display, { className: className },
        React.createElement(RoundedThumbnail, { onClick: onClickImage, size: 80, src: src }),
        React.createElement(Name, { variant: Type.body1, weight: Type.book }, name)));
    if (onClickImage) {
        content = (React.createElement(ClickableThumbnail, { onClick: onClickImage, onKeyPress: onEnter(onClickImage), role: "button", tabIndex: 0 }, content));
    }
    return (React.createElement(Box, { elevated: true },
        React.createElement(HStack, null,
            React.createElement(HStack.Item, { flex: 1 }, content),
            onClickDelete ? (React.createElement(HStack.Item, null,
                React.createElement(ButtonTertiary, { condensed: true, onClick: onClickDelete },
                    React.createElement(IconWithText, { icon: IconDelete, iconSize: 16 }, deleteLabel ? deleteLabel : DELETE_LABEL)))) : null)));
}
//# sourceMappingURL=index.js.map