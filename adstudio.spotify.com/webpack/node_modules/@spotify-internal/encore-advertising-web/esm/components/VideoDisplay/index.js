import React from 'react';
import styled from 'styled-components';
import { Type, spacer12, gray50, ButtonTertiary, IconWithText, IconDelete, } from '@spotify-internal/encore-web';
import { downloadFile } from '../../utils/helpers/downloadFile';
import onEnter from '../../utils/helpers/onEnter';
import { Panel } from '../Panel';
import { DELETE_LABEL, DOWNLOAD_LABEL } from './constants';
import { CREATIVE_FORMAT } from '../../config';
import { IconVideoLandscape } from '../../icons/IconVideoLandscape';
import { IconVideoPortrait } from '../../icons/IconVideoPortrait';
import { Box } from '../Box';
import { HStack } from '../Stack';
const ICON_SIZE = 64;
const Display = styled.div `
  align-items: center;
  display: flex;
  justify-content: flex-start;
  min-width: 0;
`;
const ClickableThumbnail = styled.div `
  cursor: pointer;
`;
export const IconContainer = styled.div `
  flex-shrink: 0;
  margin-right: ${spacer12};
  align-items: center;
  display: flex;
`;
const Name = styled(Type.p) `
  flex: 1;
  flex-direction: column;
  overflow: hidden;
  padding: 0;
  text-overflow: ellipsis;
  white-space: nowrap;
`;
export function LegacyVideoDisplay({ className, src, name, creativeFormat = CREATIVE_FORMAT.VIDEO_LANDSCAPE_FORMAT, shouldShowDownload, onClickDelete, onClickVideo, downloadLabel = DOWNLOAD_LABEL, deleteLabel = DELETE_LABEL, panelBorder = false, }) {
    const icon = creativeFormat === CREATIVE_FORMAT.VIDEO_LANDSCAPE_FORMAT ? (React.createElement(IconVideoLandscape, { iconSize: ICON_SIZE, color: gray50 })) : (React.createElement(IconVideoPortrait, { iconSize: ICON_SIZE, color: gray50 }));
    let content = (React.createElement(Display, { className: className },
        React.createElement(IconContainer, null, icon),
        React.createElement(Name, { variant: Type.body1, weight: Type.book }, name)));
    if (onClickVideo) {
        content = (React.createElement(ClickableThumbnail, { onClick: onClickVideo, onKeyPress: onEnter(onClickVideo), role: "button", tabIndex: 0 }, content));
    }
    const ctaList = [];
    if (shouldShowDownload) {
        ctaList.push({
            label: downloadLabel,
            onClick: () => {
                downloadFile(name, src);
            },
        });
    }
    if (onClickDelete) {
        ctaList.push({
            label: deleteLabel,
            onClick: onClickDelete,
        });
    }
    return (React.createElement(Panel, { border: false, ctaList: ctaList, ctaListStacked: true, shadow: panelBorder }, content));
}
export function VideoDisplay({ className, src, name, creativeFormat = CREATIVE_FORMAT.VIDEO_LANDSCAPE_FORMAT, shouldShowDownload, onClickDelete, onClickVideo, downloadLabel = DOWNLOAD_LABEL, deleteLabel = DELETE_LABEL, }) {
    const icon = creativeFormat === CREATIVE_FORMAT.VIDEO_LANDSCAPE_FORMAT ? (React.createElement(IconVideoLandscape, { iconSize: ICON_SIZE, color: gray50 })) : (React.createElement(IconVideoPortrait, { iconSize: ICON_SIZE, color: gray50 }));
    let content = (React.createElement(Display, { className: className },
        React.createElement(IconContainer, null, icon),
        React.createElement(Name, { variant: Type.body1, weight: Type.book }, name)));
    if (onClickVideo) {
        content = (React.createElement(ClickableThumbnail, { onClick: onClickVideo, onKeyPress: onEnter(onClickVideo), role: "button", tabIndex: 0 }, content));
    }
    const ctaList = [];
    if (shouldShowDownload) {
        ctaList.push({
            label: downloadLabel,
            onClick: () => {
                downloadFile(name, src);
            },
        });
    }
    if (onClickDelete) {
        ctaList.push({
            label: deleteLabel,
            onClick: onClickDelete,
        });
    }
    return (React.createElement(Box, { elevated: true },
        React.createElement(HStack, null,
            React.createElement(HStack.Item, { flex: 1 }, content),
            onClickDelete ? (React.createElement(HStack.Item, null,
                React.createElement(ButtonTertiary, { condensed: true, onClick: onClickDelete },
                    React.createElement(IconWithText, { icon: IconDelete, iconSize: 16 }, deleteLabel ? deleteLabel : DELETE_LABEL)))) : null,
            shouldShowDownload ? (React.createElement(HStack.Item, null,
                React.createElement(ButtonTertiary, { condensed: true, onClick: () => downloadFile(name, src) },
                    React.createElement(IconWithText, { icon: IconDelete, iconSize: 16 }, downloadLabel ? downloadLabel : DOWNLOAD_LABEL)))) : null)));
}
//# sourceMappingURL=index.js.map