var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import styled, { css, withTheme } from 'styled-components';
import { white } from '@spotify-internal/encore-web';
import * as constants from './constants';
export { constants };
const PlaybackScrubberContainer = styled.div `
  position: relative;
  height: ${constants.thumbDiameter * 2}px;
  cursor: pointer;
`;
const thumb = css `
  background: ${white};
  border: ${constants.thumbBorderWidth}px solid ${constants.thumbColor};
  border-radius: ${constants.thumbRadius}px;
  box-shadow: 0 0 ${constants.thumbRadius}px 0 rgba(0, 0, 0, 15);
  cursor: pointer;
  height: ${constants.thumbDiameter}px;
  margin-left: 1px;
  margin-top: 1px;
  width: ${constants.thumbDiameter}px;
`;
const PlaybackScrubberControl = styled.input `
  width: 100%;
  -webkit-appearance: none;
  background: transparent;
  border: 0 solid transparent;
  outline: none;
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  z-index: 1;
  margin: auto;
  ${props => props.hideControl
    ? css `
          display: none;
        `
    : null}
  &::-webkit-slider-runnable-track {
    background: transparent;
    color: transparent;
  }
  &::-moz-range-track {
    background: transparent;
    color: transparent;
  }
  &::-ms-fill-lower {
    background: transparent;
    color: transparent;
  }
  &::-ms-track {
    background: transparent;
    color: transparent;
  }
  &:hover {
    -webkit-appearance: none;
  }
  ${PlaybackScrubberContainer}:hover &::-webkit-slider-thumb {
    display: block;
  }
  ${PlaybackScrubberContainer}:hover &::-moz-range-thumb {
    display: block;
  }
  ${PlaybackScrubberContainer}:hover &::-ms-thumb {
    display: block;
  }
  &::-webkit-slider-thumb {
    ${thumb};
    -webkit-appearance: none;
    display: none;
  }
  &::-moz-range-thumb {
    ${thumb};
    display: none;
  }
  &::-ms-thumb {
    ${thumb};
    box-sizing: border-box;
    display: none;
  }
  &::-ms-ticks-after,
  &::-ms-ticks-before,
  &::-ms-tooltip {
    display: none;
  }
`;
const PlaybackScrubberDisplay = styled.div `
  background: ${props => props.fillColor};
  border-radius: ${props => props.borderRadius}px;
  height: ${props => {
    if (props.hideControl)
        return css `100%`;
    if (props.thinTrack)
        return css `2px`;
    return css `
      ${constants.trackHeight}px
    `;
}};
  overflow: hidden;
  position: absolute;
  top: ${props => {
    if (props.hideControl)
        return 0;
    if (props.thinTrack)
        return css `12px`;
    const amount = constants.trackHeight * 2 + constants.trackBorderWidth * 2;
    return css `
      ${amount}px
    `;
}};
  left: 0;
  right: 0;
  z-index: 0;
`;
const PlaybackScrubberDisplayFill = styled.div `
  background: ${props => props.fillColor};
  height: 100%;
  width: ${props => css `
      ${100 * (props.value || 0)}%
    `};
  z-index: 0;
  ${PlaybackScrubberContainer}:hover & {
    background: ${props => props.fillColorHover};
  }
`;
export class Scrubber extends React.Component {
    render() {
        const _a = this.props, { className, value, theme, fillColor = constants.playedFill, fillColorHover = theme && theme.colors
            ? theme.colors.primaryColor
            : constants.hoverPlayedFill, unfilledColor = constants.unplayedFill, borderRadius = constants.trackHeight, hideControl, thinTrack, onChange } = _a, props = __rest(_a, ["className", "value", "theme", "fillColor", "fillColorHover", "unfilledColor", "borderRadius", "hideControl", "thinTrack", "onChange"]);
        return (React.createElement(PlaybackScrubberContainer, { className: className },
            React.createElement(PlaybackScrubberControl, Object.assign({ "data-testid": "scrubber-control", hideControl: hideControl, max: 1, min: 0, step: 0.01, type: "range", value: value, onChange: onChange }, props)),
            React.createElement(PlaybackScrubberDisplay, { fillColor: unfilledColor, hideControl: hideControl, borderRadius: borderRadius, thinTrack: thinTrack },
                React.createElement(PlaybackScrubberDisplayFill, { value: value, fillColor: fillColor, fillColorHover: fillColorHover }))));
    }
}
export const PlaybackScrubber = withTheme(Scrubber);
//# sourceMappingURL=index.js.map