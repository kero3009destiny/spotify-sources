import React, { Component } from 'react';
import HTML5AudioWrapper from './HTML5AudioWrapper';
export default function withAudioPlayerHOC(ProvidedComponent) {
    return class WrappedAudioPlayerComponent extends Component {
        constructor(props) {
            super(props);
            this.state = {
                playing: false,
                playingRatio: 0.0,
                currentTime: 0,
                duration: 0,
                disabled: false,
                play: () => { },
                pause: () => { },
                stop: () => { },
                seek: () => { },
            };
            this.getNoops = () => ({
                play: () => { },
                pause: () => { },
                stop: () => { },
                seek: () => { },
            });
            this.setDuration = (duration) => {
                this.setState(() => ({ duration }));
            };
            this.setTimeUpdate = (playingRatio, currentTime) => {
                this.setState(() => ({ playingRatio, currentTime }));
            };
            this.play = () => {
                if (this.props.stopsOtherAudioWhenPlayed && document) {
                    const sounds = document.getElementsByTagName('audio');
                    for (let i = 0; i < sounds.length; i += 1) {
                        sounds[i].pause();
                    }
                }
                if (this.state.playing) {
                    this.setState(() => ({ playing: false }));
                    this.audioWrapper.pause();
                }
                else {
                    this.setState(() => ({ playing: true }));
                    this.audioWrapper.play();
                }
            };
            this.pause = () => {
                this.setState(() => ({ playing: false }));
                this.audioWrapper.pause();
            };
            this.stop = () => {
                this.setState(state => (Object.assign({ playing: false, playingRatio: 0.0, currentTime: 0, disabled: false, duration: state.duration }, this.getNoops())));
            };
            this.seek = (position) => {
                let seekPosition = position;
                if (position && position.currentTarget) {
                    seekPosition = position.currentTarget.value;
                }
                const seekPositionNum = Number(seekPosition);
                if (isFinite(seekPositionNum) && this.audioWrapper) {
                    this.audioWrapper.seek(seekPositionNum);
                }
            };
            this.audio = React.createRef();
        }
        componentDidMount() {
            var _a;
            const events = {
                setDuration: this.setDuration,
                setTimeUpdate: this.setTimeUpdate,
                ended: () => this.setState(() => ({ playing: false })),
            };
            const audioRef = (_a = this.audio) === null || _a === void 0 ? void 0 : _a.current;
            if (audioRef) {
                const audioWrapperProps = {
                    audioNode: this.audio,
                    events: events,
                };
                this.audioWrapper = new HTML5AudioWrapper(audioWrapperProps);
            }
        }
        componentWillUnmount() {
            if (this.audioWrapper) {
                this.audioWrapper.pause();
                this.audioWrapper.clearAnimationFrame();
            }
            this.audioWrapper = undefined;
        }
        render() {
            const { playing, playingRatio, currentTime, duration, disabled, } = this.state;
            const { src } = this.props;
            let withSoundProps = {
                playing: playing,
                playingRatio: playingRatio,
                currentTime: currentTime,
                duration: duration,
                disabled: disabled,
                play: this.play,
                pause: this.pause,
                stop: this.stop,
                seek: this.seek,
            };
            if (!src) {
                withSoundProps = Object.assign({ playing: playing, playingRatio: playingRatio, currentTime: currentTime, duration: duration, disabled: true }, this.getNoops());
            }
            return (React.createElement("div", null,
                React.createElement(ProvidedComponent, Object.assign({ sound: withSoundProps }, this.props)),
                React.createElement("audio", { preload: "auto", onPause: () => {
                        this.pause();
                    }, ref: this.audio },
                    React.createElement("track", { kind: "captions" }),
                    React.createElement("source", { key: `audio-source-${src}`, src: src }))));
        }
    };
}
//# sourceMappingURL=index.js.map