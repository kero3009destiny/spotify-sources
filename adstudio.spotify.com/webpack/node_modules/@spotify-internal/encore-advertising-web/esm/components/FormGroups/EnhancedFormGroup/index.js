var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { body2FontSize, body2FontWeight, body2LetterSpacing, body2LineHeight, FormGroup, gray50, gray70, spacer4, spacer8, spacer16, spacer32, } from '@spotify-internal/encore-web';
import styled, { css } from 'styled-components';
import { LabelGroup } from '../../LabelGroup';
import { SlideInTransition } from '../../../utils/helpers/SlideInTransition';
const StyledFormGroup = styled(FormGroup) `
  width: 100%;
  ${props => !!props.condensed &&
    css `
      padding: 0;
    `}
  ${props => !!props.disabled &&
    css `
      && * {
        color: ${gray70};
        cursor: not-allowed;
      }
    `}
`;
const MarginHelper = styled.div `
  grid-column: -1 / 1;
  ${props => !!props.$hasLabel &&
    !props.collapsed &&
    css `
      margin-top: ${props.$hasDescription ? spacer16 : spacer8};
    `}
  ${props => !!props.disabled &&
    css `
      pointer-events: none;
      opacity: 0.7;
    `}
`;
const InlineHelper = styled.div `
  ${props => !!props.inline &&
    css `
      display: flex;
      flex-wrap: wrap;
    `}
`;
const GridHelper = styled.div `
  display: inline-grid;
  grid-row-gap: ${spacer4};
  grid-column-gap: ${spacer32};
  grid-template-columns: ${props => (props.$hasExtra ? `1fr auto` : `1fr`)};
  align-items: baseline;
  padding: 0;
  width: 100%;
  ${props => props.hidden &&
    css `
      display: none;
    `}
`;
const Description = styled.div `
  font-size: ${body2FontSize};
  letter-spacing: ${body2LetterSpacing};
  line-height: ${body2LineHeight};
  font-weight: ${body2FontWeight};
  color: ${gray50};
  grid-row: 2;
  grid-column: -1 / 1;
  max-width: 800px;
`;
export const EnhancedFormGroup = (_a) => {
    var { className, condensed, children, hideChildren = !children, forceRenderChildren, disabled, withFieldset, inline, hideLabel, helpText, icon, label, description, indicator, popover, prefix, suffix, extra, onLabelClick, showHelpTextAboveChildren, animationDuration } = _a, props = __rest(_a, ["className", "condensed", "children", "hideChildren", "forceRenderChildren", "disabled", "withFieldset", "inline", "hideLabel", "helpText", "icon", "label", "description", "indicator", "popover", "prefix", "suffix", "extra", "onLabelClick", "showHelpTextAboveChildren", "animationDuration"]);
    return (React.createElement(StyledFormGroup, Object.assign({ className: className, condensed: condensed, withFieldset: withFieldset, disabled: disabled, "aria-disabled": disabled }, props),
        React.createElement(GridHelper, { "$hasExtra": !!extra, hidden: hideLabel || (!label && !description) },
            React.createElement(LabelGroup, { icon: icon, label: label, indicator: indicator, popover: popover, prefix: prefix, suffix: suffix, isHidden: hideLabel || !label, disabled: disabled, onClick: onLabelClick, condensed: true }),
            extra,
            description && React.createElement(Description, null, description)),
        children && (React.createElement(MarginHelper, { "$hasDescription": !!description, "$hasLabel": !hideLabel, collapsed: hideChildren, disabled: !!disabled },
            showHelpTextAboveChildren && helpText,
            React.createElement(SlideInTransition, { collapsed: hideChildren, forceRender: forceRenderChildren, duration: animationDuration },
                React.createElement(InlineHelper, { inline: inline }, children)),
            !showHelpTextAboveChildren && helpText))));
};
//# sourceMappingURL=index.js.map