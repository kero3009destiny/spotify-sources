var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { isFunction } from 'lodash';
import { EnhancedFormGroup, } from '../EnhancedFormGroup';
export const CollapsibleFormGroupHelper = (_a) => {
    var { isExpanded, icon, label, prefix, suffix, extra, description, indicator, helpText, showHelpTextAboveChildren, children, popover } = _a, formGroupProps = __rest(_a, ["isExpanded", "icon", "label", "prefix", "suffix", "extra", "description", "indicator", "helpText", "showHelpTextAboveChildren", "children", "popover"]);
    const getRenderValue = React.useCallback((prop) => (isFunction(prop) ? prop(isExpanded) : prop), [isExpanded]);
    const hasChildren = isFunction(children)
        ? children(!!isExpanded)
        : isExpanded && children;
    const childrenToRender = getRenderValue(children);
    return (React.createElement(EnhancedFormGroup, Object.assign({}, formGroupProps, { "aria-expanded": isExpanded, icon: getRenderValue(icon), label: getRenderValue(label), indicator: getRenderValue(indicator), prefix: getRenderValue(prefix), suffix: getRenderValue(suffix), extra: getRenderValue(extra), description: getRenderValue(description), helpText: getRenderValue(helpText), showHelpTextAboveChildren: getRenderValue(showHelpTextAboveChildren), popover: getRenderValue(popover), hideChildren: !hasChildren }), childrenToRender));
};
//# sourceMappingURL=index.js.map