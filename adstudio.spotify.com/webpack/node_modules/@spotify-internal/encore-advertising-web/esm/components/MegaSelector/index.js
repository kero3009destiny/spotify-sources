var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { FormRadio, gray85, gray90, gray95, spacer12, spacer16, spacer24, white, } from '@spotify-internal/encore-web';
import { uniqueId } from 'lodash';
import { MegaSelectorGroup, useGroupContext } from './Group';
import { plum } from '../../styles/colors';
import { StyledBox, StyledRadio, Heading, Icon, StyledLabelGroup, ContentGrid, ChildrenWrapper, SlideInWrapper, Description, LabelAndDescription, } from './styles';
import { Stack } from '../Stack';
import { SlideInTransition } from '../../utils/helpers/SlideInTransition';
function MegaSelectorWithoutComposition(_a) {
    var _b;
    var { className, value, checked: checkedProp, onClick, onFocus, onBlur, heading, icon, inline = true, disabled: disabledProp, hideChildrenOnUnchecked = true, highlightOnChecked: highlightOnCheckedProp, forceRenderChildren: forceRenderChildrenProp, animationDuration: animationDurationProp, children, description } = _a, labelGroupProps = __rest(_a, ["className", "value", "checked", "onClick", "onFocus", "onBlur", "heading", "icon", "inline", "disabled", "hideChildrenOnUnchecked", "highlightOnChecked", "forceRenderChildren", "animationDuration", "children", "description"]);
    const id = React.useRef(uniqueId());
    const radioRef = React.useRef(null);
    const groupContext = useGroupContext();
    const hasMounted = React.useRef(false);
    let checked = checkedProp;
    let disabled = disabledProp;
    let forceRenderChildren = forceRenderChildrenProp;
    let highlightOnChecked = highlightOnCheckedProp !== null && highlightOnCheckedProp !== void 0 ? highlightOnCheckedProp : true;
    let animationDuration = animationDurationProp;
    const joinBoxes = groupContext === null || groupContext === void 0 ? void 0 : groupContext.joinBoxes;
    if (groupContext) {
        checked = checkedProp !== null && checkedProp !== void 0 ? checkedProp : value === groupContext.value;
        disabled = disabledProp !== null && disabledProp !== void 0 ? disabledProp : groupContext.disabled;
        highlightOnChecked =
            (_b = highlightOnCheckedProp !== null && highlightOnCheckedProp !== void 0 ? highlightOnCheckedProp : groupContext.highlightOnChecked) !== null && _b !== void 0 ? _b : true;
        forceRenderChildren =
            forceRenderChildrenProp !== null && forceRenderChildrenProp !== void 0 ? forceRenderChildrenProp : groupContext.forceRenderChildren;
        animationDuration = animationDurationProp !== null && animationDurationProp !== void 0 ? animationDurationProp : groupContext.animationDuration;
    }
    React.useEffect(() => {
        var _a, _b;
        if (hasMounted.current) {
            if (checked)
                (_a = radioRef.current) === null || _a === void 0 ? void 0 : _a.focus();
            else
                (_b = radioRef.current) === null || _b === void 0 ? void 0 : _b.blur();
        }
        else {
            hasMounted.current = true;
        }
    }, [checked]);
    const elevated = !disabled && !checked && !joinBoxes;
    const showBorder = !elevated && !joinBoxes;
    const disabledBackground = `repeating-linear-gradient(
    135deg, ${gray95}, ${gray95} 10px, ${gray90} ${spacer12}, ${gray90} ${spacer12})`;
    return (React.createElement(StyledBox, { className: className, elevated: elevated, cursor: !disabled ? 'pointer' : 'not-allowed', borderColor: !showBorder ? 'transparent' : gray85, bgColor: checked && highlightOnChecked ? plum : white, bg: disabled && !joinBoxes ? disabledBackground : undefined, borderRadius: joinBoxes ? '0px' : undefined, alignSelf: "stretch", checked: checked, disabled: disabled, highlightOnChecked: highlightOnChecked, textAlign: inline ? 'left' : 'center', minWidth: "min-content", overflow: "visible", px: joinBoxes ? '0px' : undefined, py: joinBoxes && (groupContext === null || groupContext === void 0 ? void 0 : groupContext.direction) === 'horizontal'
            ? '0px'
            : undefined, onClick: () => {
            var _a, _b;
            if (!disabled) {
                onClick === null || onClick === void 0 ? void 0 : onClick(value);
                (_a = groupContext === null || groupContext === void 0 ? void 0 : groupContext.onChange) === null || _a === void 0 ? void 0 : _a.call(groupContext, value);
                (_b = radioRef.current) === null || _b === void 0 ? void 0 : _b.focus();
            }
        } },
        heading && React.createElement(Heading, null, heading),
        React.createElement(ContentGrid, { inline: inline },
            React.createElement(StyledRadio, { disabled: !!disabled, highlightOnChecked: highlightOnChecked, inline: inline },
                React.createElement(FormRadio, { ref: radioRef, id: id.current, disabled: disabled, value: value, checked: !!checked, onClick: e => e.stopPropagation(), onFocus: e => {
                        var _a;
                        onFocus === null || onFocus === void 0 ? void 0 : onFocus(e);
                        (_a = groupContext === null || groupContext === void 0 ? void 0 : groupContext.onFocus) === null || _a === void 0 ? void 0 : _a.call(groupContext, e);
                    }, onBlur: e => {
                        var _a;
                        onBlur === null || onBlur === void 0 ? void 0 : onBlur(e);
                        (_a = groupContext === null || groupContext === void 0 ? void 0 : groupContext.onBlur) === null || _a === void 0 ? void 0 : _a.call(groupContext, e);
                    } })),
            React.createElement(Stack, { direction: inline ? 'horizontal' : 'vertical', columnGap: spacer16, rowGap: spacer24, alignItems: "center" },
                icon && React.createElement(Icon, null, icon),
                React.createElement(LabelAndDescription, { inline: inline },
                    React.createElement(StyledLabelGroup, Object.assign({}, labelGroupProps, { condensed: true })),
                    description && React.createElement(Description, null, description))),
            children && (React.createElement(SlideInWrapper, null,
                React.createElement(SlideInTransition, { collapsed: !checked && hideChildrenOnUnchecked, forceRender: forceRenderChildren, duration: animationDuration },
                    React.createElement(ChildrenWrapper, { onClick: e => e.stopPropagation() }, children)))))));
}
export const MegaSelector = Object.assign(MegaSelectorWithoutComposition, {
    Group: MegaSelectorGroup,
});
//# sourceMappingURL=index.js.map