var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { Stack } from '../Stack';
import { spacer24 } from '@spotify-internal/encore-web';
const GroupContext = React.createContext(null);
function GroupContextProvider(_a) {
    var { children } = _a, props = __rest(_a, ["children"]);
    return (React.createElement(GroupContext.Provider, { value: props }, children));
}
export function useGroupContext() {
    const context = React.useContext(GroupContext);
    return context;
}
export function MegaSelectorGroup(_a) {
    var { className, value, defaultValue, onChange, onBlur, onFocus, disabled, children, forceRenderChildren, joinBoxes, highlightOnChecked = joinBoxes ? false : undefined, animationDuration, withDividers = joinBoxes, columnGap = spacer24, gap = joinBoxes ? '0px' : undefined, direction } = _a, stackProps = __rest(_a, ["className", "value", "defaultValue", "onChange", "onBlur", "onFocus", "disabled", "children", "forceRenderChildren", "joinBoxes", "highlightOnChecked", "animationDuration", "withDividers", "columnGap", "gap", "direction"]);
    const [selectedValue, setSelectedValue] = React.useState(value !== null && value !== void 0 ? value : defaultValue);
    React.useEffect(() => {
        if (value !== undefined)
            setSelectedValue(value);
    }, [value]);
    const onRadioChange = newValue => {
        const lastValue = selectedValue;
        if (value === undefined) {
            setSelectedValue(newValue);
        }
        if (newValue !== lastValue) {
            onChange === null || onChange === void 0 ? void 0 : onChange(newValue);
        }
    };
    return (React.createElement(GroupContextProvider, { value: selectedValue, onChange: onRadioChange, onFocus: onFocus, onBlur: onBlur, disabled: disabled, joinBoxes: joinBoxes, highlightOnChecked: highlightOnChecked, forceRenderChildren: forceRenderChildren, animationDuration: animationDuration, direction: direction },
        React.createElement(Stack, Object.assign({}, stackProps, { withDividers: withDividers, gap: gap, columnGap: columnGap, direction: direction, alignItems: "stretch" }), children)));
}
//# sourceMappingURL=Group.js.map