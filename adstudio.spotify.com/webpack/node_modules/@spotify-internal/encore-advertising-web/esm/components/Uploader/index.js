import React, { PureComponent } from 'react';
import { Type, ProgressBar, gray50, gray10, spacer16, } from '@spotify-internal/encore-web';
import FileUpload from './FileUpload';
import { Box } from '../Box';
import { VStack } from '../Stack';
import { PROCESSING, UPLOADING } from './constants';
import { plum } from '../../styles/colors';
export class Uploader extends PureComponent {
    maybeRenderUploadingProgress() {
        const { displayComponentProps, isUploading, previewName, uploadingProgress, processingText = PROCESSING, uploadingText = UPLOADING, } = this.props;
        const progressInt = Math.max(Math.min(uploadingProgress !== null && uploadingProgress !== void 0 ? uploadingProgress : 0, 100), 0);
        return isUploading ? (React.createElement(Box, null,
            React.createElement(VStack, { gap: spacer16 },
                React.createElement(Type.p, { variant: Type.body1, color: gray10, condensed: true }, previewName || displayComponentProps.name),
                React.createElement(ProgressBar, { value: progressInt, color: plum }),
                React.createElement(Type.p, { variant: Type.body3, color: gray50, condensed: true }, progressInt === 100
                    ? `${processingText}...`
                    : `${uploadingText}...`)))) : null;
    }
    maybeRenderDisplayComponent() {
        const { deleteLabel, displayComponent: DisplayComponent, displayComponentProps, isUploading, onClickDelete, previewName, previewSrc, shouldShowDownload, shouldShowUploader, } = this.props;
        return !shouldShowUploader && !isUploading ? (React.createElement(DisplayComponent, Object.assign({ deleteLabel: deleteLabel, onClickDelete: onClickDelete, shouldShowDownload: shouldShowDownload }, displayComponentProps, { name: previewName || displayComponentProps.name, src: previewSrc || displayComponentProps.src, panelBorder: true }))) : null;
    }
    maybeRenderUploadComponent() {
        const { accept, id, isUploading, onError, onUpload, shouldShowUploader, dragAndDropText, uploadFileText, uploadText, skipValidation, iconContainerHeight, } = this.props;
        return shouldShowUploader && !isUploading ? (React.createElement(FileUpload, { accept: accept, skipValidation: skipValidation, id: id, onError: onError, onUpload: onUpload, dragAndDropText: dragAndDropText, uploadFileText: uploadFileText, uploadText: uploadText, iconContainerHeight: iconContainerHeight })) : null;
    }
    render() {
        return (React.createElement("div", { className: this.props.className },
            this.maybeRenderDisplayComponent(),
            this.maybeRenderUploadComponent(),
            this.maybeRenderUploadingProgress()));
    }
}
//# sourceMappingURL=index.js.map