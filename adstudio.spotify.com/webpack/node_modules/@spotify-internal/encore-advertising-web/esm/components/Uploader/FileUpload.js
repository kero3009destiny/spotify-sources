import React, { PureComponent } from 'react';
import styled from 'styled-components';
import { gray70, gray40, gray10, Type, ButtonSecondary, spacer48, } from '@spotify-internal/encore-web';
import { UPLOAD_FILE_TEXT, DRAG_AND_DROP_TEXT } from './constants';
import { Box } from '../Box';
import { plum } from '../../styles/colors';
const InvalidFileTypeErrorMessage = 'File type not accepted.';
const StyledButtonSecondary = styled(ButtonSecondary) `
  color: ${props => (props.showDragOver ? gray10 : plum)};
  border-color: ${props => (props.showDragOver ? gray10 : plum)};
`;
const HiddenInput = styled.input `
  height: 0.1px;
  opacity: 0;
  overflow: hidden;
  position: absolute;
  width: 0.1px;
  z-index: -1;
`;
const CtaAndHelpText = styled.div `
  text-align: center;
  display: flex;
  flex-direction: column;
  row-gap: 16px;
`;
export class FileUpload extends PureComponent {
    constructor(props) {
        super(props);
        this.handleFileUploadFromDialog = (e) => {
            this.validateFileAndUpload(e.currentTarget.files[0]);
        };
        this.handleFileDrop = (e) => {
            e.preventDefault();
            this.handleFileDragLeave();
            const file = e.dataTransfer.files[0];
            this.validateFileAndUpload(file);
        };
        this.handleClickUpload = (e) => {
            var _a;
            e.preventDefault();
            return (_a = document.getElementById(this.props.id)) === null || _a === void 0 ? void 0 : _a.click();
        };
        this.handleFileDragOver = (e) => {
            e.preventDefault();
            this.setState({
                showDragOver: true,
            });
        };
        this.handleFileDragLeave = () => this.setState({
            showDragOver: false,
        });
        this.validateFileAndUpload = (file) => {
            const { accept, skipValidation, onError, onUpload } = this.props;
            if (skipValidation ||
                this.state.acceptAnyFileType ||
                accept[file.type]) {
                onUpload(file);
            }
            else {
                onError(InvalidFileTypeErrorMessage);
            }
        };
        this.state = {
            showDragOver: false,
            acceptAnyFileType: !Object.keys(props.accept).length,
        };
        this.handleFileUploadFromDialog = this.handleFileUploadFromDialog.bind(this);
    }
    render() {
        const { uploadFileText = UPLOAD_FILE_TEXT, uploadText, dragAndDropText = DRAG_AND_DROP_TEXT, id, accept, } = this.props;
        return (React.createElement(Box, { elevated: !this.state.showDragOver, borderColor: this.state.showDragOver ? gray70 : undefined, height: "280px", justifyContent: "center", alignItems: "center", rowGap: spacer48, onDragEnd: this.handleFileDragLeave, onDragEnter: this.handleFileDragOver, onDragLeave: this.handleFileDragLeave, onDragOver: this.handleFileDragOver, onDrop: this.handleFileDrop },
            React.createElement(Type.p, { color: gray10, variant: Type.heading3, weight: Type.bold, condensed: true }, dragAndDropText),
            React.createElement(CtaAndHelpText, null,
                React.createElement(StyledButtonSecondary, { buttonSize: ButtonSecondary.sm, onClick: this.handleClickUpload, showDragOver: this.state.showDragOver }, uploadFileText),
                React.createElement(Type.p, { color: gray40, variant: Type.body4, weight: Type.book, condensed: true }, uploadText)),
            React.createElement(HiddenInput, { accept: Object.keys(accept).join(','), id: id, onChange: this.handleFileUploadFromDialog, type: "file" })));
    }
}
export default FileUpload;
//# sourceMappingURL=FileUpload.js.map