var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { gray10, gray50, gray70, spacer8, Type, } from '@spotify-internal/encore-web';
import styled, { css } from 'styled-components';
export const StyledTypeGroup = styled.div `
  width: fit-content;
  ${props => props.isHidden &&
    css `
      display: none;
    `}
  ${props => props.clickable &&
    css `
      user-select: none;
    `}
  ${props => props.disabled &&
    css `
      &,
      * {
        color: ${gray70};
      }
      *[stroke='#181818'] {
        stroke: ${gray70};
      }
      *[fill='#181818'] {
        fill: ${gray70};
      }
    `}
`;
const Popover = styled(Type) `
  white-space: nowrap;
  & > span {
    margin: 0;
  }
`;
const Suffix = styled(Type) `
  white-space: nowrap;
`;
const FlexHelper = styled(Type) `
  display: flex;
  gap: ${spacer8};
  align-items: center;
  /* padding-bottom: ${props => (!props.condensed ? spacer8 : 0)}; */
`;
const StyledLabel = styled(Type) `
  > span {
    display: inline;
    line-height: inherit;
    vertical-align: middle;
  }
`;
export const LabelGroup = (_a) => {
    var { className, label, popover, prefix, suffix, icon, indicator, isHidden, disabled, onClick, variant = Type.body2, weight, as = 'p', condensed, color } = _a, typeProps = __rest(_a, ["className", "label", "popover", "prefix", "suffix", "icon", "indicator", "isHidden", "disabled", "onClick", "variant", "weight", "as", "condensed", "color"]);
    const nonDisabledOnLabelClick = !disabled ? onClick : undefined;
    return (React.createElement(StyledTypeGroup, { className: className, isHidden: isHidden, disabled: disabled, condensed: !!as || !!condensed, clickable: !!nonDisabledOnLabelClick, onClick: (e) => {
            e.preventDefault();
            nonDisabledOnLabelClick === null || nonDisabledOnLabelClick === void 0 ? void 0 : nonDisabledOnLabelClick(e);
        } },
        React.createElement(Type, { as: as, variant: variant, weight: weight, condensed: condensed },
            React.createElement(FlexHelper, null,
                icon,
                React.createElement(StyledLabel, Object.assign({}, typeProps, { variant: variant, weight: weight, color: color !== null && color !== void 0 ? color : gray10, condensed: true }),
                    prefix && (React.createElement(Type, { variant: variant, weight: Type.book, condensed: true }, `${prefix}: `)),
                    React.createElement(Type, { variant: variant, weight: weight !== null && weight !== void 0 ? weight : Type.bold, condensed: true }, label),
                    indicator && (React.createElement(Type, { variant: variant, weight: Type.bold, color: color !== null && color !== void 0 ? color : gray50, condensed: true }, ` (${indicator})`)),
                    popover && React.createElement(Popover, null,
                        "\u00A0\u00A0",
                        popover),
                    suffix && React.createElement(Suffix, null,
                        "\u00A0\u00A0",
                        suffix))))));
};
//# sourceMappingURL=index.js.map