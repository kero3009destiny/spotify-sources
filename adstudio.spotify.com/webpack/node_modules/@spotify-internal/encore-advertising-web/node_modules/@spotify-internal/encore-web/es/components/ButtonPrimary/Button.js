import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

/* stylelint-disable no-descending-specificity */
import React from 'react';
import { gray70, green, greenDark, greenLight, white } from '@spotify-internal/encore-foundation';
import styled, { css } from 'styled-components';
import { baseButtonStyles, buttonBorderRadius, buttonHover, focusBorderUsingProp, focusGapBorder, getButtonPadding } from "../../styles";
import { colors, getColorOrDefault } from "../../styles/theme";

var isDarkTheme = function isDarkTheme(theme) {
  return (theme == null ? void 0 : theme.button) === 'dark';
};

var hoverStyles = css(["", ";background-color:", ";color:", ";"], buttonHover(), function (props) {
  return getColorOrDefault(props.theme, colors.primaryColorHover, greenLight);
}, function (props) {
  return getColorOrDefault(props.theme, colors.primaryColorText, white);
});
var activeStyles = css(["transform:scale(1);background-color:", ";box-shadow:none;color:", ";"], function (props) {
  return getColorOrDefault(props.theme, colors.primaryColorActive, greenDark);
}, function (props) {
  return getColorOrDefault(props.theme, colors.primaryColorActiveText, gray70);
});
var disabledStyles = css(["background-color:", ";color:", ";cursor:not-allowed;opacity:0.4;"], function (_ref) {
  var theme = _ref.theme;
  return getColorOrDefault(theme, isDarkTheme(theme) ? colors.primaryColorDisabledDark : colors.primaryColorDisabledLight, green);
}, function (_ref2) {
  var theme = _ref2.theme;
  return getColorOrDefault(theme, colors.primaryColorText, white);
});
var buttonSolid = css(["background-color:", ";color:", ";&:hover:not(:focus):not(:disabled){", ";}", ";&:active{&,&:hover{", ";}}", ";&[disabled],fieldset[disabled] &{", ";}"], function (props) {
  return getColorOrDefault(props.theme, colors.primaryColor, green);
}, function (props) {
  return getColorOrDefault(props.theme, colors.primaryColorText, white);
}, hoverStyles, function (props) {
  return props.hover && css(["", ";"], hoverStyles);
}, activeStyles, function (props) {
  return props.active && css(["", ";"], activeStyles);
}, disabledStyles);
export var Button = styled( /*#__PURE__*/React.forwardRef(function (_ref3, ref) {
  var _ref3$component = _ref3.component,
      Component = _ref3$component === void 0 ? 'button' : _ref3$component,
      buttonSize = _ref3.buttonSize,
      hover = _ref3.hover,
      active = _ref3.active,
      focus = _ref3.focus,
      isUsingKeyboard = _ref3.isUsingKeyboard,
      props = _objectWithoutProperties(_ref3, ["component", "buttonSize", "hover", "active", "focus", "isUsingKeyboard"]);

  return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {
    ref: ref
  }));
})).withConfig({
  displayName: "Button",
  componentId: "sc-8cs45s-0"
})(["", ""], function (_ref4) {
  var _ref4$buttonSize = _ref4.buttonSize,
      buttonSize = _ref4$buttonSize === void 0 ? 'md' : _ref4$buttonSize,
      _ref4$theme = _ref4.theme,
      theme = _ref4$theme === void 0 ? {} : _ref4$theme,
      focus = _ref4.focus,
      isUsingKeyboard = _ref4.isUsingKeyboard;

  var _getButtonPadding = getButtonPadding(buttonSize),
      paddingTopBottom = _getButtonPadding.paddingTopBottom,
      paddingLeftRight = _getButtonPadding.paddingLeftRight;

  return css(["", ";padding:", "px ", "px;", ";", " ", ";"], baseButtonStyles(buttonSize), paddingTopBottom, paddingLeftRight, focusGapBorder(isDarkTheme(theme), buttonBorderRadius, isUsingKeyboard), function () {
    return focus && focusBorderUsingProp(isDarkTheme(theme), isUsingKeyboard);
  }, buttonSolid);
});