import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React from 'react';
import { overlayDirections } from "../../styles/mixins/overlays";
import { OverlayPortal } from "../OverlayPortal";
import { Overlay } from "./Overlay";
import Trigger from "./Trigger";
var OverlayTriggerComponent = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      overlay = _ref.overlay,
      placement = _ref.placement,
      withPortal = _ref.withPortal,
      closeOverlay = _ref.closeOverlay,
      props = _objectWithoutProperties(_ref, ["children", "overlay", "placement", "withPortal", "closeOverlay"]);

  return /*#__PURE__*/React.createElement(Trigger, Object.assign({}, props, {
    ref: ref
  }), children, overlay && (withPortal && typeof ref !== 'function' && (ref == null ? void 0 : ref.current) ? /*#__PURE__*/React.createElement(OverlayPortal, {
    overlayPosition: ref.current.getBoundingClientRect(),
    closeOverlay: closeOverlay
  }, /*#__PURE__*/React.createElement(Overlay, {
    placement: placement
  }, overlay)) : /*#__PURE__*/React.createElement(Overlay, {
    placement: placement
  }, overlay)));
});

var overlayTriggerHelpers = _objectSpread({}, overlayDirections);
/**
* **OverlayTrigger** ![Status: Production](https://img.shields.io/badge/PRODUCTION-%2357B560|height=14)
*
* [GitHub](https://ghe.spotify.net/encore/web/tree/master/src/components/OverlayTrigger) | [Storybook](https://encore-web.spotify.net/?path=/story/components-overlaytrigger--stateful-example) | [Encore](https://encore.spotify.net/web/components/non-visual?format=figma-figma#overlaytrigger) | 
*
* null
*
* @example
* export const StatefulExample = () => {
*  const [isActiveTop, toggleActiveTop] = useState(false);
*  const [isActiveTopRight, toggleActiveTopRight] = useState(false);
*  const [isActiveTopLeft, toggleActiveTopLeft] = useState(false);
*  const [isActiveLeft, toggleActiveLeft] = useState(false);
*  const [isActiveLeftTop, toggleActiveLeftTop] = useState(false);
*  const [isActiveLeftBottom, toggleActiveLeftBottom] = useState(false);
*  const [isActiveBottom, toggleActiveBottom] = useState(false);
*  const [isActiveBottomLeft, toggleActiveBottomLeft] = useState(false);
*  const [isActiveBottomRight, toggleActiveBottomRight] = useState(false);
*  const [isActiveRight, toggleActiveRight] = useState(false);
*  const [isActiveRightTop, toggleActiveRightTop] = useState(false);
*  const [isActiveRightBottom, toggleActiveRightBottom] = useState(false);
*
*  return (
*    <Table>
*      <tbody>
*        <TableRow>
*          <TableCell>
*            <OverlayTrigger
*              placement={OverlayTrigger.topLeft}
*              overlay={
*                isActiveTopLeft && (
*                  <Tooltip>Aenean lacinia bibendum nulla sed consectetur. Cras justo.</Tooltip>
*                )
*              }
*            >
*              <ButtonTertiary
*                condensed
*                onClick={() => toggleActiveTopLeft(!isActiveTopLeft)}
*                buttonSize={Button.sm}
*              >
*                Toggle top left
*              </ButtonTertiary>
*            </OverlayTrigger>
*          </TableCell>
*          <TableCell align="center">
*            <OverlayTrigger
*              placement={OverlayTrigger.top}
*              overlay={
*                isActiveTop && (
*                  <Tooltip>Aenean lacinia bibendum nulla sed consectetur. Cras justo.</Tooltip>
*                )
*              }
*            >
*              <ButtonTertiary
*                condensed
*                onClick={() => toggleActiveTop(!isActiveTop)}
*                buttonSize={Button.sm}
*              >
*                Toggle top
*              </ButtonTertiary>
*            </OverlayTrigger>
*          </TableCell>
*          <TableCell align="right">
*            <OverlayTrigger
*              placement={OverlayTrigger.topRight}
*              overlay={
*                isActiveTopRight && (
*                  <Tooltip>Aenean lacinia bibendum nulla sed consectetur. Cras justo.</Tooltip>
*                )
*              }
*            >
*              <ButtonTertiary
*                condensed
*                onClick={() => toggleActiveTopRight(!isActiveTopRight)}
*                buttonSize={Button.sm}
*              >
*                Toggle top right
*              </ButtonTertiary>
*            </OverlayTrigger>
*          </TableCell>
*        </TableRow>
*        <TableRow>
*          <TableCell>
*            <OverlayTrigger
*              placement={OverlayTrigger.leftTop}
*              overlay={
*                isActiveLeftTop && (
*                  <Tooltip>Aenean lacinia bibendum nulla sed consectetur. Cras justo.</Tooltip>
*                )
*              }
*            >
*              <ButtonTertiary
*                condensed
*                onClick={() => toggleActiveLeftTop(!isActiveLeftTop)}
*                buttonSize={Button.sm}
*              >
*                Toggle left top
*              </ButtonTertiary>
*            </OverlayTrigger>
*          </TableCell>
*          <TableCell>&nbsp;</TableCell>
*          <TableCell align="right">
*            <OverlayTrigger
*              placement={OverlayTrigger.rightTop}
*              overlay={
*                isActiveRightTop && (
*                  <Tooltip>Aenean lacinia bibendum nulla sed consectetur. Cras justo.</Tooltip>
*                )
*              }
*            >
*              <ButtonTertiary
*                condensed
*                onClick={() => toggleActiveRightTop(!isActiveRightTop)}
*                buttonSize={Button.sm}
*              >
*                Toggle right top
*              </ButtonTertiary>
*            </OverlayTrigger>
*          </TableCell>
*        </TableRow>
*        <TableRow>
*          <TableCell>
*            <OverlayTrigger
*              placement={OverlayTrigger.left}
*              overlay={
*                isActiveLeft && (
*                  <Tooltip>Aenean lacinia bibendum nulla sed consectetur. Cras justo.</Tooltip>
*                )
*              }
*            >
*              <ButtonTertiary
*                condensed
*                onClick={() => toggleActiveLeft(!isActiveLeft)}
*                buttonSize={Button.sm}
*              >
*                Toggle left
*              </ButtonTertiary>
*            </OverlayTrigger>
*          </TableCell>
*          <TableCell>&nbsp;</TableCell>
*          <TableCell align="right">
*            <OverlayTrigger
*              placement={OverlayTrigger.right}
*              overlay={
*                isActiveRight && (
*                  <Tooltip>Aenean lacinia bibendum nulla sed consectetur. Cras justo.</Tooltip>
*                )
*              }
*            >
*              <ButtonTertiary
*                condensed
*                onClick={() => toggleActiveRight(!isActiveRight)}
*                buttonSize={Button.sm}
*              >
*                Toggle right
*              </ButtonTertiary>
*            </OverlayTrigger>
*          </TableCell>
*        </TableRow>
*        <TableRow>
*          <TableCell>
*            <OverlayTrigger
*              placement={OverlayTrigger.leftBottom}
*              overlay={
*                isActiveLeftBottom && (
*                  <Tooltip>Aenean lacinia bibendum nulla sed consectetur. Cras justo.</Tooltip>
*                )
*              }
*            >
*              <ButtonTertiary
*                condensed
*                onClick={() => toggleActiveLeftBottom(!isActiveLeftBottom)}
*                buttonSize={Button.sm}
*              >
*                Toggle left bottom
*              </ButtonTertiary>
*            </OverlayTrigger>
*          </TableCell>
*          <TableCell>&nbsp;</TableCell>
*          <TableCell align="right">
*            <OverlayTrigger
*              placement={OverlayTrigger.rightBottom}
*              overlay={
*                isActiveRightBottom && (
*                  <Tooltip>Aenean lacinia bibendum nulla sed consectetur. Cras justo.</Tooltip>
*                )
*              }
*            >
*              <ButtonTertiary
*                condensed
*                onClick={() => toggleActiveRightBottom(!isActiveRightBottom)}
*                buttonSize={Button.sm}
*              >
*                Toggle right bottom
*              </ButtonTertiary>
*            </OverlayTrigger>
*          </TableCell>
*        </TableRow>
*        <TableRow>
*          <TableCell>
*            <OverlayTrigger
*              placement={OverlayTrigger.bottomLeft}
*              overlay={
*                isActiveBottomLeft && (
*                  <Tooltip>Aenean lacinia bibendum nulla sed consectetur. Cras justo.</Tooltip>
*                )
*              }
*            >
*              <ButtonTertiary
*                condensed
*                onClick={() => toggleActiveBottomLeft(!isActiveBottomLeft)}
*                buttonSize={Button.sm}
*              >
*                Toggle bottom left
*              </ButtonTertiary>
*            </OverlayTrigger>
*          </TableCell>
*          <TableCell align="center">
*            <OverlayTrigger
*              placement={OverlayTrigger.bottom}
*              overlay={
*                isActiveBottom && (
*                  <Tooltip>Aenean lacinia bibendum nulla sed consectetur. Cras justo.</Tooltip>
*                )
*              }
*            >
*              <ButtonTertiary
*                condensed
*                onClick={() => toggleActiveBottom(!isActiveBottom)}
*                buttonSize={Button.sm}
*              >
*                Toggle bottom
*              </ButtonTertiary>
*            </OverlayTrigger>
*          </TableCell>
*          <TableCell align="right">
*            <OverlayTrigger
*              placement={OverlayTrigger.bottomRight}
*              overlay={
*                isActiveBottomRight && (
*                  <Tooltip>Aenean lacinia bibendum nulla sed consectetur. Cras justo.</Tooltip>
*                )
*              }
*            >
*              <ButtonTertiary
*                condensed
*                onClick={() => toggleActiveBottomRight(!isActiveBottomRight)}
*                buttonSize={Button.sm}
*              >
*                Toggle bottom right
*              </ButtonTertiary>
*            </OverlayTrigger>
*          </TableCell>
*        </TableRow>
*      </tbody>
*    </Table>
*  );
*};
*
*/


export var OverlayTrigger = Object.assign(OverlayTriggerComponent, overlayTriggerHelpers);
export default OverlayTrigger;