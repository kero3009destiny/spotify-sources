import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React, { useContext } from 'react';
import { ThemeProvider } from 'styled-components';
import { KeyboardDetectionContext } from "../../contexts/KeyboardDetectionContext";
import { VisuallyHidden } from "../VisuallyHidden";
import { Checkbox } from "./Checkbox";
import { Indicator } from "./Indicator";
import { Label } from "./Label";
var FormCheckboxComponent = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _ref$theme = _ref.theme,
      theme = _ref$theme === void 0 ? {} : _ref$theme,
      small = _ref.small,
      indeterminate = _ref.indeterminate,
      id = _ref.id,
      children = _ref.children,
      props = _objectWithoutProperties(_ref, ["theme", "small", "indeterminate", "id", "children"]);

  var _useContext = useContext(KeyboardDetectionContext),
      isUsingKeyboard = _useContext.isUsingKeyboard;

  return /*#__PURE__*/React.createElement(ThemeProvider, {
    theme: theme
  }, /*#__PURE__*/React.createElement(Checkbox, null, /*#__PURE__*/React.createElement(VisuallyHidden, Object.assign({
    component: "input",
    type: "checkbox",
    ref: ref,
    id: id
  }, props)), /*#__PURE__*/React.createElement("label", {
    htmlFor: id
  }, /*#__PURE__*/React.createElement(Indicator, {
    indeterminate: indeterminate,
    isUsingKeyboard: isUsingKeyboard
  }), children && /*#__PURE__*/React.createElement(Label, {
    small: small
  }, children))));
});
var formCheckboxHelpers = {
  darkTheme: {
    formCheckbox: 'dark'
  },
  displayName: 'FormCheckbox'
};
/**
* **FormCheckbox** ![Status: Production](https://img.shields.io/badge/PRODUCTION-%2357B560|height=14)
*
* [GitHub](https://ghe.spotify.net/encore/web/tree/master/src/components/FormCheckbox) | [Storybook](https://encore-web.spotify.net/?path=/story/components-form-formcheckbox--default) | [Encore](https://encore.spotify.net/web/components/selectors?format=figma-figma#formcheckbox) | [Figma](https://www.figma.com/file/bnQXqGkLeiTlbk8JXGDcsX/Encore-Web---Light-Theme-Toolkit?node-id=0:568) |
*
* FormCheckbox allow users to select one or more items from a set, turn an option on or off, or acknowlege something. Used within a Form component.
*
* @example
* export const Default = () => (
*  <FormGroup label="Checkbox example" withFieldset>
*    <FormCheckbox id="option-1" defaultChecked>
*      Option 1
*    </FormCheckbox>
*    <FormCheckbox id="option-2">Option 2</FormCheckbox>
*  </FormGroup>
*);
*
*/

export var FormCheckbox = Object.assign(FormCheckboxComponent, formCheckboxHelpers);
export default FormCheckbox;