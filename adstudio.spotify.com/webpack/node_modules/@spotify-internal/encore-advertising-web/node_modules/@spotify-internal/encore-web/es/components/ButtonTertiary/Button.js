import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

/* stylelint-disable no-descending-specificity */
import React from 'react';
import { black50, black60, black90, green, greenDark, greenLight, white50, white60, white90 } from '@spotify-internal/encore-foundation';
import styled, { css } from 'styled-components';
import { baseButtonStyles, focusBorderUsingProp, focusBottomBorder, getButtonPadding } from "../../styles";
import { colors, getColorOrDefault } from "../../styles/theme";

var isDarkTheme = function isDarkTheme(theme) {
  return (theme == null ? void 0 : theme.button) === 'dark';
};

var isGreen = function isGreen(color) {
  return color === 'green';
};

var defaultTextColor = function defaultTextColor(theme) {
  return isDarkTheme(theme) ? white50 : black50;
};

var defaultTextColorHover = function defaultTextColorHover(theme) {
  return isDarkTheme(theme) ? white90 : black90;
};

var defaultTextColorActive = function defaultTextColorActive(theme) {
  return isDarkTheme(theme) ? white60 : black60;
};

var textColor = function textColor(color) {
  return isGreen(color) ? green : defaultTextColor;
};

var textColorHover = function textColorHover(color) {
  return isGreen(color) ? greenLight : defaultTextColorHover;
};

var textColorActive = function textColorActive(color) {
  return isGreen(color) ? greenDark : defaultTextColorActive;
};

var hoverStyles = function hoverStyles(color, theme) {
  return css(["color:", ";"], color === 'gray' ? defaultTextColorHover(theme) : getColorOrDefault(theme, colors.primaryColorHover, textColorHover(color)));
};

var activeStyles = function activeStyles(color, theme) {
  return css(["color:", ";outline:none;"], color === 'gray' ? defaultTextColorActive(theme) : getColorOrDefault(theme, colors.primaryColorActive, textColorActive(color)));
};

var buttonText = function buttonText(color) {
  return css(["background-color:transparent;color:", ";&:hover:not(:focus):not(:disabled){", ";}", ";&:active{", ";}", ";&[disabled],fieldset[disabled] &{color:", ";cursor:not-allowed;opacity:0.4;}"], function (_ref) {
    var theme = _ref.theme;
    return color === 'gray' ? defaultTextColor(theme) : getColorOrDefault(theme, colors.primaryColor, textColor(color));
  }, function (_ref2) {
    var theme = _ref2.theme;
    return hoverStyles(color, theme);
  }, function (_ref3) {
    var hover = _ref3.hover,
        theme = _ref3.theme;
    return hover && css(["", ";"], hoverStyles(color, theme));
  }, function (_ref4) {
    var theme = _ref4.theme;
    return activeStyles(color, theme);
  }, function (_ref5) {
    var active = _ref5.active,
        theme = _ref5.theme;
    return active && css(["", ";"], activeStyles(color, theme));
  }, function (_ref6) {
    var theme = _ref6.theme;
    return color === 'gray' ? defaultTextColor(theme) : getColorOrDefault(theme, colors.primaryColor, textColor(color));
  });
};

export var Button = styled( /*#__PURE__*/React.forwardRef(function (_ref7, ref) {
  var _ref7$component = _ref7.component,
      Component = _ref7$component === void 0 ? 'button' : _ref7$component,
      color = _ref7.color,
      condensed = _ref7.condensed,
      buttonSize = _ref7.buttonSize,
      hover = _ref7.hover,
      active = _ref7.active,
      focus = _ref7.focus,
      isUsingKeyboard = _ref7.isUsingKeyboard,
      props = _objectWithoutProperties(_ref7, ["component", "color", "condensed", "buttonSize", "hover", "active", "focus", "isUsingKeyboard"]);

  return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {
    ref: ref
  }));
})).withConfig({
  displayName: "Button",
  componentId: "pogfhz-0"
})(["", ""], function (_ref8) {
  var _ref8$buttonSize = _ref8.buttonSize,
      buttonSize = _ref8$buttonSize === void 0 ? 'md' : _ref8$buttonSize,
      _ref8$theme = _ref8.theme,
      theme = _ref8$theme === void 0 ? {} : _ref8$theme,
      _ref8$color = _ref8.color,
      color = _ref8$color === void 0 ? 'gray' : _ref8$color,
      _ref8$condensed = _ref8.condensed,
      condensed = _ref8$condensed === void 0 ? false : _ref8$condensed,
      focus = _ref8.focus,
      isUsingKeyboard = _ref8.isUsingKeyboard;

  var _getButtonPadding = getButtonPadding(buttonSize),
      paddingTopBottom = _getButtonPadding.paddingTopBottom,
      paddingLeftRight = _getButtonPadding.paddingLeftRight;

  return css(["", ";padding:", "px ", "px;", ";&::after{width:", ";}", " ", ";"], baseButtonStyles(buttonSize), paddingTopBottom, condensed ? 0 : paddingLeftRight, focusBottomBorder(isDarkTheme(theme), paddingTopBottom, isUsingKeyboard), "calc(100% - ".concat(condensed ? 0 : paddingLeftRight * 2, "px)"), function () {
    return focus && focusBorderUsingProp(isDarkTheme(theme), isUsingKeyboard);
  }, buttonText(color));
});