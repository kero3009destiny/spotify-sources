import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React, { useContext } from 'react';
import { ThemeProvider } from 'styled-components';
import { KeyboardDetectionContext } from "../../contexts/KeyboardDetectionContext";
import { Button } from "./Button";
var ButtonIconComponent = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _ref$theme = _ref.theme,
      theme = _ref$theme === void 0 ? {} : _ref$theme,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'button' : _ref$type,
      props = _objectWithoutProperties(_ref, ["theme", "type"]);

  var _useContext = useContext(KeyboardDetectionContext),
      isUsingKeyboard = _useContext.isUsingKeyboard;

  return /*#__PURE__*/React.createElement(ThemeProvider, {
    theme: theme
  }, /*#__PURE__*/React.createElement(Button, Object.assign({}, props, {
    ref: ref,
    type: type,
    isUsingKeyboard: isUsingKeyboard
  })));
});
var buttonIconHelpers = {
  darkTheme: {
    buttonIcon: 'dark'
  } // displayName: 'ButtonIcon',

};
/**
* **ButtonIcon** ![Status: Production](https://img.shields.io/badge/PRODUCTION-%2357B560|height=14)
*
* [GitHub](https://ghe.spotify.net/encore/web/tree/master/src/components/ButtonIcon) | [Storybook](https://encore-web.spotify.net/?path=/story/components-button-buttonicon--default) | [Encore](https://encore.spotify.net/web/components/button?format=figma-figma#buttonicon) | [Figma](https://www.figma.com/file/bnQXqGkLeiTlbk8JXGDcsX/Encore-Web---Light-Theme-Toolkit?node-id=0:449) |
*
* Icons can also be used as buttonsâ€”but it's important that they are easy to interpret. These should use Text color tokens.
*
* @example
* export const Default = () => (
*  <ButtonIcon>
*    <IconX aria-label="Close" />
*  </ButtonIcon>
*);
*
*/

export var ButtonIcon = Object.assign(ButtonIconComponent, buttonIconHelpers);
export default ButtonIcon;