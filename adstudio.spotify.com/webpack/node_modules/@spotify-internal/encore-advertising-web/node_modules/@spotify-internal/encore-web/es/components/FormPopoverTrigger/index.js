import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React from 'react';
import { screenXsMax, spacer4 } from '@spotify-internal/encore-foundation';
import styled, { ThemeProvider } from 'styled-components';
import { overlayDirections } from "../../styles/mixins/overlays";
import { ButtonIcon } from "../ButtonIcon";
import { IconHelpAlt } from "../Icon/IconHelpAlt";
import { PopoverTrigger } from "../PopoverTrigger";
var ThemedButtonIcon = styled(ButtonIcon).attrs(function (props) {
  var _props$theme;

  return {
    theme: ((_props$theme = props.theme) == null ? void 0 : _props$theme.formPopoverTrigger) === 'dark' ? ButtonIcon.darkTheme : {}
  };
}).withConfig({
  displayName: "FormPopoverTrigger__ThemedButtonIcon",
  componentId: "sc-1s63r5a-0"
})(["@media (max-width:", "){padding:", ";margin:-", ";}"], screenXsMax, spacer4, spacer4);

function FormPopoverTriggerComponent(_ref) {
  var _ref$theme = _ref.theme,
      theme = _ref$theme === void 0 ? {} : _ref$theme,
      popoverTriggerProps = _objectWithoutProperties(_ref, ["theme"]);

  return /*#__PURE__*/React.createElement(ThemeProvider, {
    theme: theme
  }, /*#__PURE__*/React.createElement(PopoverTrigger, popoverTriggerProps, /*#__PURE__*/React.createElement(ThemedButtonIcon, {
    type: "button"
  }, /*#__PURE__*/React.createElement(IconHelpAlt, {
    iconSize: 16
  }))));
}

var formPopoverTriggerHelpers = _objectSpread({
  darkTheme: {
    formPopoverTrigger: 'dark'
  }
}, overlayDirections);
/**
* **FormPopoverTrigger** ![Status: Production](https://img.shields.io/badge/PRODUCTION-%2357B560|height=14)
*
* [GitHub](https://ghe.spotify.net/encore/web/tree/master/src/components/FormPopoverTrigger) | [Storybook](https://encore-web.spotify.net/?path=/story/components-form-formpopovertrigger--default) | [Encore](https://encore.spotify.net/web/components/form?format=figma-figma#formpopovertrigger) | 
*
* The FormPopoverTrigger will trigger a Popover from a form element such as a specific form field, to provide additional context.
*
* @example
* export const Default = () => (
*  <FormPopoverTrigger
*    placement={FormPopoverTrigger.bottomRight}
*    overlay={
*      <Popover arrow={Popover.topLeft} popoverTitle="Title">
*        Aenean lacinia bibendum.
*      </Popover>
*    }
*  />
*);
*
*/


export var FormPopoverTrigger = Object.assign(FormPopoverTriggerComponent, formPopoverTriggerHelpers);
export default FormPopoverTrigger;