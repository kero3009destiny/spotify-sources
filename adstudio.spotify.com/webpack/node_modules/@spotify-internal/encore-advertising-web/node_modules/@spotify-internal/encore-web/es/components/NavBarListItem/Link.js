import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React from 'react';
import { gray10, green, spacer8, spacer12, spacer16, white } from '@spotify-internal/encore-foundation';
import styled, { css } from 'styled-components';
import { fontWeightBold, typeStyleBody1, typeStyleCta3 } from "../../styles";
import { colors, getColorOrDefault } from "../../styles/theme";
var transitionColor = '0.2s';
var transitionBg = '0.3s';

var isDarkTheme = function isDarkTheme(props) {
  var _props$theme;

  return ((_props$theme = props.theme) == null ? void 0 : _props$theme.navBarListItem) === 'dark';
};

var textStyle = function textStyle(props) {
  return props.sentenceCase ? typeStyleBody1() : typeStyleCta3();
};

var NavBarListItemLink = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var Component = _ref.component,
      isActive = _ref.isActive,
      isDisabled = _ref.isDisabled,
      sentenceCase = _ref.sentenceCase,
      rest = _objectWithoutProperties(_ref, ["component", "isActive", "isDisabled", "sentenceCase"]);

  return /*#__PURE__*/React.createElement(Component, Object.assign({
    ref: ref
  }, rest));
});
NavBarListItemLink.displayName = 'NavBarListItemLink';
export var Link = styled(NavBarListItemLink).withConfig({
  displayName: "Link",
  componentId: "sc-1p7id4y-0"
})(["", ";border:0;display:inline-block;font-weight:", ";padding-top:", ";padding-right:", ";padding-bottom:10px;padding-left:", ";text-decoration:none;transition:", " color linear;", ";", ";", ";li:first-child > &{margin-left:0;padding-left:0;}li:last-child > &{margin-right:0;padding-right:0;}&::after{background-color:transparent;content:'';display:block;height:2px;margin:0 auto -2px;position:relative;top:", ";transition:background-color ", ";width:", ";", ";}"], textStyle, fontWeightBold, spacer12, spacer16, spacer16, transitionColor, function (props) {
  return !props.isActive && !props.isDisabled && css(["color:", ";&:hover{color:", ";}&:active{color:", ";}&:focus{color:", ";}"], isDarkTheme(props) ? 'rgba(255,255,255,0.54)' : 'rgba(0,0,0,0.54)', isDarkTheme(props) ? 'rgba(255,255,255,1.0)' : 'rgba(24,24,24,1.0)', isDarkTheme(props) ? 'rgba(255,255,255,0.62)' : 'rgba(0,0,0,0.62)', isDarkTheme(props) ? 'rgba(255,255,255,0.74)' : 'rgba(0,0,0,0.75)');
}, function (props) {
  return props.isActive && css(["color:", ";"], isDarkTheme(props) ? white : gray10);
}, function (props) {
  return props.isDisabled && css(["color:", ";cursor:not-allowed;pointer-events:none;"], isDarkTheme(props) ? 'rgba(255,255,255,0.22)' : 'rgba(0,0,0,0.22)');
}, spacer8, transitionBg, function (props) {
  return props.sentenceCase ? spacer16 : '30px';
}, function (props) {
  return props.isActive && css(["background-color:", ";"], props.sentenceCase ? 'currentColor' : getColorOrDefault(props.theme, colors.primaryColor, green));
});