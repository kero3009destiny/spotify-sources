
// THIS FILE IS AUTO-GENERATED BY PROTO-REQUEST
/* eslint-disable */
"use strict";


// Exported root namespace
Object.defineProperty(exports, '__esModule', { value: true });
var $root = {};
var AdStudioBffAdAccountService = {};
    

$root.com = (function() {
    /**
     * Namespace com.
     * @exports com
     * @namespace
     */
    var com = {};

    com.spotify = (function() {
        /**
         * Namespace spotify.
         * @memberof com
         * @namespace
         */
        var spotify = {};

        spotify.adstudiobff = (function() {
            /**
             * Namespace adstudiobff.
             * @memberof com.spotify
             * @namespace
             */
            var adstudiobff = {};

            adstudiobff.proto = (function() {
                /**
                 * Namespace proto.
                 * @memberof com.spotify.adstudiobff
                 * @namespace
                 */
                var proto = {};

                proto.AdStudioBffAdAccountService = (function() {
                        
                    /**
                     * Properties of a AdStudioBffAdAccountService.
                     * @memberof com.spotify.adstudiobff.proto
                     */
                     
                     /**
                      * Fetch function type, set when instantiating this service class.
                      * @callback FetchFunction
                      * @param {string} uri
                      * @param {Object} options
                      * @returns {Promise<any>}
                      */
                     
                    /**
                     * An HttpServiceClient class to send requests to the AdStudioBffAdAccountService.
                     * @memberof com.spotify.adstudiobff.proto
                     * @classdesc AdStudioBffAdAccountService to send requests to the AdStudioBffAdAccountService.
                     * @param {FetchFunction} fetchFn
                     * @param {protorequest.HttpServiceConfigOptions} options
                     * @constructor
                     */
                    AdStudioBffAdAccountService = function(fetchFn, options) {
                        this.fetchFn = fetchFn;
                        this.host = options.host;
                        this.baseUrl = options.baseUrl;
                        this.version = options.version || "";
                        this.headers = options.headers || new Headers();
                    };
                
                    /**
                     * Sends the fetch request decorated with the configured host.  Only for internal use.
                     */
                    AdStudioBffAdAccountService.prototype.protoFetch = function(url, opts) {
                      return this.fetchFn(this.host + url, opts);
                    };
                
                    /**
                     * Sets the headers to be sent with all requests to this service.
                     * @function setHeaders
                     * @memberof com.spotify.adstudiobff.proto.AdStudioBffAdAccountService
                     * @param {Headers} headers
                     * @instance
                     * @returns {com.spotify.adstudiobff.proto.AdStudioBffAdAccountService} AdStudioBffAdAccountService
                     */
                    AdStudioBffAdAccountService.prototype.setHeaders = function(headers) {
                      this.headers = headers;
                      return this;
                    };
                
                    /**
                     * Get the headers being sent with all requests to this service.
                     * @function getHeaders
                     * @memberof com.spotify.adstudiobff.proto.AdStudioBffAdAccountService
                     * @instance
                     * @returns {Headers}
                     */
                    AdStudioBffAdAccountService.prototype.getHeaders = function() {
                      return this.headers;
                    };
                
                    /**
                     * Calls AdStudioBffAdAccountService.getAdAccountInfo
                     * @function getAdAccountInfo
                     * @memberof com.spotify.adstudiobff.proto.AdStudioBffAdAccountService
                     * @param {com.spotify.adstudiobff.proto.GetAdAccountInfoRequest} request
                     * @instance
                     * @returns {Promise<com.spotify.adstudiobff.proto.BffAdAccount>} getAdAccountInfo
                     */
                    AdStudioBffAdAccountService.prototype.getAdAccountInfo = function(request) {
                        const url = '/' + this.baseUrl + '/AdStudioBffAdAccountService/' + this.version +  (this.version ? '/' : '') + 'getAdAccountInfo';
                        const opts = {
                            method: 'POST',
                            body: JSON.stringify(request),
                            headers: this.headers
                        };
                        return this.protoFetch(url, opts)
                            .then(function(r) { return r.ok ? r.json() : Promise.reject(r); });
                    };

                    /**
                     * Calls AdStudioBffAdAccountService.getUserInfo
                     * @function getUserInfo
                     * @memberof com.spotify.adstudiobff.proto.AdStudioBffAdAccountService
                     * @param {google.protobuf.Empty} request
                     * @instance
                     * @returns {Promise<com.spotify.adstudiobff.proto.BffUser>} getUserInfo
                     */
                    AdStudioBffAdAccountService.prototype.getUserInfo = function(request) {
                        const url = '/' + this.baseUrl + '/AdStudioBffAdAccountService/' + this.version +  (this.version ? '/' : '') + 'getUserInfo';
                        const opts = {
                            method: 'POST',
                            body: JSON.stringify(request),
                            headers: this.headers
                        };
                        return this.protoFetch(url, opts)
                            .then(function(r) { return r.ok ? r.json() : Promise.reject(r); });
                    };

                    /**
                     * Calls AdStudioBffAdAccountService.getAdAccountsForUser
                     * @function getAdAccountsForUser
                     * @memberof com.spotify.adstudiobff.proto.AdStudioBffAdAccountService
                     * @param {google.protobuf.Empty} request
                     * @instance
                     * @returns {Promise<com.spotify.adstudiobff.proto.GetAdAccountsForUserResponse>} getAdAccountsForUser
                     */
                    AdStudioBffAdAccountService.prototype.getAdAccountsForUser = function(request) {
                        const url = '/' + this.baseUrl + '/AdStudioBffAdAccountService/' + this.version +  (this.version ? '/' : '') + 'getAdAccountsForUser';
                        const opts = {
                            method: 'POST',
                            body: JSON.stringify(request),
                            headers: this.headers
                        };
                        return this.protoFetch(url, opts)
                            .then(function(r) { return r.ok ? r.json() : Promise.reject(r); });
                    };

                    /**
                     * Calls AdStudioBffAdAccountService.editUser
                     * @function editUser
                     * @memberof com.spotify.adstudiobff.proto.AdStudioBffAdAccountService
                     * @param {com.spotify.adstudiobff.proto.EditUserRequest} request
                     * @instance
                     * @returns {Promise<google.protobuf.Empty>} editUser
                     */
                    AdStudioBffAdAccountService.prototype.editUser = function(request) {
                        const url = '/' + this.baseUrl + '/AdStudioBffAdAccountService/' + this.version +  (this.version ? '/' : '') + 'editUser';
                        const opts = {
                            method: 'POST',
                            body: JSON.stringify(request),
                            headers: this.headers
                        };
                        return this.protoFetch(url, opts)
                            .then(function(r) { return r.ok ? r.json() : Promise.reject(r); });
                    };

                    /**
                     * Calls AdStudioBffAdAccountService.userSignUp
                     * @function userSignUp
                     * @memberof com.spotify.adstudiobff.proto.AdStudioBffAdAccountService
                     * @param {com.spotify.adaccountservice.service.model.UserAccountSignUp} request
                     * @instance
                     * @returns {Promise<com.spotify.adaccountservice.service.LegacySignUpResponse>} userSignUp
                     */
                    AdStudioBffAdAccountService.prototype.userSignUp = function(request) {
                        const url = '/' + this.baseUrl + '/AdStudioBffAdAccountService/' + this.version +  (this.version ? '/' : '') + 'userSignUp';
                        const opts = {
                            method: 'POST',
                            body: JSON.stringify(request),
                            headers: this.headers
                        };
                        return this.protoFetch(url, opts)
                            .then(function(r) { return r.ok ? r.json() : Promise.reject(r); });
                    };

                    /**
                     * Calls AdStudioBffAdAccountService.signUp
                     * @function signUp
                     * @memberof com.spotify.adstudiobff.proto.AdStudioBffAdAccountService
                     * @param {google.protobuf.Empty} request
                     * @instance
                     * @returns {Promise<com.spotify.adaccountservice.service.SignUpResponse>} signUp
                     */
                    AdStudioBffAdAccountService.prototype.signUp = function(request) {
                        const url = '/' + this.baseUrl + '/AdStudioBffAdAccountService/' + this.version +  (this.version ? '/' : '') + 'signUp';
                        const opts = {
                            method: 'POST',
                            body: JSON.stringify(request),
                            headers: this.headers
                        };
                        return this.protoFetch(url, opts)
                            .then(function(r) { return r.ok ? r.json() : Promise.reject(r); });
                    };

                    /**
                     * Calls AdStudioBffAdAccountService.getSuperUserPermissions
                     * @function getSuperUserPermissions
                     * @memberof com.spotify.adstudiobff.proto.AdStudioBffAdAccountService
                     * @param {google.protobuf.Empty} request
                     * @instance
                     * @returns {Promise<com.spotify.adstudiobff.proto.GetSuperUserResponse>} getSuperUserPermissions
                     */
                    AdStudioBffAdAccountService.prototype.getSuperUserPermissions = function(request) {
                        const url = '/' + this.baseUrl + '/AdStudioBffAdAccountService/' + this.version +  (this.version ? '/' : '') + 'getSuperUserPermissions';
                        const opts = {
                            method: 'POST',
                            body: JSON.stringify(request),
                            headers: this.headers
                        };
                        return this.protoFetch(url, opts)
                            .then(function(r) { return r.ok ? r.json() : Promise.reject(r); });
                    };

                    /**
                     * Calls AdStudioBffAdAccountService.logTermsAcceptance
                     * @function logTermsAcceptance
                     * @memberof com.spotify.adstudiobff.proto.AdStudioBffAdAccountService
                     * @param {com.spotify.adstudiobff.proto.TermsAndConditionsRequest} request
                     * @instance
                     * @returns {Promise<google.protobuf.Empty>} logTermsAcceptance
                     */
                    AdStudioBffAdAccountService.prototype.logTermsAcceptance = function(request) {
                        const url = '/' + this.baseUrl + '/AdStudioBffAdAccountService/' + this.version +  (this.version ? '/' : '') + 'logTermsAcceptance';
                        const opts = {
                            method: 'POST',
                            body: JSON.stringify(request),
                            headers: this.headers
                        };
                        return this.protoFetch(url, opts)
                            .then(function(r) { return r.ok ? r.json() : Promise.reject(r); });
                    };

                    /**
                     * Calls AdStudioBffAdAccountService.getTermsAcceptance
                     * @function getTermsAcceptance
                     * @memberof com.spotify.adstudiobff.proto.AdStudioBffAdAccountService
                     * @param {com.spotify.adstudiobff.proto.TermsAndConditionsRequest} request
                     * @instance
                     * @returns {Promise<com.spotify.adstudiobff.proto.GetTermsAndConditionsResponse>} getTermsAcceptance
                     */
                    AdStudioBffAdAccountService.prototype.getTermsAcceptance = function(request) {
                        const url = '/' + this.baseUrl + '/AdStudioBffAdAccountService/' + this.version +  (this.version ? '/' : '') + 'getTermsAcceptance';
                        const opts = {
                            method: 'POST',
                            body: JSON.stringify(request),
                            headers: this.headers
                        };
                        return this.protoFetch(url, opts)
                            .then(function(r) { return r.ok ? r.json() : Promise.reject(r); });
                    };

                    /**
                     * Calls AdStudioBffAdAccountService.getUsersForCurrentAccount
                     * @function getUsersForCurrentAccount
                     * @memberof com.spotify.adstudiobff.proto.AdStudioBffAdAccountService
                     * @param {com.spotify.adstudiobff.proto.GetAdAccountInfoRequest} request
                     * @instance
                     * @returns {Promise<com.spotify.adstudiobff.proto.GetUsersForAdAccountWithRoleResponse>} getUsersForCurrentAccount
                     */
                    AdStudioBffAdAccountService.prototype.getUsersForCurrentAccount = function(request) {
                        const url = '/' + this.baseUrl + '/AdStudioBffAdAccountService/' + this.version +  (this.version ? '/' : '') + 'getUsersForCurrentAccount';
                        const opts = {
                            method: 'POST',
                            body: JSON.stringify(request),
                            headers: this.headers
                        };
                        return this.protoFetch(url, opts)
                            .then(function(r) { return r.ok ? r.json() : Promise.reject(r); });
                    };

                    /**
                     * Calls AdStudioBffAdAccountService.manageAdAccountRoles
                     * @function manageAdAccountRoles
                     * @memberof com.spotify.adstudiobff.proto.AdStudioBffAdAccountService
                     * @param {com.spotify.adstudiobff.proto.ManageAdAccountRolesRequest} request
                     * @instance
                     * @returns {Promise<google.protobuf.BoolValue>} manageAdAccountRoles
                     */
                    AdStudioBffAdAccountService.prototype.manageAdAccountRoles = function(request) {
                        const url = '/' + this.baseUrl + '/AdStudioBffAdAccountService/' + this.version +  (this.version ? '/' : '') + 'manageAdAccountRoles';
                        const opts = {
                            method: 'POST',
                            body: JSON.stringify(request),
                            headers: this.headers
                        };
                        return this.protoFetch(url, opts)
                            .then(function(r) { return r.ok ? r.json() : Promise.reject(r); });
                    };

                    /**
                     * Calls AdStudioBffAdAccountService.createAdAccount
                     * @function createAdAccount
                     * @memberof com.spotify.adstudiobff.proto.AdStudioBffAdAccountService
                     * @param {com.spotify.adstudiobff.proto.CreateAdAccountRequest} request
                     * @instance
                     * @returns {Promise<com.spotify.adaccountservice.service.CreateAdAccountResponse>} createAdAccount
                     */
                    AdStudioBffAdAccountService.prototype.createAdAccount = function(request) {
                        const url = '/' + this.baseUrl + '/AdStudioBffAdAccountService/' + this.version +  (this.version ? '/' : '') + 'createAdAccount';
                        const opts = {
                            method: 'POST',
                            body: JSON.stringify(request),
                            headers: this.headers
                        };
                        return this.protoFetch(url, opts)
                            .then(function(r) { return r.ok ? r.json() : Promise.reject(r); });
                    };

                    /**
                     * Calls AdStudioBffAdAccountService.getUserInfoFromSpotifyUserName
                     * @function getUserInfoFromSpotifyUserName
                     * @memberof com.spotify.adstudiobff.proto.AdStudioBffAdAccountService
                     * @param {com.spotify.adstudiobff.proto.UserNameRequest} request
                     * @instance
                     * @returns {Promise<com.spotify.adstudiobff.proto.GetUserInfoWithExternalIdResponse>} getUserInfoFromSpotifyUserName
                     */
                    AdStudioBffAdAccountService.prototype.getUserInfoFromSpotifyUserName = function(request) {
                        const url = '/' + this.baseUrl + '/AdStudioBffAdAccountService/' + this.version +  (this.version ? '/' : '') + 'getUserInfoFromSpotifyUserName';
                        const opts = {
                            method: 'POST',
                            body: JSON.stringify(request),
                            headers: this.headers
                        };
                        return this.protoFetch(url, opts)
                            .then(function(r) { return r.ok ? r.json() : Promise.reject(r); });
                    };

                    /**
                     * Calls AdStudioBffAdAccountService.updateAdAccount
                     * @function updateAdAccount
                     * @memberof com.spotify.adstudiobff.proto.AdStudioBffAdAccountService
                     * @param {com.spotify.adstudiobff.proto.BffUpdateAdAccountRequest} request
                     * @instance
                     * @returns {Promise<com.spotify.adstudiobff.proto.BffUpdateAdAccountResponse>} updateAdAccount
                     */
                    AdStudioBffAdAccountService.prototype.updateAdAccount = function(request) {
                        const url = '/' + this.baseUrl + '/AdStudioBffAdAccountService/' + this.version +  (this.version ? '/' : '') + 'updateAdAccount';
                        const opts = {
                            method: 'POST',
                            body: JSON.stringify(request),
                            headers: this.headers
                        };
                        return this.protoFetch(url, opts)
                            .then(function(r) { return r.ok ? r.json() : Promise.reject(r); });
                    };

                    /**
                     * Calls AdStudioBffAdAccountService.validateVatId
                     * @function validateVatId
                     * @memberof com.spotify.adstudiobff.proto.AdStudioBffAdAccountService
                     * @param {com.spotify.adstudiobff.proto.TaxIdValidationRequest} request
                     * @instance
                     * @returns {Promise<com.spotify.adstudiobff.proto.TaxIdValidationResponse>} validateVatId
                     */
                    AdStudioBffAdAccountService.prototype.validateVatId = function(request) {
                        const url = '/' + this.baseUrl + '/AdStudioBffAdAccountService/' + this.version +  (this.version ? '/' : '') + 'validateVatId';
                        const opts = {
                            method: 'POST',
                            body: JSON.stringify(request),
                            headers: this.headers
                        };
                        return this.protoFetch(url, opts)
                            .then(function(r) { return r.ok ? r.json() : Promise.reject(r); });
                    };

                    /**
                     * Calls AdStudioBffAdAccountService.setUserAsOwner
                     * @function setUserAsOwner
                     * @memberof com.spotify.adstudiobff.proto.AdStudioBffAdAccountService
                     * @param {com.spotify.adstudiobff.proto.SetUserAsOwnerRequest} request
                     * @instance
                     * @returns {Promise<google.protobuf.Empty>} setUserAsOwner
                     */
                    AdStudioBffAdAccountService.prototype.setUserAsOwner = function(request) {
                        const url = '/' + this.baseUrl + '/AdStudioBffAdAccountService/' + this.version +  (this.version ? '/' : '') + 'setUserAsOwner';
                        const opts = {
                            method: 'POST',
                            body: JSON.stringify(request),
                            headers: this.headers
                        };
                        return this.protoFetch(url, opts)
                            .then(function(r) { return r.ok ? r.json() : Promise.reject(r); });
                    };

                    /**
                     * Calls AdStudioBffAdAccountService.createNewAdAccountWithExistingUser
                     * @function createNewAdAccountWithExistingUser
                     * @memberof com.spotify.adstudiobff.proto.AdStudioBffAdAccountService
                     * @param {com.spotify.adaccountservice.service.model.AdAccountCreationInfo} request
                     * @instance
                     * @returns {Promise<com.spotify.adaccountservice.service.NewAdAccountCreationResponse>} createNewAdAccountWithExistingUser
                     */
                    AdStudioBffAdAccountService.prototype.createNewAdAccountWithExistingUser = function(request) {
                        const url = '/' + this.baseUrl + '/AdStudioBffAdAccountService/' + this.version +  (this.version ? '/' : '') + 'createNewAdAccountWithExistingUser';
                        const opts = {
                            method: 'POST',
                            body: JSON.stringify(request),
                            headers: this.headers
                        };
                        return this.protoFetch(url, opts)
                            .then(function(r) { return r.ok ? r.json() : Promise.reject(r); });
                    };

                    return AdStudioBffAdAccountService;
                })();

                return proto;
            })();

            return adstudiobff;
        })();

        return spotify;
    })();

    return com;
})();


exports["default"] = $root;
exports["$root"] = $root;
exports["AdStudioBffAdAccountService"] = AdStudioBffAdAccountService;
