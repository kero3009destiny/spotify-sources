"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.overlayDirections = exports.overlayColorTheme = exports.overlayBoxShadow = exports.overlayArrow = exports.overlay = exports.dialog = void 0;

var _encoreFoundation = require("@spotify-internal/encore-foundation");

var _styledComponents = require("styled-components");

var _styles = require("../../styles");

var _typeHelpers = require("../../typeHelpers");

var _semanticTheme = require("../semantic-theme");

var _triangle = require("./triangle");

//
// Overlays: Dialogs, Tooltips, Popovers, etc
// --------------------------------------------------
var overlayBoxShadow = "0 ".concat(_encoreFoundation.spacer4, " ").concat(_encoreFoundation.spacer12, " 0 rgba(0, 0, 0, 0.2)");
exports.overlayBoxShadow = overlayBoxShadow;
var overlayDirections = {
  top: 'top',
  topRight: 'topRight',
  topLeft: 'topLeft',
  left: 'left',
  leftTop: 'leftTop',
  leftBottom: 'leftBottom',
  bottom: 'bottom',
  bottomLeft: 'bottomLeft',
  bottomRight: 'bottomRight',
  right: 'right',
  rightTop: 'rightTop',
  rightBottom: 'rightBottom'
};
exports.overlayDirections = overlayDirections;

var overlayBase = function overlayBase(isDarkTheme) {
  return (0, _styledComponents.css)(["background:", ";border-radius:", ";box-shadow:", ";color:", ";font-weight:", ";text-align:left;"], isDarkTheme ? _encoreFoundation.gray20 : _encoreFoundation.white, _encoreFoundation.spacer8, overlayBoxShadow, isDarkTheme ? _encoreFoundation.gray95 : _encoreFoundation.gray10, _styles.fontWeightBook);
}; // TODO: rename to overlay after complete migration of components using original overlay


var overlayColorTheme = function overlayColorTheme(_ref) {
  var _ref$maxWidth = _ref.maxWidth,
      maxWidth = _ref$maxWidth === void 0 ? '296px' : _ref$maxWidth,
      _ref$colorSet = _ref.colorSet,
      colorSet = _ref$colorSet === void 0 ? 'base' : _ref$colorSet;
  return (0, _styledComponents.css)(["background:", ";color:", ";border-radius:", ";box-shadow:", ";font-weight:", ";text-align:left;cursor:default;display:inline-block;max-width:", ";position:relative;"], (0, _semanticTheme.cssColorValue)(_semanticTheme.semanticColors.backgroundElevatedBase, _semanticTheme.defaultTheme[colorSet].background.elevated.base), (0, _semanticTheme.cssColorValue)(_semanticTheme.semanticColors.textBase, _semanticTheme.defaultTheme[colorSet].text.base), _encoreFoundation.spacer8, overlayBoxShadow, _styles.fontWeightBook, maxWidth);
};

exports.overlayColorTheme = overlayColorTheme;

var dialog = function dialog(_ref2) {
  var colorSet = _ref2.colorSet;
  return (0, _styledComponents.css)(["", ";display:flex;flex-direction:column;max-height:90vh;z-index:", ";@media (min-width:", "){max-height:80vh;}"], overlayColorTheme({
    maxWidth: "calc(100% - ".concat(_encoreFoundation.spacer48, ")"),
    colorSet: colorSet
  }), _styles.zIndexDialog, _encoreFoundation.screenSmMin);
};

exports.dialog = dialog;

var overlay = function overlay(_ref3) {
  var _ref3$maxWidth = _ref3.maxWidth,
      maxWidth = _ref3$maxWidth === void 0 ? '296px' : _ref3$maxWidth,
      isDarkTheme = _ref3.isDarkTheme;
  return (0, _styledComponents.css)(["", ";cursor:default;display:inline-block;max-width:", ";position:relative;"], overlayBase(isDarkTheme), maxWidth);
};

exports.overlay = overlay;

var overlayArrow = function overlayArrow(direction) {
  switch (direction) {
    case 'top':
      return (0, _triangle.triangle)({
        offset: 'center',
        position: 'top'
      });

    case 'topLeft':
      return (0, _triangle.triangle)({
        offset: _encoreFoundation.spacer8,
        position: 'top'
      });

    case 'topRight':
      return (0, _triangle.triangle)({
        offset: "calc(100% - ".concat(_encoreFoundation.spacer24, ")"),
        position: 'top'
      });

    case 'bottom':
      return (0, _triangle.triangle)({
        offset: 'center',
        position: 'bottom'
      });

    case 'bottomLeft':
      return (0, _triangle.triangle)({
        offset: _encoreFoundation.spacer8,
        position: 'bottom'
      });

    case 'bottomRight':
      return (0, _triangle.triangle)({
        offset: "calc(100% - ".concat(_encoreFoundation.spacer24, ")"),
        position: 'bottom'
      });

    case 'left':
      return (0, _triangle.triangle)({
        offset: 'center',
        position: 'left'
      });

    case 'leftTop':
      return (0, _triangle.triangle)({
        offset: _encoreFoundation.spacer8,
        position: 'left'
      });

    case 'leftBottom':
      return (0, _triangle.triangle)({
        offset: "calc(100% - ".concat(_encoreFoundation.spacer24, ")"),
        position: 'left'
      });

    case 'right':
      return (0, _triangle.triangle)({
        offset: 'center',
        position: 'right'
      });

    case 'rightTop':
      return (0, _triangle.triangle)({
        offset: _encoreFoundation.spacer8,
        position: 'right'
      });

    case 'rightBottom':
      return (0, _triangle.triangle)({
        offset: "calc(100% - ".concat(_encoreFoundation.spacer24, ")"),
        position: 'right'
      });

    default:
      return (0, _typeHelpers.assertNever)(direction);
  }
};

exports.overlayArrow = overlayArrow;