"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nextTypeVariants = exports.getButtonPaddingValues = exports.getButtonPadding = exports.getButtonFont = exports.defaultTypeVariants = exports.buttonWithIconSidePadding = exports.buttonWithIconMargin = exports.buttonTransitionFade = exports.buttonTextTransform = exports.buttonStylesHover = exports.buttonStylesDisabled = exports.buttonStylesBase = exports.buttonStylesActive = exports.buttonSizes = exports.buttonPaddingTopBottom = exports.buttonPaddingLeftRight = exports.buttonLinkReset = exports.buttonIconSize = exports.buttonHoverScale = exports.buttonHeightMinimum = exports.buttonBorderRadius = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _encoreFoundation = require("@spotify-internal/encore-foundation");

var _styledComponents = require("styled-components");

var _EncoreContext = require("../../contexts/EncoreContext");

var _styles = require("../../styles");

var _typeHelpers = require("../../typeHelpers");

var _buttonHeightMinimum, _buttonPaddingTopBott, _buttonPaddingLeftRig, _buttonWithIconSidePa, _buttonWithIconMargin, _buttonIconSize;

var buttonSizes = {
  sm: 'sm',
  md: 'md',
  lg: 'lg'
};
exports.buttonSizes = buttonSizes;

/** Height of single-line buttons */
var buttonHeightMinimum = (_buttonHeightMinimum = {}, (0, _defineProperty2["default"])(_buttonHeightMinimum, buttonSizes.sm, _encoreFoundation.spacer32), (0, _defineProperty2["default"])(_buttonHeightMinimum, buttonSizes.md, _encoreFoundation.spacer48), (0, _defineProperty2["default"])(_buttonHeightMinimum, buttonSizes.lg, _encoreFoundation.spacer56), _buttonHeightMinimum);
exports.buttonHeightMinimum = buttonHeightMinimum;
var buttonBorderRadius = '500px';
exports.buttonBorderRadius = buttonBorderRadius;
var buttonTransitionFade = '33ms';
exports.buttonTransitionFade = buttonTransitionFade;
var buttonTextTransform = 'none';
exports.buttonTextTransform = buttonTextTransform;
var buttonHoverScale = '1.04';
exports.buttonHoverScale = buttonHoverScale;
var buttonPaddingTopBottom = (_buttonPaddingTopBott = {}, (0, _defineProperty2["default"])(_buttonPaddingTopBott, buttonSizes.sm, _encoreFoundation.spacer8), (0, _defineProperty2["default"])(_buttonPaddingTopBott, buttonSizes.md, '14px'), (0, _defineProperty2["default"])(_buttonPaddingTopBott, buttonSizes.lg, _encoreFoundation.spacer16), _buttonPaddingTopBott);
/**
 * Left and right padding for buttons without icons.
 * For buttons with `iconLeading` or `iconTrailing`, see `getButtonWithIconLeftRightPadding()`.
 */

exports.buttonPaddingTopBottom = buttonPaddingTopBottom;
var buttonPaddingLeftRight = (_buttonPaddingLeftRig = {}, (0, _defineProperty2["default"])(_buttonPaddingLeftRig, buttonSizes.sm, _encoreFoundation.spacer16), (0, _defineProperty2["default"])(_buttonPaddingLeftRig, buttonSizes.md, _encoreFoundation.spacer32), (0, _defineProperty2["default"])(_buttonPaddingLeftRig, buttonSizes.lg, _encoreFoundation.spacer48), _buttonPaddingLeftRig);
/**
 * Observed left &/or right padding for buttons with `iconLeading` or `iconTrailing`.
 * Note: "Observed" because the true padding is calculated, see `getButtonWithIconLeftRightPadding()`.
 */

exports.buttonPaddingLeftRight = buttonPaddingLeftRight;
var buttonWithIconSidePadding = (_buttonWithIconSidePa = {}, (0, _defineProperty2["default"])(_buttonWithIconSidePa, buttonSizes.sm, _encoreFoundation.spacer12), (0, _defineProperty2["default"])(_buttonWithIconSidePa, buttonSizes.md, _encoreFoundation.spacer20), (0, _defineProperty2["default"])(_buttonWithIconSidePa, buttonSizes.lg, _encoreFoundation.spacer24), _buttonWithIconSidePa);
/** Observed margin between icons and text (absolute positioned, not real margin) */

exports.buttonWithIconSidePadding = buttonWithIconSidePadding;
var buttonWithIconMargin = (_buttonWithIconMargin = {}, (0, _defineProperty2["default"])(_buttonWithIconMargin, buttonSizes.sm, '5px'), (0, _defineProperty2["default"])(_buttonWithIconMargin, buttonSizes.md, _encoreFoundation.spacer12), (0, _defineProperty2["default"])(_buttonWithIconMargin, buttonSizes.lg, '10px'), _buttonWithIconMargin);
/**
 * Standard icon size to use with each button size.
 * Note: These standard sizes aren't always used. See `getButtonIconSize()`.
 * */

exports.buttonWithIconMargin = buttonWithIconMargin;
var buttonIconSize = (_buttonIconSize = {}, (0, _defineProperty2["default"])(_buttonIconSize, buttonSizes.sm, _encoreFoundation.spacer16), (0, _defineProperty2["default"])(_buttonIconSize, buttonSizes.md, _encoreFoundation.spacer24), (0, _defineProperty2["default"])(_buttonIconSize, buttonSizes.lg, _encoreFoundation.spacer24), _buttonIconSize);
exports.buttonIconSize = buttonIconSize;
var defaultTypeVariants = {
  sm: 'finaleBold',
  md: 'violaBold',
  lg: 'balladBold'
};
exports.defaultTypeVariants = defaultTypeVariants;
var nextTypeVariants = {
  sm: 'mestoBold',
  md: 'balladBold',
  lg: 'cello'
};
exports.nextTypeVariants = nextTypeVariants;

var getNextButtonFont = function getNextButtonFont(buttonSize) {
  switch (buttonSize) {
    case buttonSizes.sm:
      return (0, _styles.mestoBold)();

    case buttonSizes.md:
      return (0, _styles.balladBold)();

    case buttonSizes.lg:
      return (0, _styles.cello)();

    default:
      return (0, _styles.balladBold)();
  }
};

var getButtonFont = function getButtonFont(buttonSize, status) {
  if (status === _EncoreContext.encoreContextStatus.next) {
    return getNextButtonFont(buttonSize);
  }

  switch (buttonSize) {
    case buttonSizes.sm:
      return (0, _styles.finaleBold)(true);

    case buttonSizes.md:
      return (0, _styles.violaBold)(true);

    case buttonSizes.lg:
      return (0, _styles.balladBold)(true);

    default:
      return (0, _styles.violaBold)(true);
  }
};
/**
 * Calculates side padding for buttons with `iconLeading` &/or `iconTrailing`.
 * Accounts for the icon's size, padding on the button edge, and margin between icons and text.
 * Used in ButtonPrimary and ButtonSecondary.
 */


exports.getButtonFont = getButtonFont;

var getButtonWithIconLeftRightPadding = function getButtonWithIconLeftRightPadding(buttonSize) {
  var padding = buttonWithIconSidePadding[buttonSize];
  var margin = buttonWithIconMargin[buttonSize];
  var iconSize = buttonIconSize[buttonSize];
  return (0, _typeHelpers.pxToInt)(padding) + (0, _typeHelpers.pxToInt)(iconSize) + (0, _typeHelpers.pxToInt)(margin);
};

var getButtonPaddingValues = function getButtonPaddingValues(buttonSize) {
  var borderWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var paddingTopBottom = "".concat((0, _typeHelpers.pxToInt)(buttonPaddingTopBottom[buttonSize]) - borderWidth, "px");
  var paddingLeftRight = "".concat((0, _typeHelpers.pxToInt)(buttonPaddingLeftRight[buttonSize]) - borderWidth, "px");
  var withIconPaddingLeftRight = "".concat(getButtonWithIconLeftRightPadding(buttonSize) - borderWidth, "px");
  return {
    paddingTopBottom: paddingTopBottom,
    paddingLeftRight: paddingLeftRight,
    withIconPaddingLeftRight: withIconPaddingLeftRight
  };
};

exports.getButtonPaddingValues = getButtonPaddingValues;

var getButtonPadding = function getButtonPadding(buttonSize, iconLeading, iconTrailing, iconOnly, borderWidth) {
  var _getButtonPaddingValu = getButtonPaddingValues(buttonSize, borderWidth),
      paddingTopBottom = _getButtonPaddingValu.paddingTopBottom,
      paddingLeftRight = _getButtonPaddingValu.paddingLeftRight,
      withIconPaddingLeftRight = _getButtonPaddingValu.withIconPaddingLeftRight;
  /** iconOnly buttons used fixed width & height instead of padding */


  var iconOnlyDimensions = (0, _styledComponents.css)(["width:", ";height:", ";"], buttonHeightMinimum[buttonSize], buttonHeightMinimum[buttonSize]);
  var noIconPadding = (0, _styledComponents.css)(["padding:", " ", ";"], paddingTopBottom, paddingLeftRight);
  var symmetricalIconPadding = (0, _styledComponents.css)(["padding:", " ", ";"], paddingTopBottom, withIconPaddingLeftRight);
  var asymmetricalIconPadding = (0, _styledComponents.css)(["padding-top:", ";padding-bottom:", ";padding-left:", ";padding-right:", ";[dir='rtl'] &{padding-right:", ";padding-left:", ";}"], paddingTopBottom, paddingTopBottom, iconLeading ? withIconPaddingLeftRight : paddingLeftRight, iconTrailing ? withIconPaddingLeftRight : paddingLeftRight, iconLeading ? withIconPaddingLeftRight : paddingLeftRight, iconTrailing ? withIconPaddingLeftRight : paddingLeftRight);

  if (iconOnly) {
    return iconOnlyDimensions;
  }

  if (!iconLeading && !iconTrailing) {
    return noIconPadding;
  }

  if (iconLeading && iconTrailing) {
    return symmetricalIconPadding;
  }

  return asymmetricalIconPadding;
};
/** Base styles shared by most buttons, including root style, focus reset and font sizes */


exports.getButtonPadding = getButtonPadding;

var buttonStylesBase = function buttonStylesBase(buttonSize, useBrowserDefaultFocusStyle, status) {
  return (0, _styledComponents.css)(["", ";", " ", ";background-color:transparent;border:0;border-radius:", ";display:inline-block;position:relative;text-align:center;text-decoration:none;text-transform:", ";touch-action:manipulation;transition-duration:", ";transition-property:background-color,border-color,color,box-shadow,filter,transform;user-select:none;vertical-align:middle;transform:translate3d(0,0,0);"], (0, _styles.rootStyle)(), !useBrowserDefaultFocusStyle && _styles.browserFocusReset, getButtonFont(buttonSize, status), buttonBorderRadius, buttonTextTransform, buttonTransitionFade);
};
/** Disabled styles shared by most buttons */


exports.buttonStylesBase = buttonStylesBase;
var buttonStylesDisabled = (0, _styledComponents.css)(["cursor:", ";opacity:", ";transform:scale(1);"], _styles.cursorDisabled, _styles.opacityDisabled);
/** Active styles shares by most buttons */

exports.buttonStylesDisabled = buttonStylesDisabled;
var buttonStylesActive = (0, _styledComponents.css)(["opacity:", ";outline:none;transform:scale(1);"], _styles.opacityActive);
/** Hover styles shares by most buttons */

exports.buttonStylesActive = buttonStylesActive;
var buttonStylesHover = (0, _styledComponents.css)(["transform:scale(", ");"], buttonHoverScale); // Reset a button to a link looking thing

exports.buttonStylesHover = buttonStylesHover;

var buttonLinkReset = function buttonLinkReset() {
  var useBrowserDefaultFocusStyle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return (0, _styledComponents.css)(["background-color:transparent;border:0;color:inherit;line-height:1;letter-spacing:inherit;padding:0;", ""], !useBrowserDefaultFocusStyle && _styles.browserFocusReset);
};

exports.buttonLinkReset = buttonLinkReset;