"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buttonStylesBaseLegacy = void 0;
exports.getButtonPaddingValuesLegacy = getButtonPaddingValuesLegacy;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _styledComponents = require("styled-components");

var _styles = require("../../styles");

var _buttons = require("./buttons");

var _focusBorders = require("./focusBorders");

var _buttonFontSizeLegacy, _buttonPaddingLegacy;

var buttonFontWeightLegacy = _styles.fontWeightBold;
var buttonLineHeightLegacy = '1';
var buttonFontSizeLegacy = (_buttonFontSizeLegacy = {}, (0, _defineProperty2["default"])(_buttonFontSizeLegacy, _buttons.buttonSizes.sm, '12px'), (0, _defineProperty2["default"])(_buttonFontSizeLegacy, _buttons.buttonSizes.md, '14px'), (0, _defineProperty2["default"])(_buttonFontSizeLegacy, _buttons.buttonSizes.lg, '16px'), _buttonFontSizeLegacy);
var buttonPaddingLegacy = (_buttonPaddingLegacy = {}, (0, _defineProperty2["default"])(_buttonPaddingLegacy, _buttons.buttonSizes.sm, '10px'), (0, _defineProperty2["default"])(_buttonPaddingLegacy, _buttons.buttonSizes.md, '17px'), (0, _defineProperty2["default"])(_buttonPaddingLegacy, _buttons.buttonSizes.lg, '20px'), _buttonPaddingLegacy);
/** Legacy base styles shared by most buttons, including root style, focus reset and font sizes */

var buttonStylesBaseLegacy = function buttonStylesBaseLegacy(buttonSize, useBrowserDefaultFocusStyle) {
  return (0, _styledComponents.css)(["", ";", " background-color:transparent;border:0;border-radius:", ";display:inline-block;font-size:", ";font-weight:", ";letter-spacing:2px;line-height:", ";text-align:center;text-decoration:none;text-transform:uppercase;touch-action:manipulation;transition-duration:", ";transition-property:background-color,border-color,color,box-shadow,filter,transform;user-select:none;vertical-align:middle;transform:translate3d(0,0,0);"], (0, _styles.rootStyle)(), !useBrowserDefaultFocusStyle && _focusBorders.browserFocusReset, _buttons.buttonBorderRadius, buttonFontSizeLegacy[buttonSize], buttonFontWeightLegacy, buttonLineHeightLegacy, _buttons.buttonTransitionFade);
};

exports.buttonStylesBaseLegacy = buttonStylesBaseLegacy;

function getButtonPaddingValuesLegacy(buttonSize) {
  var size = parseInt(buttonFontSizeLegacy[buttonSize], 10);
  var paddingTopBottom = parseInt(buttonPaddingLegacy[buttonSize], 10);
  var paddingLeftRight = size + paddingTopBottom * 2;
  return {
    paddingTopBottom: paddingTopBottom,
    paddingLeftRight: paddingLeftRight
  };
}