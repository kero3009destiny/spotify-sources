"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.colors = exports.colorThemeGenerator = void 0;
exports.getActiveColor = getActiveColor;
exports.getColorOrDefault = exports.getActiveTextColor = void 0;
exports.getHoverColor = getHoverColor;
exports.getSelectedColor = getSelectedColor;
exports.usePrimaryColor = exports.getTextColor = void 0;

var _react = require("react");

var _encoreFoundation = require("@spotify-internal/encore-foundation");

var _color = _interopRequireDefault(require("color"));

var _styledComponents = require("styled-components");

/**
 * Legacy color theme system.
 * TODO: Remove and replace with contents of semantic-theme.tsx.
 * @deprecated
 */

/**
 * Legacy color theming constant. Can no longer be used with Encore Web components.
 * Will be removed in an upcoming release. Please migrate to the semantic color theming system.
 * @deprecated
 */
var colors = {
  primaryColor: 'primaryColor',
  primaryColorText: 'primaryColorText',
  primaryColorActive: 'primaryColorActive',
  primaryColorActiveText: 'primaryColorActiveText',
  primaryColorHover: 'primaryColorHover',
  primaryColorFocus: 'primaryColorFocus',
  primaryColorFocusText: 'primaryColorFocusText',
  primaryColorSelected: 'primaryColorSelected',
  primaryColorSelectedText: 'primaryColorSelectedText',
  primaryColorOutline: 'primaryColorOutline',
  primaryColorDisabledLight: 'primaryColorDisabledLight',
  primaryColorDisabledDark: 'primaryColorDisabledDark'
};
/**
 * Legacy color theming function. Can no longer be used with Encore Web components.
 * Will be removed in an upcoming release. Please migrate to the semantic color theming system.
 * @deprecated
 */

exports.colors = colors;

var getTextColor = function getTextColor(value) {
  var convertedHex = (0, _color["default"])(value);
  return convertedHex.isLight() ? _encoreFoundation.black : _encoreFoundation.white;
};
/**
 * Legacy color theming function. Can no longer be used with Encore Web components.
 * Will be removed in an upcoming release. Please migrate to the semantic color theming system.
 * @deprecated
 */


exports.getTextColor = getTextColor;

var getFocusTextColor = function getFocusTextColor(value) {
  var convertedHex = (0, _color["default"])(value);
  return convertedHex.isLight() ? (0, _color["default"])('black').alpha(0.9).rgb().string() : (0, _color["default"])('white').alpha(0.8).rgb().string();
};
/**
 * Legacy color theming function. Can no longer be used with Encore Web components.
 * Will be removed in an upcoming release. Please migrate to the semantic color theming system.
 * @deprecated
 */


var getActiveTextColor = function getActiveTextColor(value) {
  var convertedHex = (0, _color["default"])(value);
  return convertedHex.isLight() ? (0, _color["default"])('black').alpha(0.5).rgb().string() : (0, _color["default"])('white').alpha(0.5).rgb().string();
};
/**
 * Legacy color theming function. Can no longer be used with Encore Web components.
 * Will be removed in an upcoming release. Please migrate to the semantic color theming system.
 * @deprecated
 */


exports.getActiveTextColor = getActiveTextColor;

function getHoverColor(color) {
  return (0, _color["default"])(color).mix((0, _color["default"])('white'), 0.25).hex();
}
/**
 * Legacy color theming function. Can no longer be used with Encore Web components.
 * Will be removed in an upcoming release. Please migrate to the semantic color theming system.
 * @deprecated
 */


function getActiveColor(color) {
  return (0, _color["default"])(color).mix((0, _color["default"])('black'), 0.3).hex();
}
/**
 * Legacy color theming function. Can no longer be used with Encore Web components.
 * Will be removed in an upcoming release. Please migrate to the semantic color theming system.
 * @deprecated
 */


function getSelectedColor(color) {
  return (0, _color["default"])(color).mix((0, _color["default"])('black'), 0.52).hex();
}
/**
 * Legacy color theming type. Can no longer be used with Encore Web components.
 * Will be removed in an upcoming release. Please migrate to the semantic color theming system.
 * @deprecated
 */


/**
 * Legacy color theme generator. Can no longer be used with Encore Web components.
 * Will be removed in an upcoming release. Please migrate to the semantic color theming system.
 * @deprecated
 */
var colorThemeGenerator = function colorThemeGenerator(_ref) {
  var primaryColor = _ref.primaryColor,
      primaryColorText = _ref.primaryColorText,
      primaryColorHover = _ref.primaryColorHover,
      primaryColorActive = _ref.primaryColorActive,
      primaryColorActiveText = _ref.primaryColorActiveText,
      primaryColorFocus = _ref.primaryColorFocus,
      primaryColorFocusText = _ref.primaryColorFocusText,
      primaryColorOutline = _ref.primaryColorOutline,
      primaryColorSelected = _ref.primaryColorSelected,
      primaryColorSelectedText = _ref.primaryColorSelectedText,
      primaryColorDisabledLight = _ref.primaryColorDisabledLight,
      primaryColorDisabledDark = _ref.primaryColorDisabledDark;

  if (!primaryColor) {
    return {};
  }

  return {
    colors: {
      primaryColor: primaryColor,
      primaryColorText: primaryColorText || getTextColor(primaryColor),
      primaryColorHover: primaryColorHover || getHoverColor(primaryColor),
      primaryColorActive: primaryColorActive || getActiveColor(primaryColor),
      primaryColorActiveText: primaryColorActiveText || getActiveTextColor(primaryColor),
      primaryColorFocus: primaryColorFocus || (0, _color["default"])(primaryColor).mix((0, _color["default"])('black'), 0.15).hex(),
      primaryColorFocusText: primaryColorFocusText || getFocusTextColor(primaryColor),
      primaryColorOutline: primaryColorOutline || (0, _color["default"])(primaryColor).alpha(0.2).rgb().string(),
      primaryColorSelected: primaryColorSelected || getSelectedColor(primaryColor),
      primaryColorSelectedText: primaryColorSelectedText || _encoreFoundation.white,
      primaryColorDisabledLight: primaryColorDisabledLight || (0, _color["default"])(primaryColor).mix((0, _color["default"])(_encoreFoundation.gray85), 0.8).hex(),
      primaryColorDisabledDark: primaryColorDisabledDark || (0, _color["default"])(primaryColor).mix((0, _color["default"])(_encoreFoundation.gray20), 0.8).hex()
    }
  };
};

exports.colorThemeGenerator = colorThemeGenerator;

/**
 * Legacy color theming function. Can no longer be used with Encore Web components.
 * Will be removed in an upcoming release. Please migrate to the semantic color theming system.
 * @deprecated
 */
var getColorOrDefault = function getColorOrDefault(theme, color, defaultColor) {
  return theme && theme.colors && theme.colors[color] || defaultColor;
};
/* Export hook for theme usage outside of styled-components */

/**
 * Legacy color theming function. Can no longer be used with Encore Web components.
 * Will be removed in an upcoming release. Please migrate to the semantic color theming system.
 * @deprecated
 */


exports.getColorOrDefault = getColorOrDefault;

var usePrimaryColor = function usePrimaryColor() {
  var defaultColor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _encoreFoundation.green;
  var themeContext = (0, _react.useContext)(_styledComponents.ThemeContext);
  return themeContext && themeContext.colors && themeContext.colors.primaryColor || defaultColor;
};

exports.usePrimaryColor = usePrimaryColor;