"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isLegacyVariant = isLegacyVariant;
exports.legacyPaddingCheck = legacyPaddingCheck;
exports.legacyVariantCheck = legacyVariantCheck;
exports.variantMap = exports.legacyVariants = exports.legacyVariantStyles = void 0;

var _EncoreContext = require("../../contexts/EncoreContext");

var _styles = require("../../styles");

var _typeHelpers = require("../../typeHelpers");

var legacyVariants = {
  display1: 'display1',
  display2: 'display2',
  heading1: 'heading1',
  heading2: 'heading2',
  heading3: 'heading3',
  heading4: 'heading4',
  body1: 'body1',
  body2: 'body2',
  body3: 'body3',
  body4: 'body4',
  cta1: 'cta1',
  cta2: 'cta2',
  cta3: 'cta3',
  cta4: 'cta4'
};
exports.legacyVariants = legacyVariants;
var variantMap = {
  bass: legacyVariants.display1,
  forte: legacyVariants.display2,
  altoBrio: legacyVariants.heading1,
  alto: legacyVariants.heading2,
  celloCanon: legacyVariants.heading3,
  cello: legacyVariants.heading4,
  ballad: legacyVariants.body1,
  viola: legacyVariants.body2,
  // finale: legacyVariants.body3,
  finale: legacyVariants.body4,
  // metronome: legacyVariants.cta1,
  metronome: legacyVariants.cta2,
  minuetBold: legacyVariants.cta3,
  finaleBold: legacyVariants.cta4
};
exports.variantMap = variantMap;

function getMappedVariant(variant) {
  return variantMap[variant];
}

function isLegacyVariant(variant) {
  return variant && legacyVariants.hasOwnProperty(variant);
}

function legacyVariantCheck(variant, status, deprecatedVariant) {
  // Find proper mapped value and return based on context status
  if (status === _EncoreContext.encoreContextStatus.deprecated && variantMap.hasOwnProperty(variant)) {
    return deprecatedVariant || getMappedVariant(variant);
  }

  return variant;
}

var legacyVariantStyles = function legacyVariantStyles(variant) {
  switch (variant) {
    case 'display1':
      return (0, _styles.typeStyleDisplay1)();

    case 'display2':
      return (0, _styles.typeStyleDisplay2)();

    case 'heading1':
      return (0, _styles.typeStyleH1)();

    case 'heading2':
      return (0, _styles.typeStyleH2)();

    case 'heading3':
      return (0, _styles.typeStyleH3)();

    case 'heading4':
      return (0, _styles.typeStyleH4)();

    case 'body1':
      return (0, _styles.typeStyleBody1)();

    case 'body2':
      return (0, _styles.typeStyleBody2)();

    case 'body3':
      return (0, _styles.typeStyleBody3)();

    case 'body4':
      return (0, _styles.typeStyleBody4)();

    case 'cta1':
      return (0, _styles.typeStyleCta1)();

    case 'cta2':
      return (0, _styles.typeStyleCta2)();

    case 'cta3':
      return (0, _styles.typeStyleCta3)();

    case 'cta4':
      return (0, _styles.typeStyleCta4)();

    default:
      return (0, _typeHelpers.assertNever)(variant);
  }
};

exports.legacyVariantStyles = legacyVariantStyles;

function legacyPaddingCheck(paddingBottom, condensed) {
  if (condensed) {
    return '0';
  }

  return paddingBottom;
}