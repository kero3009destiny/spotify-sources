"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _styles = require("../../styles");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var iconSizes = {
  16: '0.8pt',
  24: '1pt',
  32: '1.2pt',
  48: '1.4pt',
  64: '1.6pt'
};

var _default = _styledComponents["default"].svg.withConfig({
  displayName: "Svg",
  componentId: "ytk21e-0"
})(["", ";*{vector-effect:non-scaling-stroke;}*[fill='#181818']{", "}*[stroke='#181818']{", "}"], function (props) {
  return (0, _styledComponents.css)(["stroke-width:", ";"], iconSizes[props.iconSize]);
}, function (props) {
  return props.iconColor ? (0, _styledComponents.css)(["fill:", ";"], (0, _styles.cssColorValue)(props.iconColor)) : (0, _styledComponents.css)(["fill:currentColor;"]);
}, function (props) {
  return props.iconColor ? (0, _styledComponents.css)(["stroke:", ";"], (0, _styles.cssColorValue)(props.iconColor)) : (0, _styledComponents.css)(["stroke:currentColor;"]);
});

exports["default"] = _default;