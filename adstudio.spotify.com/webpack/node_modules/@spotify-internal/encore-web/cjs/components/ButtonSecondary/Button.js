"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.borderWidth = exports.Button = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _styles = require("../../styles");

var _excluded = ["component", "buttonSize", "hover", "active", "focus", "isUsingKeyboard", "useBrowserDefaultFocusStyle", "status", "buttonLegacy", "fullWidth", "iconLeading", "iconTrailing", "iconOnly"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var borderWidth = 1;
exports.borderWidth = borderWidth;
var Button = (0, _styledComponents["default"])( /*#__PURE__*/_react["default"].forwardRef(function (_ref, ref) {
  var _ref$component = _ref.component,
      Component = _ref$component === void 0 ? 'button' : _ref$component,
      buttonSize = _ref.buttonSize,
      hover = _ref.hover,
      active = _ref.active,
      focus = _ref.focus,
      isUsingKeyboard = _ref.isUsingKeyboard,
      useBrowserDefaultFocusStyle = _ref.useBrowserDefaultFocusStyle,
      status = _ref.status,
      buttonLegacy = _ref.buttonLegacy,
      fullWidth = _ref.fullWidth,
      iconLeading = _ref.iconLeading,
      iconTrailing = _ref.iconTrailing,
      iconOnly = _ref.iconOnly,
      props = (0, _objectWithoutProperties2["default"])(_ref, _excluded);
  return /*#__PURE__*/_react["default"].createElement(Component, Object.assign({}, props, {
    ref: ref
  }));
})).withConfig({
  displayName: "Button",
  componentId: "y0gtbx-0"
})(["", ""], function (_ref2) {
  var buttonSize = _ref2.buttonSize,
      hover = _ref2.hover,
      active = _ref2.active,
      focus = _ref2.focus,
      useBrowserDefaultFocusStyle = _ref2.useBrowserDefaultFocusStyle,
      status = _ref2.status,
      isUsingKeyboard = _ref2.isUsingKeyboard,
      fullWidth = _ref2.fullWidth,
      iconLeading = _ref2.iconLeading,
      iconTrailing = _ref2.iconTrailing,
      iconOnly = _ref2.iconOnly;
  var borderDefaultColor = (0, _styles.cssColorValue)(_styles.semanticColors.essentialSubdued);
  var borderHoverColor = (0, _styles.cssColorValue)(_styles.semanticColors.essentialBase);
  var hoverStyles = (0, _styledComponents.css)(["", " border-color:", ";"], !fullWidth && _styles.buttonStylesHover, borderHoverColor);
  var activeStyles = (0, _styledComponents.css)(["", " border-color:", ";"], _styles.buttonStylesActive, borderDefaultColor);
  var disabledStyles = (0, _styledComponents.css)(["", " border-color:", ";&::after{border-color:transparent;}"], _styles.buttonStylesDisabled, borderDefaultColor);
  var padding = (0, _styles.getButtonPadding)(buttonSize, iconLeading, iconTrailing, iconOnly, borderWidth);
  return (0, _styledComponents.css)(["", ";", " ", ";border:", "px solid ", ";color:", ";", " ", " &:hover{", ";}", " &:active{", ";}", " &[disabled],&[aria-disabled='true'],fieldset[disabled] &{", ";}"], (0, _styles.buttonStylesBase)(buttonSize, useBrowserDefaultFocusStyle, status), padding, !useBrowserDefaultFocusStyle && (0, _styles.focusGapBorder)(_styles.buttonBorderRadius, isUsingKeyboard, focus), borderWidth, borderDefaultColor, (0, _styles.cssColorValue)(_styles.semanticColors.textBase), fullWidth && (0, _styledComponents.css)(["width:100%;"]), (fullWidth || iconLeading || iconTrailing) && (0, _styledComponents.css)(["&&{display:inline-flex;align-items:center;justify-content:center;}"]), hoverStyles, hover && hoverStyles, activeStyles, active && activeStyles, disabledStyles);
});
exports.Button = Button;