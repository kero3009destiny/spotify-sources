"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ButtonLegacyComponent = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _BrowserDefaultFocusStyleContext = require("../../contexts/BrowserDefaultFocusStyleContext");

var _KeyboardDetectionContext = require("../../contexts/KeyboardDetectionContext");

var _deprecationWarnings = require("../../deprecationWarnings");

var _styles = require("../../styles");

var _excluded = ["component", "buttonSize", "hover", "active", "focus", "isUsingKeyboard", "useBrowserDefaultFocusStyle"],
    _excluded2 = ["component", "theme", "iconOnly", "iconLeading", "iconTrailing", "fullWidth"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Button Legacy
 * TODO: Archive in v6
 * */
var borderDefaultColor = (0, _styles.cssColorValue)(_styles.semanticColors.essentialSubdued);
var borderHoverColor = (0, _styles.cssColorValue)(_styles.semanticColors.essentialBase);
var borderWidth = 1;
var ButtonLegacy = (0, _styledComponents["default"])( /*#__PURE__*/_react["default"].forwardRef(function (_ref, ref) {
  var _ref$component = _ref.component,
      Component = _ref$component === void 0 ? 'button' : _ref$component,
      buttonSize = _ref.buttonSize,
      hover = _ref.hover,
      active = _ref.active,
      focus = _ref.focus,
      isUsingKeyboard = _ref.isUsingKeyboard,
      useBrowserDefaultFocusStyle = _ref.useBrowserDefaultFocusStyle,
      props = (0, _objectWithoutProperties2["default"])(_ref, _excluded);
  return /*#__PURE__*/_react["default"].createElement(Component, Object.assign({}, props, {
    ref: ref
  }));
})).withConfig({
  displayName: "ButtonLegacy",
  componentId: "sakkxz-0"
})(["", ""], function (_ref2) {
  var _ref2$buttonSize = _ref2.buttonSize,
      buttonSize = _ref2$buttonSize === void 0 ? 'md' : _ref2$buttonSize,
      hover = _ref2.hover,
      active = _ref2.active,
      focus = _ref2.focus,
      useBrowserDefaultFocusStyle = _ref2.useBrowserDefaultFocusStyle,
      isUsingKeyboard = _ref2.isUsingKeyboard;

  var _getButtonPaddingValu = (0, _styles.getButtonPaddingValuesLegacy)(buttonSize),
      paddingTopBottom = _getButtonPaddingValu.paddingTopBottom,
      paddingLeftRight = _getButtonPaddingValu.paddingLeftRight;

  var hoverStyles = (0, _styledComponents.css)(["", " border-color:", ";"], _styles.buttonStylesHover, borderHoverColor);
  var activeStyles = (0, _styledComponents.css)(["", " border-color:", ";"], _styles.buttonStylesActive, borderDefaultColor);
  var disabledStyles = (0, _styledComponents.css)(["", " border-color:", ";&::after{border-color:transparent;}"], _styles.buttonStylesDisabled, borderDefaultColor);
  return (0, _styledComponents.css)(["", ";padding:", "px ", "px;border:", "px solid ", ";color:", ";line-height:0.8;", " &:hover{", ";}", " &:active{", ";}", " &[disabled],&[aria-disabled='true'],fieldset[disabled] &{", ";}"], (0, _styles.buttonStylesBaseLegacy)(buttonSize, useBrowserDefaultFocusStyle), paddingTopBottom, paddingLeftRight, borderWidth, borderDefaultColor, (0, _styles.cssColorValue)(_styles.semanticColors.textBase), !useBrowserDefaultFocusStyle && (0, _styles.focusGapBorder)(_styles.buttonBorderRadius, isUsingKeyboard, focus), hoverStyles, hover && hoverStyles, activeStyles, active && activeStyles, disabledStyles);
});

var ButtonLegacyComponent = /*#__PURE__*/_react["default"].forwardRef(function (_ref3, ref) {
  var component = _ref3.component,
      theme = _ref3.theme,
      iconOnly = _ref3.iconOnly,
      iconLeading = _ref3.iconLeading,
      iconTrailing = _ref3.iconTrailing,
      fullWidth = _ref3.fullWidth,
      props = (0, _objectWithoutProperties2["default"])(_ref3, _excluded2);

  if (theme) {
    (0, _deprecationWarnings.deprecatedPropWarning)('theme', 'This component is intended to inherit its parentâ€™s color set or color.');
  }

  if (iconOnly || iconLeading || iconTrailing || fullWidth) {
    // eslint-disable-next-line no-console
    console.warn("ButtonSecondary's `buttonLegacy` feature does not support `iconOnly`, `iconLeading`, `iconTrailing`, or `fullWidth`");
  }

  var _useContext = (0, _react.useContext)(_KeyboardDetectionContext.KeyboardDetectionContext),
      isUsingKeyboard = _useContext.isUsingKeyboard;

  var _useContext2 = (0, _react.useContext)(_BrowserDefaultFocusStyleContext.BrowserDefaultFocusStyleContext),
      useBrowserDefaultFocusStyle = _useContext2.useBrowserDefaultFocusStyle;

  var rel = props.href && props.target === '_blank' ? 'noopener noreferrer' : null;
  return /*#__PURE__*/_react["default"].createElement(ButtonLegacy, Object.assign({}, props, {
    rel: rel,
    ref: ref,
    component: !component && props.href ? 'a' : component,
    isUsingKeyboard: isUsingKeyboard,
    useBrowserDefaultFocusStyle: useBrowserDefaultFocusStyle
  }));
});

exports.ButtonLegacyComponent = ButtonLegacyComponent;