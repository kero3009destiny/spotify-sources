import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["theme"];
import React from 'react';
import { deprecatedPropWarning } from "../../deprecationWarnings";
import { AccordionPanel } from "./Panel";
export var Accordion = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var theme = _ref.theme,
      props = _objectWithoutProperties(_ref, _excluded);

  if (theme) {
    deprecatedPropWarning('theme', 'This component is intended to inherit its parentâ€™s color set or color.');
  }

  return /*#__PURE__*/React.createElement(AccordionPanel, Object.assign({
    ref: ref
  }, props));
});
/**
* **Accordion** ![Status: Production](https://img.shields.io/badge/PRODUCTION-%2357B560|height=14)
*
* [GitHub](https://ghe.spotify.net/encore/web/tree/master/src/core/components/Accordion) | [Storybook](https://encore-web.spotify.net/?path=/docs/components-accordion--maximum-one-expanded-item) | [Encore](https://encore.spotify.net/web/components/accordion) | [Figma](https://www.figma.com/file/bnQXqGkLeiTlbk8JXGDcsX/Encore-Web---Light-Theme-Toolkit?node-id=4037:6869) |
*
* The Accordion displays items that expand to show more information when clicked or tapped.
*
* @example
* () => {
*  const [activeIndex, updateActive] = useState(-1);
*
*  return (
*    <Accordion aria-label="Accordion group for FAQs">
*      {items.map((item, index) => (
*        <AccordionItem key={`${index}-item`}>
*          <AccordionTitle
*            aria-expanded={index === activeIndex}
*            key={`${index}-title`}
*            onClick={e => {
*              e.preventDefault();
*              updateActive(index === activeIndex ? -1 : index);
*            }}
*            isExpanded={index === activeIndex}
*          >
*            {item.title}
*          </AccordionTitle>
*          <AccordionContent isExpanded={index === activeIndex}>{item.content}</AccordionContent>
*        </AccordionItem>
*      ))}
*    </Accordion>
*  );
*};
*
*/

export default Accordion;