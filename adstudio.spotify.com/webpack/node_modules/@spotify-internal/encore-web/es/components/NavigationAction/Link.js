import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["component", "active", "disabled", "isHover", "isFocus", "isUsingKeyboard"];
import React from 'react';
import { screenSmMin, screenXsMax, spacer16, spacer24, spacer48, spacer64 } from '@spotify-internal/encore-foundation';
import styled, { css } from 'styled-components';
import { absoluteBorder, browserFocusReset, defaultColorSet, focusBorderColor, focusBorderWidth, opacityDisabled, transitionFade } from "../../styles";
var hoverStyles = css(["background-color:var(--background-highlight,", ");"], defaultColorSet.background.highlight);
var activeStyles = css(["background-color:var(--background-press,", ");"], defaultColorSet.background.press);
var focusMargin = 0;

var focusBorder = function focusBorder(isUsingKeyboard) {
  if (isUsingKeyboard) {
    return css(["", " &:after{content:'';border:", "px solid ", ";", "}"], browserFocusReset, focusBorderWidth, focusBorderColor, absoluteBorder(focusMargin));
  }

  return browserFocusReset;
}; // eslint-disable-next-line prefer-arrow-callback


export var Link = styled(function NavigationActionLink(_ref) {
  var Component = _ref.component,
      active = _ref.active,
      disabled = _ref.disabled,
      isHover = _ref.isHover,
      isFocus = _ref.isFocus,
      isUsingKeyboard = _ref.isUsingKeyboard,
      props = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/React.createElement(Component, props);
}).withConfig({
  displayName: "Link",
  componentId: "sc-1dmldev-0"
})(["@media (max-width:", "){position:absolute;top:", ";right:", ";}@media (min-width:", "){height:", ";width:calc(100% + ", ");display:flex;margin-left:-", ";margin-right:-", ";margin-bottom:-", ";}color:var(--text-base,", ");background-color:var(--background-base,", ");display:flex;justify-content:center;align-items:center;line-height:1;position:relative;transition:color ", ";&:hover{", "}&:active{", "}", " ", " ", " &:focus{", "}", ";@media (max-width:", "){border-radius:2px;}"], screenXsMax, spacer16, spacer16, screenSmMin, spacer64, spacer48, spacer24, spacer24, spacer24, defaultColorSet.text.base, defaultColorSet.background.base, transitionFade, hoverStyles, activeStyles, function (props) {
  return props.isHover && hoverStyles;
}, function (props) {
  return props.active && activeStyles;
}, function (props) {
  return props.isFocus && focusBorder(props.isUsingKeyboard);
}, function (props) {
  return focusBorder(props.isUsingKeyboard);
}, function (props) {
  return props.disabled && css(["&,&:focus,&:active,&:hover{opacity:", ";cursor:not-allowed;}"], opacityDisabled);
}, screenXsMax);