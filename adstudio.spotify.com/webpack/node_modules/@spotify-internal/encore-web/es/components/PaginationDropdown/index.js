import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["theme"];
import React, { useContext } from 'react';
import { KeyboardDetectionContext } from "../../contexts/KeyboardDetectionContext";
import { deprecatedPropWarning } from "../../deprecationWarnings";
import { Arrow } from "./Arrow";
import { Button } from "./Button";
import { Container } from "./Container";
export var PaginationDropdown = function PaginationDropdown(_ref) {
  var theme = _ref.theme,
      props = _objectWithoutProperties(_ref, _excluded);

  if (theme) {
    deprecatedPropWarning('theme', 'This component is intended to inherit its parentâ€™s color set or color.');
  }

  var _useContext = useContext(KeyboardDetectionContext),
      isUsingKeyboard = _useContext.isUsingKeyboard;

  return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(Button, Object.assign({
    isUsingKeyboard: isUsingKeyboard,
    "aria-haspopup": "listbox"
  }, props)), /*#__PURE__*/React.createElement(Arrow, null));
};
/**
* **PaginationDropdown** ![Status: Production](https://img.shields.io/badge/PRODUCTION-%2357B560|height=14)
*
* [GitHub](https://ghe.spotify.net/encore/web/tree/master/src/core/components/PaginationDropdown) | [Storybook](https://encore-web.spotify.net/?path=/docs/components-pagination-paginationdropdown--default) | [Encore](https://encore.spotify.net/web/components/pagination?format=figma-figma#paginationdropdown) | [Figma](https://www.figma.com/file/bnQXqGkLeiTlbk8JXGDcsX/Encore-Web---Light-Theme-Toolkit?node-id=2311:140) |
*
* Use the PaginationDropdown component when you need a user to navigate between pages of data, by selecting a pagination number from a list.
*
* @example
* () => {
*  const dropdownListId = 'listbox';
*  const triggerId = 'pagination-dropdown';
*  const items = [{ rowCount: 10 }, { rowCount: 20 }, { rowCount: 30 }];
*
*  const { show, setShow, selected, setSelected, onClick, onHide, onKeyDown } = useA11yDropdown({
*    dropdownListId,
*    triggerId,
*    itemsLength: items.length,
*  });
*
*  return (
*    <PaginationDropdownTrigger
*      overlay={
*        show && (
*          <PaginationDropdownList
*            onKeyDown={e => onKeyDown(e)}
*            id={dropdownListId}
*            aria-activedescendant={`option-${selected}`}
*          >
*            {items.map((item, index) => (
*              <PaginationDropdownItem key={index}>
*                <PaginationDropdownLink
*                  href="#"
*                  onFocus={() => setSelected(index)}
*                  onClick={e => onClick(e, index)}
*                  selected={selected === index}
*                  key={`option-${index}`}
*                  id={`option-${index}`}
*                >
*                  {item.rowCount}
*                </PaginationDropdownLink>
*              </PaginationDropdownItem>
*            ))}
*          </PaginationDropdownList>
*        )
*      }
*      placement={PaginationDropdownTrigger.bottom}
*      onShow={() => setShow(true)}
*      onHide={onHide}
*    >
*      <PaginationDropdown
*        id={triggerId}
*        aria-labelledby={triggerId}
*        aria-expanded={show || undefined}
*      >
*        {items[selected].rowCount}
*      </PaginationDropdown>
*    </PaginationDropdownTrigger>
*  );
*};
*
*/

export default PaginationDropdown;