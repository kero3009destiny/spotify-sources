import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["component", "buttonSize", "hover", "active", "focus", "fallbackSet", "colorSet", "useBrowserDefaultFocusStyle", "UNSAFE_colorSet"],
    _excluded2 = ["component", "colorSet", "buttonSize", "children", "className", "UNSAFE_colorSet", "iconLeading", "iconTrailing", "iconOnly", "fullWidth", "theme"];
import React, { useContext } from 'react';
import styled, { css } from 'styled-components';
import { BrowserDefaultFocusStyleContext } from "../../contexts/BrowserDefaultFocusStyleContext";
import { KeyboardDetectionContext } from "../../contexts/KeyboardDetectionContext";
import { renamedPropWarning } from "../../deprecationWarnings";
import { addColorSet, buttonBorderRadius, buttonStylesBaseLegacy, buttonStylesDisabled, buttonStylesHover, cssColorSet, defaultTheme, focusBorderColor, getButtonPaddingValuesLegacy } from "../../styles";
import { ButtonFocus } from "./ButtonFocus";
/**
 * Button Legacy
 * TODO: Archive in v6
 * */

/**
 * ButtonLegacyInner contains styles that make the button look like a button,
 * and is the Button subcomponent that is themable using ButtonPrimary's colorSet prop.
 */

var ButtonLegacyInner = styled.div.withConfig({
  displayName: "ButtonLegacy__ButtonLegacyInner",
  componentId: "o653de-0"
})(["", " ", ""], function (_ref) {
  var UNSAFE_colorSet = _ref.UNSAFE_colorSet;
  return UNSAFE_colorSet ? cssColorSet(UNSAFE_colorSet) : '';
}, function (_ref2) {
  var fallbackSet = _ref2.fallbackSet,
      buttonSize = _ref2.buttonSize;

  var _getButtonPaddingValu = getButtonPaddingValuesLegacy(buttonSize),
      paddingTopBottom = _getButtonPaddingValu.paddingTopBottom,
      paddingLeftRight = _getButtonPaddingValu.paddingLeftRight;

  return css(["display:flex;align-items:center;background-color:var(--background-base,", ");color:var(--text-base,", ");border-radius:", ";font-size:inherit;padding:", "px ", "px;"], fallbackSet.background.base, fallbackSet.text.base, buttonBorderRadius, paddingTopBottom, paddingLeftRight);
});
var ButtonLegacy = styled( /*#__PURE__*/React.forwardRef(function (_ref3, ref) {
  var _ref3$component = _ref3.component,
      Component = _ref3$component === void 0 ? 'button' : _ref3$component,
      buttonSize = _ref3.buttonSize,
      hover = _ref3.hover,
      active = _ref3.active,
      focus = _ref3.focus,
      fallbackSet = _ref3.fallbackSet,
      colorSet = _ref3.colorSet,
      useBrowserDefaultFocusStyle = _ref3.useBrowserDefaultFocusStyle,
      UNSAFE_colorSet = _ref3.UNSAFE_colorSet,
      props = _objectWithoutProperties(_ref3, _excluded);

  return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {
    ref: ref
  }));
})).withConfig({
  displayName: "ButtonLegacy",
  componentId: "o653de-1"
})(["", ""], function (_ref4) {
  var fallbackSet = _ref4.fallbackSet,
      useBrowserDefaultFocusStyle = _ref4.useBrowserDefaultFocusStyle,
      buttonSize = _ref4.buttonSize,
      hover = _ref4.hover,
      active = _ref4.active,
      focus = _ref4.focus;
  var disabledStyles = css(["", "{", ";background-color:var(--background-base,", ");color:var(--text-base,", ");}", "{border-color:transparent;}"], ButtonLegacyInner, buttonStylesDisabled, fallbackSet.background.base, fallbackSet.text.base, ButtonFocus);
  var activeStyles = css(["", "{background-color:var(--background-press,", ");box-shadow:none;transform:scale(1);}", "{transform:scale(1);}"], ButtonLegacyInner, fallbackSet.background.press, ButtonFocus);
  var hoverStyles = css(["", ",", "{", "}", "{background-color:var(--background-highlight,", ");}"], ButtonLegacyInner, ButtonFocus, buttonStylesHover, ButtonLegacyInner, fallbackSet.background.highlight);
  var focusStyles = css(["", "{border-color:", ";}"], ButtonFocus, focusBorderColor);
  return css(["", ";align-self:center;padding:0;&:hover{", ";}", " &:active{", ";}", " &:focus{", ";}", " &[disabled],&[aria-disabled='true'],fieldset[disabled] &{", "}"], buttonStylesBaseLegacy(buttonSize, useBrowserDefaultFocusStyle), hoverStyles, hover && css(["&&{", "}"], hoverStyles), activeStyles, active && css(["&&{", "}"], activeStyles), focusStyles, focus && css(["&&{", "}"], focusStyles), disabledStyles);
});
export var ButtonLegacyComponent = /*#__PURE__*/React.forwardRef(function (_ref5, ref) {
  var component = _ref5.component,
      _ref5$colorSet = _ref5.colorSet,
      colorSet = _ref5$colorSet === void 0 ? 'brightAccent' : _ref5$colorSet,
      _ref5$buttonSize = _ref5.buttonSize,
      buttonSize = _ref5$buttonSize === void 0 ? 'md' : _ref5$buttonSize,
      children = _ref5.children,
      className = _ref5.className,
      UNSAFE_colorSet = _ref5.UNSAFE_colorSet,
      iconLeading = _ref5.iconLeading,
      iconTrailing = _ref5.iconTrailing,
      iconOnly = _ref5.iconOnly,
      fullWidth = _ref5.fullWidth,
      theme = _ref5.theme,
      props = _objectWithoutProperties(_ref5, _excluded2);

  if (theme) {
    renamedPropWarning('theme', 'colorSet');
  }

  if (iconOnly || iconLeading || iconTrailing || fullWidth) {
    // eslint-disable-next-line no-console
    console.warn("ButtonPrimary's `buttonLegacy` feature does not support `iconOnly`, `iconLeading`, `iconTrailing`, or `fullWidth`");
  }

  var _useContext = useContext(KeyboardDetectionContext),
      isUsingKeyboard = _useContext.isUsingKeyboard;

  var _useContext2 = useContext(BrowserDefaultFocusStyleContext),
      useBrowserDefaultFocusStyle = _useContext2.useBrowserDefaultFocusStyle;

  var rel = props.href && props.target === '_blank' ? 'noopener noreferrer' : null;
  var fallbackSet = defaultTheme[colorSet];
  return /*#__PURE__*/React.createElement(ButtonLegacy, Object.assign({}, props, {
    rel: rel,
    ref: ref,
    component: !component && props.href ? 'a' : component,
    buttonSize: buttonSize,
    fallbackSet: fallbackSet,
    useBrowserDefaultFocusStyle: useBrowserDefaultFocusStyle
  }), /*#__PURE__*/React.createElement(ButtonLegacyInner, {
    className: UNSAFE_colorSet ? className : addColorSet(colorSet, className),
    UNSAFE_colorSet: UNSAFE_colorSet,
    buttonSize: buttonSize,
    fallbackSet: fallbackSet
  }, children), !useBrowserDefaultFocusStyle && /*#__PURE__*/React.createElement(ButtonFocus, {
    isUsingKeyboard: isUsingKeyboard
  }));
});