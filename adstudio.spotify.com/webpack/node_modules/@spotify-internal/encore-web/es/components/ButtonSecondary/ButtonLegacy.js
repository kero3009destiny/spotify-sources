import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["component", "buttonSize", "hover", "active", "focus", "isUsingKeyboard", "useBrowserDefaultFocusStyle"],
    _excluded2 = ["component", "theme", "iconOnly", "iconLeading", "iconTrailing", "fullWidth"];
import React, { useContext } from 'react';
import styled, { css } from 'styled-components';
import { BrowserDefaultFocusStyleContext } from "../../contexts/BrowserDefaultFocusStyleContext";
import { KeyboardDetectionContext } from "../../contexts/KeyboardDetectionContext";
import { deprecatedPropWarning } from "../../deprecationWarnings";
import { buttonBorderRadius, buttonStylesActive, buttonStylesBaseLegacy, buttonStylesDisabled, buttonStylesHover, cssColorValue, focusGapBorder, getButtonPaddingValuesLegacy, semanticColors } from "../../styles";

/**
 * Button Legacy
 * TODO: Archive in v6
 * */
var borderDefaultColor = cssColorValue(semanticColors.essentialSubdued);
var borderHoverColor = cssColorValue(semanticColors.essentialBase);
var borderWidth = 1;
var ButtonLegacy = styled( /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _ref$component = _ref.component,
      Component = _ref$component === void 0 ? 'button' : _ref$component,
      buttonSize = _ref.buttonSize,
      hover = _ref.hover,
      active = _ref.active,
      focus = _ref.focus,
      isUsingKeyboard = _ref.isUsingKeyboard,
      useBrowserDefaultFocusStyle = _ref.useBrowserDefaultFocusStyle,
      props = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {
    ref: ref
  }));
})).withConfig({
  displayName: "ButtonLegacy",
  componentId: "sakkxz-0"
})(["", ""], function (_ref2) {
  var _ref2$buttonSize = _ref2.buttonSize,
      buttonSize = _ref2$buttonSize === void 0 ? 'md' : _ref2$buttonSize,
      hover = _ref2.hover,
      active = _ref2.active,
      focus = _ref2.focus,
      useBrowserDefaultFocusStyle = _ref2.useBrowserDefaultFocusStyle,
      isUsingKeyboard = _ref2.isUsingKeyboard;

  var _getButtonPaddingValu = getButtonPaddingValuesLegacy(buttonSize),
      paddingTopBottom = _getButtonPaddingValu.paddingTopBottom,
      paddingLeftRight = _getButtonPaddingValu.paddingLeftRight;

  var hoverStyles = css(["", " border-color:", ";"], buttonStylesHover, borderHoverColor);
  var activeStyles = css(["", " border-color:", ";"], buttonStylesActive, borderDefaultColor);
  var disabledStyles = css(["", " border-color:", ";&::after{border-color:transparent;}"], buttonStylesDisabled, borderDefaultColor);
  return css(["", ";padding:", "px ", "px;border:", "px solid ", ";color:", ";line-height:0.8;", " &:hover{", ";}", " &:active{", ";}", " &[disabled],&[aria-disabled='true'],fieldset[disabled] &{", ";}"], buttonStylesBaseLegacy(buttonSize, useBrowserDefaultFocusStyle), paddingTopBottom, paddingLeftRight, borderWidth, borderDefaultColor, cssColorValue(semanticColors.textBase), !useBrowserDefaultFocusStyle && focusGapBorder(buttonBorderRadius, isUsingKeyboard, focus), hoverStyles, hover && hoverStyles, activeStyles, active && activeStyles, disabledStyles);
});
export var ButtonLegacyComponent = /*#__PURE__*/React.forwardRef(function (_ref3, ref) {
  var component = _ref3.component,
      theme = _ref3.theme,
      iconOnly = _ref3.iconOnly,
      iconLeading = _ref3.iconLeading,
      iconTrailing = _ref3.iconTrailing,
      fullWidth = _ref3.fullWidth,
      props = _objectWithoutProperties(_ref3, _excluded2);

  if (theme) {
    deprecatedPropWarning('theme', 'This component is intended to inherit its parentâ€™s color set or color.');
  }

  if (iconOnly || iconLeading || iconTrailing || fullWidth) {
    // eslint-disable-next-line no-console
    console.warn("ButtonSecondary's `buttonLegacy` feature does not support `iconOnly`, `iconLeading`, `iconTrailing`, or `fullWidth`");
  }

  var _useContext = useContext(KeyboardDetectionContext),
      isUsingKeyboard = _useContext.isUsingKeyboard;

  var _useContext2 = useContext(BrowserDefaultFocusStyleContext),
      useBrowserDefaultFocusStyle = _useContext2.useBrowserDefaultFocusStyle;

  var rel = props.href && props.target === '_blank' ? 'noopener noreferrer' : null;
  return /*#__PURE__*/React.createElement(ButtonLegacy, Object.assign({}, props, {
    rel: rel,
    ref: ref,
    component: !component && props.href ? 'a' : component,
    isUsingKeyboard: isUsingKeyboard,
    useBrowserDefaultFocusStyle: useBrowserDefaultFocusStyle
  }));
});