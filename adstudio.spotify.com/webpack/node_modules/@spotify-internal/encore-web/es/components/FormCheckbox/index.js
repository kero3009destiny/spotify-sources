import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["small", "indeterminate", "id", "children", "semanticColor", "isHover", "isFocus", "isActive", "theme"];
import React, { useContext } from 'react';
import { KeyboardDetectionContext } from "../../contexts/KeyboardDetectionContext";
import { renamedPropWarning } from "../../deprecationWarnings";
import { VisuallyHidden } from "../VisuallyHidden";
import { Checkbox } from "./Checkbox";
import { Indicator } from "./Indicator";
import { Label } from "./Label";
import { TextForLabel } from "./TextForLabel";
export var FormCheckbox = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var small = _ref.small,
      indeterminate = _ref.indeterminate,
      id = _ref.id,
      children = _ref.children,
      _ref$semanticColor = _ref.semanticColor,
      semanticColor = _ref$semanticColor === void 0 ? 'essentialBrightAccent' : _ref$semanticColor,
      isHover = _ref.isHover,
      isFocus = _ref.isFocus,
      isActive = _ref.isActive,
      theme = _ref.theme,
      props = _objectWithoutProperties(_ref, _excluded);

  if (theme) {
    renamedPropWarning('theme', 'semanticColor');
  }

  var _useContext = useContext(KeyboardDetectionContext),
      isUsingKeyboard = _useContext.isUsingKeyboard;

  return /*#__PURE__*/React.createElement(Checkbox, null, /*#__PURE__*/React.createElement(VisuallyHidden, Object.assign({
    component: "input",
    type: "checkbox",
    ref: ref,
    id: id
  }, props)), /*#__PURE__*/React.createElement(Label, {
    htmlFor: id
  }, /*#__PURE__*/React.createElement(Indicator, {
    className: indeterminate ? 'Encore_indeterminate' : '',
    indeterminate: indeterminate,
    isUsingKeyboard: isUsingKeyboard,
    semanticColor: semanticColor,
    isHover: isHover,
    isFocus: isFocus,
    isActive: isActive
  }), children && /*#__PURE__*/React.createElement(TextForLabel, {
    small: small
  }, children)));
});
/**
* **FormCheckbox** ![Status: Production](https://img.shields.io/badge/PRODUCTION-%2357B560|height=14)
*
* [GitHub](https://ghe.spotify.net/encore/web/tree/master/src/core/components/FormCheckbox) | [Storybook](https://encore-web.spotify.net/?path=/docs/components-form-formcheckbox--default) | [Encore](https://encore.spotify.net/web/components/selectors?format=figma-figma#formcheckbox) | [Figma](https://www.figma.com/file/bnQXqGkLeiTlbk8JXGDcsX/Encore-Web---Light-Theme-Toolkit?node-id=0:568) |
*
* FormCheckbox allow users to select one or more items from a set, turn an option on or off, or acknowlege something. Used within a Form component.
*
* @example
* () => (
*  <FormGroup label="Checkbox example" withFieldset>
*    <FormCheckbox id="option-1" defaultChecked>
*      Option 1
*    </FormCheckbox>
*    <FormCheckbox id="option-2">Option 2</FormCheckbox>
*  </FormGroup>
*);
*
*/

export default FormCheckbox;