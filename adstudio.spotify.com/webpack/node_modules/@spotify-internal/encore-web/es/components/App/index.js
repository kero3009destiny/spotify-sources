import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["className", "navigation", "contentMaxWidth", "sidebarWidth", "banner", "content", "footer", "useKeyboardDetection", "colorSet", "semanticBackgroundColor", "backgroundColor", "theme"];
import React from 'react';
import { renamedPropWarning } from "../../deprecationWarnings";
import { addColorSet } from "../../styles";
import { KeyboardDetectionProvider } from "../KeyboardDetectionProvider";
import { Aside } from "./Aside";
import { Banner } from "./Banner";
import { Container } from "./Container";
import { Content } from "./Content";
import { Main } from "./Main";
export var App = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var className = _ref.className,
      navigation = _ref.navigation,
      contentMaxWidth = _ref.contentMaxWidth,
      sidebarWidth = _ref.sidebarWidth,
      banner = _ref.banner,
      content = _ref.content,
      footer = _ref.footer,
      _ref$useKeyboardDetec = _ref.useKeyboardDetection,
      useKeyboardDetection = _ref$useKeyboardDetec === void 0 ? true : _ref$useKeyboardDetec,
      _ref$colorSet = _ref.colorSet,
      colorSet = _ref$colorSet === void 0 ? 'base' : _ref$colorSet,
      _ref$semanticBackgrou = _ref.semanticBackgroundColor,
      semanticBackgroundColor = _ref$semanticBackgrou === void 0 ? 'backgroundBase' : _ref$semanticBackgrou,
      backgroundColor = _ref.backgroundColor,
      theme = _ref.theme,
      props = _objectWithoutProperties(_ref, _excluded);

  if (backgroundColor) {
    renamedPropWarning('backgroundColor', 'semanticBackgroundColor');
  }

  if (theme) {
    renamedPropWarning('theme', 'colorSet');
  }

  var Wrapper = useKeyboardDetection ? KeyboardDetectionProvider : React.Fragment;
  return /*#__PURE__*/React.createElement(Wrapper, null, /*#__PURE__*/React.createElement(Container, Object.assign({
    semanticBackgroundColor: semanticBackgroundColor,
    className: addColorSet(colorSet, className),
    ref: ref
  }, props), /*#__PURE__*/React.createElement(Aside, {
    sidebarWidth: sidebarWidth
  }, navigation), /*#__PURE__*/React.createElement(Main, {
    contentMaxWidth: contentMaxWidth,
    sidebarWidth: sidebarWidth
  }, /*#__PURE__*/React.createElement(Banner, null, banner), /*#__PURE__*/React.createElement(Content, null, content), /*#__PURE__*/React.createElement("div", null, footer))));
});
/**
* **App** ![Status: Production](https://img.shields.io/badge/PRODUCTION-%2357B560|height=14)
*
* [GitHub](https://ghe.spotify.net/encore/web/tree/master/src/core/components/App) | [Storybook](https://encore-web.spotify.net/?path=/docs/components-app--default) | [Encore](https://encore.spotify.net/web/components/app-layout?format=figma-figma#app) | 
*
* The App component is a content wrapper that can use a combination of components to build a basic responsive layout structure.
*
* @example
* () => (
*  <App
*    navigation={<SampleNavigation />}
*    banner={<SampleBanner />}
*    content={
*      <div>
*        <SampleAppBanner />
*        <Type paddingBottom="0.75em" as="h2" variant="alto">
*          Body title using Type
*        </Type>
*        <SampleBodyType />
*      </div>
*    }
*    footer={<SampleFooter />}
*  />
*);
*
*/

export default App;