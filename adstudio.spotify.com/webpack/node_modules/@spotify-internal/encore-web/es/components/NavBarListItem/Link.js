import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["component", "isActive", "isDisabled", "isHover", "isFocus", "sentenceCase"];
import React from 'react';
import { spacer8, spacer12, spacer16 } from '@spotify-internal/encore-foundation';
import styled, { css } from 'styled-components';
import { useEncoreContextType } from "../../hooks/useEncoreContextType";
import { ballad, cssColorValue, fontWeightBold, minuetBold, opacityActive, opacityDisabled, semanticColors, typeStyleBody1, typeStyleCta3 } from "../../styles";
var transitionColor = '0.2s';
var transitionBg = '0.3s';

var textStyle = function textStyle(props) {
  var legacyVariant = props.sentenceCase ? typeStyleBody1() : typeStyleCta3();
  var nextVariant = props.sentenceCase ? ballad() : minuetBold();
  return css(["", ""], function () {
    return useEncoreContextType(legacyVariant, nextVariant);
  });
};

var NavBarListItemLink = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var Component = _ref.component,
      isActive = _ref.isActive,
      isDisabled = _ref.isDisabled,
      isHover = _ref.isHover,
      isFocus = _ref.isFocus,
      sentenceCase = _ref.sentenceCase,
      rest = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/React.createElement(Component, Object.assign({
    ref: ref
  }, rest));
});
NavBarListItemLink.displayName = 'NavBarListItemLink';
export var Link = styled(NavBarListItemLink).withConfig({
  displayName: "Link",
  componentId: "sc-1g2blu2-0"
})(["", ";border:0;display:inline-block;font-weight:", ";padding-top:", ";padding-right:", ";padding-bottom:10px;padding-left:", ";text-decoration:none;transition:", " color linear;color:", ";", ";", ";", ";", ";li:first-child > &{margin-left:0;padding-left:0;}li:last-child > &{margin-right:0;padding-right:0;}&[href]:focus{outline:none;", ";}&::after{background-color:transparent;content:'';display:block;height:2px;margin:0 auto -2px;position:relative;top:", ";transition:background-color ", ";width:", ";", ";", ";}"], textStyle, fontWeightBold, spacer12, spacer16, spacer16, transitionColor, cssColorValue(semanticColors.textSubdued), function (props) {
  return !props.isActive && !props.isDisabled && css(["&:hover{color:", ";}&:active{opacity:", ";}"], cssColorValue(semanticColors.textBase), opacityActive);
}, function (props) {
  return (props.isActive || props.isHover) && css(["color:", ";"], cssColorValue(semanticColors.textBase));
}, function (props) {
  return props.isFocus && props.sentenceCase && css(["color:", ";"], cssColorValue(semanticColors.textBase));
}, function (props) {
  return props.isDisabled && css(["opacity:", ";cursor:not-allowed;pointer-events:none;"], opacityDisabled);
}, function (props) {
  return props.sentenceCase ? css(["color:", ";"], cssColorValue(semanticColors.textBase)) : css(["&:after{background-color:", ";width:100%;}"], cssColorValue(semanticColors.essentialBase));
}, spacer8, transitionBg, function (props) {
  return props.sentenceCase ? spacer16 : '30px';
}, function (props) {
  return props.isFocus && !props.sentenceCase && css(["background-color:", ";width:100%;"], cssColorValue(semanticColors.essentialBase));
}, function (props) {
  return props.isActive && css(["background-color:", ";"], props.sentenceCase ? cssColorValue(semanticColors.essentialBase) : cssColorValue(semanticColors.essentialBrightAccent));
});