import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["withFieldset", "children", "indicator", "inline", "label", "labelFor", "hideLabel", "popover", "theme"];
import React from 'react';
import { deprecatedPropWarning } from "../../deprecationWarnings";
import { VisuallyHidden } from "../VisuallyHidden";
import { Group } from "./Group";
import { IndicatorText } from "./IndicatorText";
import { InlineGroup } from "./InlineGroup";
import { Label } from "./Label";
import { LabelGroup } from "./LabelGroup";
import { Popover } from "./Popover";
import { Required } from "./Required";
var indicatorMap = {
  optional: /*#__PURE__*/React.createElement(IndicatorText, null, "(Optional)"),
  required: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Required, {
    "aria-hidden": "true"
  }, "*"), /*#__PURE__*/React.createElement(VisuallyHidden, null, "(required)"))
}; // Allows 'optional' or 'required' to render in specific ways, but also allow arbitrary strings

export var getIndicator = function getIndicator(indicator) {
  if (indicatorMap.hasOwnProperty(indicator)) return indicatorMap[indicator];
  return /*#__PURE__*/React.createElement(IndicatorText, null, "(", indicator, ")");
};
export var FormGroup = function FormGroup(_ref) {
  var withFieldset = _ref.withFieldset,
      children = _ref.children,
      indicator = _ref.indicator,
      inline = _ref.inline,
      label = _ref.label,
      labelFor = _ref.labelFor,
      hideLabel = _ref.hideLabel,
      popover = _ref.popover,
      theme = _ref.theme,
      props = _objectWithoutProperties(_ref, _excluded);

  if (theme) {
    deprecatedPropWarning('theme', 'This component is intended to inherit its parentâ€™s color set or color.');
  }

  return /*#__PURE__*/React.createElement(Group, Object.assign({
    as: withFieldset ? 'fieldset' : undefined
  }, props), label && /*#__PURE__*/React.createElement(LabelGroup, {
    as: withFieldset ? 'legend' : undefined,
    isHidden: !!hideLabel
  }, withFieldset ? label : /*#__PURE__*/React.createElement(Label, {
    htmlFor: labelFor
  }, label, indicator && getIndicator(indicator)), popover && /*#__PURE__*/React.createElement(Popover, null, popover)), inline ? /*#__PURE__*/React.createElement(InlineGroup, null, children) : children);
};
/**
* **FormGroup** ![Status: Production](https://img.shields.io/badge/PRODUCTION-%2357B560|height=14)
*
* [GitHub](https://ghe.spotify.net/encore/web/tree/master/src/core/components/FormGroup) | [Storybook](https://encore-web.spotify.net/?path=/docs/components-form-formgroup--default) | [Encore](https://encore.spotify.net/web/components/form?format=figma-figma#formgroup) | [Figma](https://www.figma.com/file/bnQXqGkLeiTlbk8JXGDcsX/Encore-Web---Light-Theme-Toolkit?node-id=0:858) |
*
* The FormGroup combines children form elements into a Form, allowing the addition of a label, optional or required indicators, and a Popover.
*
* @example
* () => (
*  <FormGroup label="Label" labelFor="form_group">
*    <FormInput id="form_group" type="text" placeholder="Placeholder" />
*  </FormGroup>
*);
*
*/

export default FormGroup;