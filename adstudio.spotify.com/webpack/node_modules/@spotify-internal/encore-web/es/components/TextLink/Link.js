import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["component", "isUsingKeyboard", "isHover", "isFocus", "isActive", "standalone", "semanticColor"];

/* stylelint-disable no-descending-specificity */
import React from 'react';
import styled, { css } from 'styled-components';
import { buttonLinkReset, cssColorValue, focusTransitionFade, focusTransitionType, linkDecoration, linkHoverDecoration, opacityDisabled, rootStyle, semanticColors } from "../../styles";

var hoverStyles = function hoverStyles(_ref) {
  var color = _ref.color;
  return css(["text-decoration:", ";color:", ";"], linkHoverDecoration, color);
};

var focusStyles = css(["box-shadow:0 3px 0 0;transition:box-shadow ", " ", ";&&{text-decoration:none;}"], focusTransitionFade, focusTransitionType);
var activeStyles = css(["color:", ";"], cssColorValue(semanticColors.textBrightAccent));
var disabledStyles = css(["color:", ";opacity:", ";cursor:not-allowed;"], cssColorValue(semanticColors.textSubdued), opacityDisabled);
var standaloneHoverStyles = css(["text-decoration:", ";color:", ";"], linkHoverDecoration, cssColorValue(semanticColors.textSubdued));
var standaloneFocusStyles = css(["color:", ";"], cssColorValue(semanticColors.textBase));
var standaloneActiveStyles = css(["text-decoration:", ";color:", ";"], linkHoverDecoration, cssColorValue(semanticColors.textBase));
var standaloneDisabledStyles = css(["text-decoration:none;"]);
export var Link = styled( /*#__PURE__*/React.forwardRef(function (_ref2, ref) {
  var _ref2$component = _ref2.component,
      Component = _ref2$component === void 0 ? 'a' : _ref2$component,
      isUsingKeyboard = _ref2.isUsingKeyboard,
      isHover = _ref2.isHover,
      isFocus = _ref2.isFocus,
      isActive = _ref2.isActive,
      standalone = _ref2.standalone,
      semanticColor = _ref2.semanticColor,
      props = _objectWithoutProperties(_ref2, _excluded);

  return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {
    ref: ref
  }));
})).withConfig({
  displayName: "Link",
  componentId: "k8gsk-0"
})(["", ";", ";", " align-items:center;text-decoration:none;&[href],&:hover:not([disabled]){text-decoration:", ";}&[href]:hover{", ";}&[href]:focus{outline:none;", ";}&[href]:active{", ";}&&{", ";", ";", ";}&[disabled],&[href][disabled],&[aria-disabled='true']{", ";}", ""], rootStyle(), function (props) {
  return props.component === 'button' && css(["", ";font-size:inherit;"], buttonLinkReset());
}, function (props) {
  return props.semanticColor ? css(["color:", ";"], cssColorValue(props.semanticColor)) : css(["color:inherit;"]);
}, linkDecoration, function (props) {
  return props.semanticColor ? hoverStyles({
    color: cssColorValue(props.semanticColor)
  }) : hoverStyles({
    color: cssColorValue(semanticColors.textBrightAccent)
  });
}, function (props) {
  return props.isUsingKeyboard && focusStyles;
}, activeStyles, function (props) {
  return props.isHover && (props.semanticColor ? hoverStyles({
    color: cssColorValue(props.semanticColor)
  }) : hoverStyles({
    color: cssColorValue(semanticColors.textBrightAccent)
  }));
}, function (props) {
  return props.isFocus && focusStyles;
}, function (props) {
  return props.isActive && activeStyles;
}, disabledStyles, function (props) {
  return props.standalone && css(["color:", ";display:inline-flex;&,&[href]{text-decoration:none;}&[href]:hover,&[href]:hover:focus{", ";}&[href]:focus{text-decoration:none;", ";}&[href]:active{", ";}&&{", ";", ";", ";}&[disabled],&[href][disabled],&[aria-disabled='true']{", ";}"], props.semanticColor ? cssColorValue(props.semanticColor) : cssColorValue(semanticColors.textSubdued), standaloneHoverStyles, props.isUsingKeyboard && standaloneFocusStyles, standaloneActiveStyles, props.isHover && standaloneHoverStyles, props.isFocus && standaloneFocusStyles, props.isActive && standaloneActiveStyles, standaloneDisabledStyles);
});