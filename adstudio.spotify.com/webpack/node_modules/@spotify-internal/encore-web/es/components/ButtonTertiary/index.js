import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["component", "color", "theme", "children", "buttonSize", "iconOnly", "iconLeading", "iconTrailing", "aria-label", "aria-labelledby"],
    _excluded2 = ["buttonLegacy"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { useContext } from 'react';
import { spacer32 } from '@spotify-internal/encore-foundation';
import { BrowserDefaultFocusStyleContext } from "../../contexts/BrowserDefaultFocusStyleContext";
import { EncoreContext, encoreContextKeyword, getStatus } from "../../contexts/EncoreContext";
import { KeyboardDetectionContext } from "../../contexts/KeyboardDetectionContext";
import { deprecatedPropWarning } from "../../deprecationWarnings";
import { colorWarning, renamedPropWarning } from "../../deprecationWarnings";
import { buttonIconSize, buttonSizes } from "../../styles";
import { Button } from "./Button";
import { ButtonChildren } from "./ButtonChildren";
import { ButtonLegacyComponent } from "./ButtonLegacy";
export var ButtonComponent = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var component = _ref.component,
      color = _ref.color,
      theme = _ref.theme,
      children = _ref.children,
      _ref$buttonSize = _ref.buttonSize,
      buttonSize = _ref$buttonSize === void 0 ? 'md' : _ref$buttonSize,
      iconOnly = _ref.iconOnly,
      iconLeading = _ref.iconLeading,
      iconTrailing = _ref.iconTrailing,
      ariaLabel = _ref['aria-label'],
      ariaLabelledby = _ref['aria-labelledby'],
      props = _objectWithoutProperties(_ref, _excluded);

  colorWarning({
    color: color
  });

  if (theme) {
    renamedPropWarning('theme', 'semanticColor');
  }

  if (iconOnly && !ariaLabel && !ariaLabelledby) {
    // eslint-disable-next-line no-console
    console.warn('ButtonTertiary must have an aria-label or aria-labelledby attribute defined when using the iconOnly prop in order to be accessible.');
  }

  var _useContext = useContext(KeyboardDetectionContext),
      isUsingKeyboard = _useContext.isUsingKeyboard;

  var _useContext2 = useContext(BrowserDefaultFocusStyleContext),
      useBrowserDefaultFocusStyle = _useContext2.useBrowserDefaultFocusStyle;

  var config = useContext(EncoreContext);
  var status = getStatus(encoreContextKeyword.button, config);
  var rel = props.href && props.target === '_blank' ? 'noopener noreferrer' : null;
  /** Override standard icon size for lg iconOnly buttons */

  var iconSize = iconOnly && buttonSize === 'lg' ? spacer32 : buttonIconSize[buttonSize];
  return /*#__PURE__*/React.createElement(Button, Object.assign({}, props, {
    rel: rel,
    ref: ref,
    component: !component && props.href ? 'a' : component,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby,
    buttonSize: buttonSize,
    iconSize: iconSize,
    iconLeading: iconLeading,
    iconTrailing: iconTrailing,
    iconOnly: iconOnly,
    isUsingKeyboard: isUsingKeyboard,
    useBrowserDefaultFocusStyle: useBrowserDefaultFocusStyle,
    status: status
  }), /*#__PURE__*/React.createElement(ButtonChildren, {
    iconOnly: iconOnly,
    iconLeading: iconLeading,
    iconTrailing: iconTrailing,
    iconSize: iconSize,
    children: children,
    buttonSize: buttonSize
  }));
});
/** Component that figures out if we are rendering the legacy or current button */

var ButtonToRender = /*#__PURE__*/React.forwardRef(function (_ref2, ref) {
  var buttonLegacy = _ref2.buttonLegacy,
      props = _objectWithoutProperties(_ref2, _excluded2);

  /** First, figure out if we are rendering the legacy or the current button */
  if (buttonLegacy) {
    deprecatedPropWarning('buttonLegacy', "This prop will be removed soon. Please migrate to new button styles by removing this prop.\nRead more: https://encore.spotify.net/web/whats-new/green-buttons/?format=web-js");
    return /*#__PURE__*/React.createElement(ButtonLegacyComponent, Object.assign({
      ref: ref
    }, props));
  }

  return /*#__PURE__*/React.createElement(ButtonComponent, Object.assign({
    ref: ref
  }, props));
});
/**
 * TODO: Remove when we deprecate `buttonSize` helpers like `ButtonTertiary.sm`.
 */

var buttonHelpers = _objectSpread(_objectSpread({}, buttonSizes), {}, {
  displayName: 'ButtonTertiary'
});
/**
* **ButtonTertiary** ![Status: Production](https://img.shields.io/badge/PRODUCTION-%2357B560|height=14)
*
* [GitHub](https://ghe.spotify.net/encore/web/tree/master/src/core/components/ButtonTertiary) | [Storybook](https://encore-web.spotify.net/?path=/docs/components-button-buttontertiary--default) | [Encore](https://encore.spotify.net/web/components/button?format=figma-figma#buttontertiary) | [Figma](https://www.figma.com/file/bnQXqGkLeiTlbk8JXGDcsX/Encore-Web---Light-Theme-Toolkit?node-id=7643:5911) |
*
* Tertiary buttons are text-only buttons. These are used for the least important actions.
*
* @example
* () => <ButtonTertiary>Default</ButtonTertiary>;
*
*/


export var ButtonTertiary = Object.assign(ButtonToRender, buttonHelpers);
export default ButtonTertiary;