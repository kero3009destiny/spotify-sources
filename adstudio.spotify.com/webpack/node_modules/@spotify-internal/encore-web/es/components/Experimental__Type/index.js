import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["color", "semanticColor", "paddingBottom", "pxLegacy", "variant"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React from 'react';
import { spacer } from '@spotify-internal/encore-foundation';
import { colorWarning } from "../../deprecationWarnings";
import { TypeElement, variants, weights } from "./Type";

function isSpacerToken(paddingBottom) {
  return paddingBottom !== undefined && spacer.hasOwnProperty(paddingBottom);
}

var TypeComponent = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var color = _ref.color,
      semanticColor = _ref.semanticColor,
      paddingBottom = _ref.paddingBottom,
      _ref$pxLegacy = _ref.pxLegacy,
      pxLegacy = _ref$pxLegacy === void 0 ? false : _ref$pxLegacy,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'ballad' : _ref$variant,
      props = _objectWithoutProperties(_ref, _excluded);

  colorWarning({
    color: color
  });
  return /*#__PURE__*/React.createElement(TypeElement, Object.assign({
    variant: variant,
    semanticColor: semanticColor,
    paddingBottom: isSpacerToken(paddingBottom) ? spacer[paddingBottom] : paddingBottom,
    pxLegacy: pxLegacy,
    ref: ref
  }, props));
}); // export components

export var elements = {
  h1: /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(TypeComponent, Object.assign({
      as: "h1",
      ref: ref
    }, props));
  }),
  h2: /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(TypeComponent, Object.assign({
      as: "h2",
      ref: ref
    }, props));
  }),
  h3: /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(TypeComponent, Object.assign({
      as: "h3",
      ref: ref
    }, props));
  }),
  h4: /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(TypeComponent, Object.assign({
      as: "h4",
      ref: ref
    }, props));
  }),
  h5: /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(TypeComponent, Object.assign({
      as: "h5",
      ref: ref
    }, props));
  }),
  h6: /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(TypeComponent, Object.assign({
      as: "h6",
      ref: ref
    }, props));
  }),
  p: /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(TypeComponent, Object.assign({
      as: "p",
      ref: ref
    }, props));
  }),
  small: /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(TypeComponent, Object.assign({
      as: "small",
      ref: ref
    }, props));
  }),
  li: /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(TypeComponent, Object.assign({
      as: "li",
      ref: ref
    }, props));
  }),
  span: /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(TypeComponent, Object.assign({
      as: "span",
      ref: ref
    }, props));
  })
};

var typeHelpers = _objectSpread(_objectSpread(_objectSpread({}, elements), variants), weights);
/**
* **Experimental__Type** ![Status: Production](https://img.shields.io/badge/PRODUCTION-%2357B560|height=14)
*
* [GitHub](https://ghe.spotify.net/encore/web/tree/master/src/core/components/Experimental__Type) | [Storybook](https://encore-web.spotify.net/?path=/docs/components-type-experimental-type--scale) | [Encore](https://encore.spotify.net/web/components/type) | 
*
* null
*
* @example
* () => (
*  <Fragment>
*    <Experimental__Type as="p" variant="bass">
*      Bass
*    </Experimental__Type>
*    <Experimental__Type as="p" variant="forte">
*      Forte
*    </Experimental__Type>
*    <Experimental__Type as="p" variant="brio">
*      Brio
*    </Experimental__Type>
*    <Experimental__Type as="p" variant="alto">
*      Alto
*    </Experimental__Type>
*    <Experimental__Type as="p" variant="canon">
*      Canon
*    </Experimental__Type>
*    <Experimental__Type as="p" variant="cello">
*      Cello
*    </Experimental__Type>
*    <Experimental__Type as="p" variant="ballad">
*      Ballad
*    </Experimental__Type>
*    <Experimental__Type as="p" variant="balladBold">
*      Ballad Bold
*    </Experimental__Type>
*    <Experimental__Type as="p" variant="viola">
*      Viola
*    </Experimental__Type>
*    <Experimental__Type as="p" variant="violaBold">
*      Viola Bold
*    </Experimental__Type>
*    <Experimental__Type as="p" variant="mesto">
*      Mesto
*    </Experimental__Type>
*    <Experimental__Type as="p" variant="mestoBold">
*      Mesto Bold
*    </Experimental__Type>
*    <Experimental__Type as="p" variant="metronome">
*      Metronome
*    </Experimental__Type>
*    <Experimental__Type as="p" variant="finale">
*      Finale
*    </Experimental__Type>
*    <Experimental__Type as="p" variant="finaleBold">
*      Finale Bold
*    </Experimental__Type>
*    <Experimental__Type as="p" variant="minuet">
*      Minuet
*    </Experimental__Type>
*    <Experimental__Type as="p" variant="minuetBold">
*      Minuet Bold
*    </Experimental__Type>
*  </Fragment>
*);
*
*/


export var Experimental__Type = Object.assign(TypeComponent, typeHelpers);
export default Experimental__Type;