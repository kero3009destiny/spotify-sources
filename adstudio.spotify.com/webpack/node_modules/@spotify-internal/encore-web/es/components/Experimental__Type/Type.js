import styled, { css } from 'styled-components';
import { alto, ballad, balladBold, bass, brio, canon, cello, cssColorValue, finale, finaleBold, fontWeightBlack, fontWeightBold, fontWeightBook, forte, mesto, mestoBold, metronome, minuet, minuetBold, rootStyle, viola, violaBold } from "../../styles";
import { assertNever } from "../../typeHelpers";
export var variants = {
  bass: 'bass',
  forte: 'forte',
  brio: 'brio',
  alto: 'alto',
  canon: 'canon',
  cello: 'cello',
  ballad: 'ballad',
  balladBold: 'balladBold',
  viola: 'viola',
  violaBold: 'violaBold',
  mesto: 'mesto',
  mestoBold: 'mestoBold',
  metronome: 'metronome',
  finale: 'finale',
  finaleBold: 'finaleBold',
  minuet: 'minuet',
  minuetBold: 'minuetBold'
};
export var weights = {
  book: 'book',
  bold: 'bold',
  black: 'black'
};
export var typeWeight = function typeWeight(weight) {
  switch (weight) {
    case 'book':
      return fontWeightBook;

    case 'bold':
      return fontWeightBold;

    case 'black':
      return fontWeightBlack;

    default:
      return assertNever(weight);
  }
};

var variantStyles = function variantStyles(variant) {
  var pxLegacy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var weight = arguments.length > 2 ? arguments[2] : undefined;

  switch (variant) {
    case 'bass':
      return bass(pxLegacy);

    case 'forte':
      return forte(pxLegacy, weight && typeWeight(weight));

    case 'brio':
      return brio(pxLegacy);

    case 'alto':
      return alto(pxLegacy);

    case 'canon':
      return canon(pxLegacy);

    case 'cello':
      return cello(pxLegacy);

    case 'ballad':
      return ballad(pxLegacy);

    case 'balladBold':
      return balladBold(pxLegacy);

    case 'viola':
      return viola(pxLegacy);

    case 'violaBold':
      return violaBold(pxLegacy);

    case 'mesto':
      return mesto(pxLegacy);

    case 'mestoBold':
      return mestoBold(pxLegacy);

    case 'metronome':
      return metronome(pxLegacy);

    case 'finale':
      return finale(pxLegacy);

    case 'finaleBold':
      return finaleBold(pxLegacy);

    case 'minuet':
      return minuet(pxLegacy);

    case 'minuetBold':
      return minuetBold(pxLegacy);

    default:
      return assertNever(variant);
  }
};

export var TypeElement = styled.span.withConfig({
  displayName: "Type__TypeElement",
  componentId: "hpzrpd-0"
})(["", ";margin-top:0;margin-bottom:0;", ";", " ", ";", ";"], rootStyle(), function (props) {
  return props.variant ? variantStyles(props.variant, props.pxLegacy, props.weight) : undefined;
}, function (props) {
  return props.semanticColor ? css(["color:", ";"], cssColorValue(props.semanticColor)) : css(["color:inherit;"]);
}, function (props) {
  return props.weight && css(["font-weight:", ";"], typeWeight(props.weight));
}, function (props) {
  return props.paddingBottom && css(["padding-bottom:", ";"], props.paddingBottom);
});