import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["theme"];
import React, { useContext } from 'react';
import { KeyboardDetectionContext } from "../../contexts/KeyboardDetectionContext";
import { deprecatedPropWarning } from "../../deprecationWarnings";
import { Arrow } from "./Arrow";
import { Button } from "./Button";
import { Container } from "./Container";
export var Dropdown = function Dropdown(_ref) {
  var theme = _ref.theme,
      props = _objectWithoutProperties(_ref, _excluded);

  if (theme) {
    deprecatedPropWarning('theme', 'This component is intended to inherit its parentâ€™s color set or color.');
  }

  var _useContext = useContext(KeyboardDetectionContext),
      isUsingKeyboard = _useContext.isUsingKeyboard;

  return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(Button, Object.assign({
    isUsingKeyboard: isUsingKeyboard,
    "aria-haspopup": "listbox"
  }, props)), /*#__PURE__*/React.createElement(Arrow, null));
};
/**
* **Dropdown** ![Status: Production](https://img.shields.io/badge/PRODUCTION-%2357B560|height=14)
*
* [GitHub](https://ghe.spotify.net/encore/web/tree/master/src/core/components/Dropdown) | [Storybook](https://encore-web.spotify.net/?path=/docs/components-dropdown--default) | [Encore](https://encore.spotify.net/web/components/dropdown) | [Figma](https://www.figma.com/file/bnQXqGkLeiTlbk8JXGDcsX/Encore-Web---Light-Theme-Toolkit?node-id=423:1180) |
*
* Dropdown displays a list of choices on a temporary surface. it is intended for a list of sub-actions or links and appears when users interact with a button, action, or other control.
*
* @example
* () => {
*  const dropdownListId = 'listbox';
*  const triggerId = 'dropdown-toggle';
*  const items = [
*    { text: 'List item 1', id: 'li-1' },
*    { text: 'List item 2', id: 'li-2' },
*    { text: 'List item 3', id: 'li-3' },
*  ];
*
*  const { show, setShow, selected, setSelected, onClick, onHide, onKeyDown } = useA11yDropdown({
*    dropdownListId,
*    triggerId,
*    itemsLength: items.length,
*  });
*
*  return (
*    <>
*      <Type as="p" id="dropdown-label" variant="ballad" weight="bold">
*        Choose an option:
*      </Type>
*      <DropdownTrigger
*        overlay={
*          show && (
*            <DropdownList
*              onKeyDown={e => onKeyDown(e)}
*              onBlur={() => setShow(false)}
*              id="listbox"
*              aria-activedescendant={items[selected].id}
*            >
*              {items.map((item, index) => (
*                <DropdownLink
*                  as="li"
*                  role="option"
*                  id={item.id}
*                  key={item.id}
*                  onFocus={() => setSelected(index)}
*                  onClick={e => onClick(e, index)}
*                  selected={items[selected].id === item.id}
*                  aria-selected={items[selected].id === item.id}
*                >
*                  {item.text}
*                </DropdownLink>
*              ))}
*            </DropdownList>
*          )
*        }
*        onShow={() => setShow(true)}
*        onHide={onHide}
*      >
*        <Dropdown
*          id={triggerId}
*          aria-labelledby={`dropdown-label ${triggerId}`}
*          aria-expanded={show || undefined}
*        >
*          {items[selected].text}
*        </Dropdown>
*      </DropdownTrigger>
*    </>
*  );
*};
*
*/

export default Dropdown;