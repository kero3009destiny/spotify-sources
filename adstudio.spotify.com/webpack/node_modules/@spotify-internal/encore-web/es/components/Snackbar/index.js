import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["onExited", "children"];
import React, { useEffect, useState } from 'react';
import { CSSTransition } from 'react-transition-group';
import { Type } from "../Type";
import { Container } from "./Container";
export var snackbarTransitionDuration = 300;
export var snackbarRestDuration = 5000;
export var Snackbar = function Snackbar(_ref) {
  var onExited = _ref.onExited,
      children = _ref.children,
      props = _objectWithoutProperties(_ref, _excluded);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      showSnackbar = _useState2[0],
      setShowSnackbar = _useState2[1];

  useEffect(function () {
    setShowSnackbar(true);
    var timer = setTimeout(function () {
      return setShowSnackbar(false);
    }, snackbarRestDuration);
    return function () {
      return clearTimeout(timer);
    };
  }, []);
  return /*#__PURE__*/React.createElement(CSSTransition, {
    "in": showSnackbar,
    onExited: onExited,
    timeout: {
      enter: 0,
      exit: snackbarTransitionDuration
    },
    unmountOnExit: true,
    mountOnEnter: true
  }, function (state) {
    return /*#__PURE__*/React.createElement(Container, Object.assign({
      role: "status",
      state: state
    }, props), /*#__PURE__*/React.createElement(Type, {
      variant: "viola",
      semanticColor: "textBase"
    }, children));
  });
};
export default Snackbar;