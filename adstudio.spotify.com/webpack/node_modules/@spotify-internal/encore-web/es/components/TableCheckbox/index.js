import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["indeterminate", "semanticColor", "id", "theme"];
import React, { useContext } from 'react';
import styled from 'styled-components';
import { KeyboardDetectionContext } from "../../contexts/KeyboardDetectionContext";
import { renamedPropWarning } from "../../deprecationWarnings";
import { rootStyle } from "../../styles";
import { Checkbox as FormCheckbox } from "../FormCheckbox/Checkbox";
import { Indicator as FormIndicator } from "../FormCheckbox/Indicator";
import { VisuallyHidden } from "../VisuallyHidden";
var Checkbox = styled(FormCheckbox).withConfig({
  displayName: "TableCheckbox__Checkbox",
  componentId: "dfldaq-0"
})(["min-height:0;padding:0;label{line-height:0;}"]);
var Indicator = styled(FormIndicator).withConfig({
  displayName: "TableCheckbox__Indicator",
  componentId: "dfldaq-1"
})(["", ";top:0;"], rootStyle());
export var TableCheckbox = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var indeterminate = _ref.indeterminate,
      _ref$semanticColor = _ref.semanticColor,
      semanticColor = _ref$semanticColor === void 0 ? 'essentialBrightAccent' : _ref$semanticColor,
      id = _ref.id,
      theme = _ref.theme,
      props = _objectWithoutProperties(_ref, _excluded);

  if (theme) {
    renamedPropWarning('theme', 'semanticColor');
  }

  var _useContext = useContext(KeyboardDetectionContext),
      isUsingKeyboard = _useContext.isUsingKeyboard;

  return /*#__PURE__*/React.createElement(Checkbox, null, /*#__PURE__*/React.createElement(VisuallyHidden, Object.assign({
    component: "input",
    type: "checkbox",
    ref: ref,
    id: id
  }, props)), /*#__PURE__*/React.createElement("label", {
    htmlFor: id
  }, /*#__PURE__*/React.createElement(Indicator, {
    indeterminate: indeterminate,
    isUsingKeyboard: isUsingKeyboard,
    semanticColor: semanticColor
  })));
});
/**
* **TableCheckbox** ![Status: Production](https://img.shields.io/badge/PRODUCTION-%2357B560|height=14)
*
* [GitHub](https://ghe.spotify.net/encore/web/tree/master/src/core/components/TableCheckbox) | [Storybook](https://encore-web.spotify.net/?path=/docs/components-table-tablecheckbox--default) | [Encore](https://encore.spotify.net/web/components/table?format=figma-figma#multi-select) | [Figma](https://www.figma.com/file/bnQXqGkLeiTlbk8JXGDcsX/Encore-Web---Light-Theme-Toolkit?node-id=561:30) |
*
* TableCheckbox renders checkboxes within cells, to be used at the beginning of a row to allow users to select multiple rows.
*
* @example
* () => (
*  <Table>
*    <colgroup>
*      <col width="" />
*      <col width="25%" />
*      <col width="25%" />
*      <col width="25%" />
*      <col width="25%" />
*    </colgroup>
*    <tbody>
*      <TableRow>
*        <TableCell>
*          <TableCheckbox id="row-1" />
*        </TableCell>
*        <TableCell>Cell</TableCell>
*        <TableCell>Cell</TableCell>
*        <TableCell>Cell</TableCell>
*        <TableCell>Cell</TableCell>
*      </TableRow>
*      <TableRow>
*        <TableCell>
*          <TableCheckbox id="row-2" disabled />
*        </TableCell>
*        <TableCell>Cell</TableCell>
*        <TableCell>Cell</TableCell>
*        <TableCell>Cell</TableCell>
*        <TableCell>Cell</TableCell>
*      </TableRow>
*    </tbody>
*  </Table>
*);
*
*/

export default TableCheckbox;