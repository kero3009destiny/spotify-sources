import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["align", "colorSet", "className", "contextual", "children", "onClose", "renderIcon", "renderMessage", "renderCloseButton", "variant"];
import React from 'react';
import { renamedPropWarning } from "../../deprecationWarnings";
import { addColorSet } from "../../styles";
import { CloseButton } from "./CloseButton";
import { Icon } from "./Icon";
import { Message } from "./Message";
import { Wrapper } from "./Wrapper";

var defaultIconRender = function defaultIconRender(props) {
  return /*#__PURE__*/React.createElement(Icon, props);
};

var defaultMessageRender = function defaultMessageRender(props) {
  return /*#__PURE__*/React.createElement(Message, props);
};

var defaultCloseButtonRender = function defaultCloseButtonRender(props) {
  return /*#__PURE__*/React.createElement(CloseButton, props);
};

var BannerComponent = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var align = _ref.align,
      colorSet = _ref.colorSet,
      className = _ref.className,
      _ref$contextual = _ref.contextual,
      contextual = _ref$contextual === void 0 ? false : _ref$contextual,
      children = _ref.children,
      onClose = _ref.onClose,
      _ref$renderIcon = _ref.renderIcon,
      renderIcon = _ref$renderIcon === void 0 ? defaultIconRender : _ref$renderIcon,
      _ref$renderMessage = _ref.renderMessage,
      renderMessage = _ref$renderMessage === void 0 ? defaultMessageRender : _ref$renderMessage,
      _ref$renderCloseButto = _ref.renderCloseButton,
      renderCloseButton = _ref$renderCloseButto === void 0 ? defaultCloseButtonRender : _ref$renderCloseButto,
      variant = _ref.variant,
      props = _objectWithoutProperties(_ref, _excluded);

  if (variant) {
    renamedPropWarning('variant', 'colorSet');
  }

  return /*#__PURE__*/React.createElement(Wrapper, Object.assign({
    showClose: onClose ? true : undefined,
    className: addColorSet(colorSet, className),
    colorSet: colorSet,
    align: align,
    contextual: contextual,
    ref: ref
  }, props), renderIcon({
    colorSet: colorSet
  }), renderMessage({
    children: children,
    align: align
  }), onClose && renderCloseButton({
    onClose: onClose
  }));
});
var bannerHelpers = {
  Icon: Icon,
  Message: Message,
  CloseButton: CloseButton
};
/**
* **Banner** ![Status: Production](https://img.shields.io/badge/PRODUCTION-%2357B560|height=14)
*
* [GitHub](https://ghe.spotify.net/encore/web/tree/master/src/core/components/Banner) | [Storybook](https://encore-web.spotify.net/?path=/docs/components-banner--informational) | [Encore](https://encore.spotify.net/web/components/banner) | [Figma](https://www.figma.com/file/bnQXqGkLeiTlbk8JXGDcsX/Encore-Web---Light-Theme-Toolkit?node-id=239:69) |
*
* Banners bring attention to important information, errors or warnings. They use a combination of icons, copy, and color to indicate the type of message, and some variants are dismissible.
*
* @example
* () => (
*  <>
*    <Banner colorSet="negative" onClose={() => alert('closed!')}>
*      This is an error banner message
*    </Banner>
*    <Banner colorSet="warning" onClose={() => alert('closed!')}>
*      This is a warning banner message
*    </Banner>
*    <Banner colorSet="positive" onClose={() => alert('closed!')}>
*      This is a success banner message
*    </Banner>
*    <Banner colorSet="announcement" onClose={() => alert('closed!')}>
*      This is an announcement banner message
*    </Banner>
*    <Banner onClose={() => alert('closed!')}>This is an informational banner message</Banner>
*  </>
*);
*
*/

export var Banner = Object.assign(BannerComponent, bannerHelpers);
export default Banner;