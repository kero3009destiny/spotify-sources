import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["type", "theme"];
import React, { useContext } from 'react';
import { BrowserDefaultFocusStyleContext } from "../../contexts/BrowserDefaultFocusStyleContext";
import { KeyboardDetectionContext } from "../../contexts/KeyboardDetectionContext";
import { renamedPropWarning } from "../../deprecationWarnings";
import { Button } from "./Button";
export var ButtonIcon = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'button' : _ref$type,
      theme = _ref.theme,
      props = _objectWithoutProperties(_ref, _excluded);

  if (theme) {
    renamedPropWarning('theme', 'semanticColor');
  }

  var _useContext = useContext(KeyboardDetectionContext),
      isUsingKeyboard = _useContext.isUsingKeyboard;

  var _useContext2 = useContext(BrowserDefaultFocusStyleContext),
      useBrowserDefaultFocusStyle = _useContext2.useBrowserDefaultFocusStyle;

  return /*#__PURE__*/React.createElement(Button, Object.assign({}, props, {
    ref: ref,
    type: type,
    isUsingKeyboard: isUsingKeyboard,
    useBrowserDefaultFocusStyle: useBrowserDefaultFocusStyle
  }));
});
/**
* **ButtonIcon** ![Status: Production](https://img.shields.io/badge/PRODUCTION-%2357B560|height=14)
*
* [GitHub](https://ghe.spotify.net/encore/web/tree/master/src/core/components/ButtonIcon) | [Storybook](https://encore-web.spotify.net/?path=/docs/components-button-buttonicon--default) | [Encore](https://encore.spotify.net/web/components/button?format=figma-figma#buttonicon) | [Figma](https://www.figma.com/file/bnQXqGkLeiTlbk8JXGDcsX/Encore-Web---Light-Theme-Toolkit?node-id=0:449) |
*
* Icons can also be used as buttonsâ€”but it's important that they are easy to interpret. These should use Text color tokens.
*
* @example
* () => (
*  <ButtonIcon>
*    <IconX aria-label="Close" />
*  </ButtonIcon>
*);
*
*/

export default ButtonIcon;