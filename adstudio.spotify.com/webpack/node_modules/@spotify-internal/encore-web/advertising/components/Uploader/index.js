"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Uploader = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _Type = require("../../../cjs/components/Type");

var _semanticTheme = require("../../../cjs/styles/semantic-theme");

var _FileUpload = _interopRequireDefault(require("./FileUpload"));

var _LoadingDisplay = _interopRequireDefault(require("./LoadingDisplay"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var Uploader = /*#__PURE__*/function (_PureComponent) {
  (0, _inherits2["default"])(Uploader, _PureComponent);

  var _super = _createSuper(Uploader);

  function Uploader() {
    var _this;

    (0, _classCallCheck2["default"])(this, Uploader);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.maybeRenderError = function () {
      var errorMessage = _this.props.errorMessage;
      return errorMessage ? /*#__PURE__*/_react["default"].createElement(_Type.Type.p, {
        semanticColor: _semanticTheme.semanticTextColors.textNegative,
        variant: "ballad",
        weight: "book"
      }, errorMessage) : null;
    };

    return _this;
  }

  (0, _createClass2["default"])(Uploader, [{
    key: "maybeRenderUploadingProgress",
    value: function maybeRenderUploadingProgress() {
      var _this$props = this.props,
          displayComponentProps = _this$props.displayComponentProps,
          isUploading = _this$props.isUploading,
          processingText = _this$props.processingText,
          previewName = _this$props.previewName,
          uploadingProgress = _this$props.uploadingProgress,
          uploadingText = _this$props.uploadingText;
      return isUploading ? /*#__PURE__*/_react["default"].createElement(_LoadingDisplay["default"], {
        name: previewName || displayComponentProps.name,
        processingText: processingText,
        progress: uploadingProgress ? uploadingProgress : 0,
        uploadingText: uploadingText
      }) : null;
    }
  }, {
    key: "maybeRenderDisplayComponent",
    value: function maybeRenderDisplayComponent() {
      var _this$props2 = this.props,
          deleteLabel = _this$props2.deleteLabel,
          DisplayComponent = _this$props2.displayComponent,
          displayComponentProps = _this$props2.displayComponentProps,
          isUploading = _this$props2.isUploading,
          onClickDelete = _this$props2.onClickDelete,
          previewName = _this$props2.previewName,
          previewSrc = _this$props2.previewSrc,
          shouldShowDownload = _this$props2.shouldShowDownload,
          shouldShowUploader = _this$props2.shouldShowUploader;
      return !shouldShowUploader && !isUploading ? /*#__PURE__*/_react["default"].createElement(DisplayComponent, Object.assign({
        deleteLabel: deleteLabel,
        onClickDelete: onClickDelete,
        shouldShowDownload: shouldShowDownload
      }, displayComponentProps, {
        name: previewName || displayComponentProps.name,
        src: previewSrc || displayComponentProps.src,
        panelBorder: true
      })) : null;
    }
  }, {
    key: "maybeRenderUploadComponent",
    value: function maybeRenderUploadComponent() {
      var _this$props3 = this.props,
          accept = _this$props3.accept,
          id = _this$props3.id,
          isUploading = _this$props3.isUploading,
          onError = _this$props3.onError,
          onUpload = _this$props3.onUpload,
          shouldShowUploader = _this$props3.shouldShowUploader,
          displayIcon = _this$props3.displayIcon,
          dragAndDropText = _this$props3.dragAndDropText,
          uploadFileText = _this$props3.uploadFileText,
          uploadText = _this$props3.uploadText,
          skipValidation = _this$props3.skipValidation,
          iconContainerHeight = _this$props3.iconContainerHeight,
          isVideoUploader = _this$props3.isVideoUploader;
      return shouldShowUploader && !isUploading ? /*#__PURE__*/_react["default"].createElement(_FileUpload["default"], {
        accept: accept,
        skipValidation: skipValidation,
        id: id,
        onError: onError,
        onUpload: onUpload,
        displayIcon: displayIcon,
        dragAndDropText: dragAndDropText,
        uploadFileText: uploadFileText,
        uploadText: uploadText,
        iconContainerHeight: iconContainerHeight,
        isVideoUploader: isVideoUploader
      }) : null;
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/_react["default"].createElement("div", {
        className: this.props.className
      }, this.maybeRenderDisplayComponent(), this.maybeRenderUploadComponent(), this.maybeRenderUploadingProgress(), this.maybeRenderError());
    }
  }]);
  return Uploader;
}(_react.PureComponent);

exports.Uploader = Uploader;