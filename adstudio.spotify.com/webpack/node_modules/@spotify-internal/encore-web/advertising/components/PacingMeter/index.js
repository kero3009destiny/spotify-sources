"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PacingMeter = PacingMeter;

var _react = _interopRequireWildcard(require("react"));

var _encoreFoundation = require("@spotify-internal/encore-foundation");

var _Type = require("../../../cjs/components/Type");

var _semanticTheme = require("../../../cjs/styles/semantic-theme");

var _styledComponents = _interopRequireDefault(require("styled-components"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var STATUS_COLORS = {
  success: _semanticTheme.semanticEssentialColors.essentialPositive,
  warning: _semanticTheme.semanticEssentialColors.essentialWarning,
  failure: _semanticTheme.semanticEssentialColors.essentialNegative,
  budget: _semanticTheme.semanticEssentialColors.essentialBrightAccent
};
var INLINE_PERCENTAGE_TEXT_WIDTH = 60;

var Container = _styledComponents["default"].div.withConfig({
  displayName: "PacingMeter__Container",
  componentId: "sc-1ro83fo-0"
})(["width:100%;"]);

var PacingMeterContainer = _styledComponents["default"].div.withConfig({
  displayName: "PacingMeter__PacingMeterContainer",
  componentId: "sc-1ro83fo-1"
})(["border-radius:", ";height:", ";overflow:hidden;position:relative;", " ", ""], _encoreFoundation.spacer12, _encoreFoundation.spacer12, function (props) {
  return props.showPercentageInline && 'display: inline-block;';
}, function (props) {
  return props.showPercentageInline ? "width: calc(100% - ".concat(INLINE_PERCENTAGE_TEXT_WIDTH, "px);") : 'width: 100%;';
});

var PacingMeterWrapper = _styledComponents["default"].div.withConfig({
  displayName: "PacingMeter__PacingMeterWrapper",
  componentId: "sc-1ro83fo-2"
})(["background:", ";border-radius:", ";height:", ";overflow:hidden;"], _encoreFoundation.gray90, _encoreFoundation.spacer12, _encoreFoundation.spacer12);

var Meter = _styledComponents["default"].div.withConfig({
  displayName: "PacingMeter__Meter",
  componentId: "sc-1ro83fo-3"
})(["background-color:", ";height:", ";width:", "%;"], function (props) {
  return (0, _semanticTheme.cssColorValue)(STATUS_COLORS[props.status]);
}, _encoreFoundation.spacer12, function (props) {
  return props.progressPercentage;
});

var ExpectedProgress = _styledComponents["default"].div.withConfig({
  displayName: "PacingMeter__ExpectedProgress",
  componentId: "sc-1ro83fo-4"
})(["background-color:", ";height:", ";position:relative;top:-", ";width:", ";left:", "%;"], _encoreFoundation.gray30, _encoreFoundation.spacer12, _encoreFoundation.spacer12, _encoreFoundation.spacer4, function (props) {
  return props.expectedProgressPercentage;
});

var Budget = (0, _styledComponents["default"])(_Type.Type.h3).withConfig({
  displayName: "PacingMeter__Budget",
  componentId: "sc-1ro83fo-5"
})(["padding-bottom:", ";"], _encoreFoundation.spacer16);

var BudgetTotal = _styledComponents["default"].small.withConfig({
  displayName: "PacingMeter__BudgetTotal",
  componentId: "sc-1ro83fo-6"
})(["color:", ";display:inline-block;font-size:14px;"], _encoreFoundation.gray70);

var PacingPercentage = _styledComponents["default"].div.withConfig({
  displayName: "PacingMeter__PacingPercentage",
  componentId: "sc-1ro83fo-7"
})(["", " ", " ", " vertical-align:middle;box-sizing:content-box;width:34px;white-space:nowrap;overflow:visible;text-overflow:clip;left:calc(", ");"], function (props) {
  return props.showPercentageInline && 'display: inline-block;';
}, function (props) {
  return props.showPercentageInline && "padding: 0 ".concat(_encoreFoundation.spacer12, ";");
}, function (props) {
  return !props.showPercentageInline && 'position: relative;';
}, function (props) {
  return "".concat(props.progressPercentage, "% - ").concat(props.percentageTextPixelAdjustment, "px");
});

function PacingMeter(_ref) {
  var _ref$budgetMode = _ref.budgetMode,
      budgetMode = _ref$budgetMode === void 0 ? false : _ref$budgetMode,
      budgetConsumed = _ref.budgetConsumed,
      _ref$expectedProgress = _ref.expectedProgressPercentage,
      expectedProgressPercentage = _ref$expectedProgress === void 0 ? budgetMode ? 100 : 0 : _ref$expectedProgress,
      _ref$progressPercenta = _ref.progressPercentage,
      progressPercentage = _ref$progressPercenta === void 0 ? 0 : _ref$progressPercenta,
      _ref$showPercentageIn = _ref.showPercentageInline,
      showPercentageInline = _ref$showPercentageIn === void 0 ? false : _ref$showPercentageIn,
      _ref$status = _ref.status,
      status = _ref$status === void 0 ? 'success' : _ref$status,
      totalBudget = _ref.totalBudget;
  var percentageTextPixelAdjustment = Math.min(progressPercentage, 36);
  var pacingPercentage = expectedProgressPercentage === 0 ? 0 : Math.floor(progressPercentage / expectedProgressPercentage * 100);
  return /*#__PURE__*/_react["default"].createElement(Container, null, budgetMode && /*#__PURE__*/_react["default"].createElement(_react.Fragment, null, /*#__PURE__*/_react["default"].createElement(Budget, {
    variant: "celloCanon"
  }, budgetConsumed, /*#__PURE__*/_react["default"].createElement(BudgetTotal, null, "/", totalBudget))), /*#__PURE__*/_react["default"].createElement(PacingMeterContainer, {
    showPercentageInline: showPercentageInline
  }, /*#__PURE__*/_react["default"].createElement(PacingMeterWrapper, null, /*#__PURE__*/_react["default"].createElement(Meter, {
    status: status,
    progressPercentage: progressPercentage
  })), /*#__PURE__*/_react["default"].createElement(ExpectedProgress, {
    expectedProgressPercentage: expectedProgressPercentage
  })), /*#__PURE__*/_react["default"].createElement(PacingPercentage, {
    progressPercentage: progressPercentage,
    percentageTextPixelAdjustment: percentageTextPixelAdjustment,
    showPercentageInline: showPercentageInline
  }, /*#__PURE__*/_react["default"].createElement(_Type.Type.p, {
    variant: "viola"
  }, !budgetMode && "".concat(pacingPercentage, "%"))));
}