var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { WidevineStates, } from './types';
var SP_CLIENT_HOST = 'https://spclient';
var WIDEVINE_CERTIFICATE_URL = SP_CLIENT_HOST + ".wg.spotify.com/widevine-license/v1/application-certificate";
export var WIDEVINE_DOWNLOAD_COMMAND = 'sp://widevine/v1/download';
export var WIDEVINE_STATUS_COMMAND = 'sp://widevine/v1/status';
var WidevineDownloader = (function () {
    function WidevineDownloader(configuration, cosmos) {
        var _this = this;
        this.fetchCertificate = function (input, init) {
            if (init === void 0) { init = { headers: new Headers() }; }
            return __awaiter(_this, void 0, void 0, function () {
                var _a, getToken, getWebgateHeaders, _b, accessToken, tokenType, token, url, webgateHeaders;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _a = this.configuration, getToken = _a.getToken, getWebgateHeaders = _a.getWebgateHeaders;
                            return [4, getToken()];
                        case 1:
                            _b = _c.sent(), accessToken = _b.accessToken, tokenType = _b.tokenType;
                            token = tokenType + " " + accessToken;
                            url = typeof input === 'string' ? input : input.url;
                            init.headers.append('Authorization', token);
                            if (getWebgateHeaders) {
                                webgateHeaders = [];
                                if (url.indexOf(SP_CLIENT_HOST) === 0) {
                                    webgateHeaders = getWebgateHeaders();
                                }
                                webgateHeaders.forEach(function (_a) {
                                    var key = _a[0], value = _a[1];
                                    init.headers.append(key, value);
                                });
                            }
                            return [2, fetch(input, init)];
                    }
                });
            });
        };
        this.state = {
            status: WidevineStates.UNKNOWN_STATUS,
            message: '',
        };
        this.subscription = null;
        this.callbacks = [];
        this.configuration = configuration;
        this.cosmos = cosmos;
    }
    WidevineDownloader.prototype.startWatchingStatus = function () {
        var _this = this;
        if (this.subscription) {
            return;
        }
        this.subscription = this.cosmos.sub(WIDEVINE_STATUS_COMMAND, function (res) {
            _this.state = res;
            _this.callbacks.forEach(function (callback) {
                if (!callback) {
                    return;
                }
                if (_this.state.status === WidevineStates.SUCCESS) {
                    callback(null, _this.state);
                }
                else if (_this.isFinalErrorState(_this.state)) {
                    callback(_this.makeError(_this.state), null);
                }
            });
            if (_this.state.status === WidevineStates.SUCCESS ||
                _this.isFinalErrorState(_this.state)) {
                if (_this.subscription) {
                    _this.subscription.cancel();
                    _this.subscription = null;
                }
                _this.callbacks = _this.callbacks.map(function () { return null; });
            }
        }, function (err) {
            _this.state = {
                status: WidevineStates.DOWNLOAD_FAILED,
                message: err.toString(),
            };
        });
    };
    WidevineDownloader.prototype.isFinalErrorState = function (state) {
        switch (state.status) {
            case WidevineStates.REGISTRATION_FAILED:
            case WidevineStates.REGISTRATION_NOT_ALLOWED:
            case WidevineStates.DOWNLOAD_FAILED:
            case WidevineStates.MAX_RETRIES:
                return true;
            default:
                return false;
        }
    };
    WidevineDownloader.prototype.makeError = function (errorState) {
        var error = new Error(errorState.message);
        error.name = 'WidevineDownloaderError';
        error.status = errorState.status;
        return error;
    };
    WidevineDownloader.prototype.pollStatus = function (timeout, callback) {
        var _this = this;
        var deadline = performance.now() + timeout;
        switch (this.state.status) {
            case WidevineStates.SUCCESS:
                callback(null, this.state);
                return;
            case WidevineStates.REGISTRATION_FAILED:
            case WidevineStates.REGISTRATION_NOT_ALLOWED:
            case WidevineStates.DOWNLOAD_FAILED:
            case WidevineStates.MAX_RETRIES:
                callback(this.makeError(this.state), null);
                return;
            case WidevineStates.INSTALL_DELAYED:
            case WidevineStates.INSTALL_NOT_STARTED:
                this.cosmos.post(WIDEVINE_DOWNLOAD_COMMAND);
                break;
            case WidevineStates.INSTALL_REQUESTED:
            case WidevineStates.INSTALL_IN_PROGRESS:
            default:
                break;
        }
        var i = this.callbacks.length;
        this.callbacks.push(function (error, success) {
            if (performance.now() < deadline) {
                _this.callbacks[i] = null;
                callback(error, success);
            }
        });
        setTimeout(function () {
            if (!_this.callbacks[i]) {
                return;
            }
            _this.callbacks[i] = null;
            callback(_this.makeError({
                status: WidevineStates.TIMEOUT_EXCEEDED,
                message: 'Widevine download did not reach final state before timeout. Try again.',
            }));
        }, timeout);
    };
    WidevineDownloader.prototype.reset = function () {
        this.state = {
            status: WidevineStates.UNKNOWN_STATUS,
            message: '',
        };
        if (this.subscription) {
            this.subscription.cancel();
            this.subscription = null;
        }
        this.callbacks = this.callbacks.map(function () { return null; });
    };
    WidevineDownloader.prototype.downloadLicenseCertificate = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, buffer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.fetchCertificate(WIDEVINE_CERTIFICATE_URL)];
                    case 1:
                        response = _a.sent();
                        if (!response.ok) return [3, 3];
                        return [4, response.arrayBuffer()];
                    case 2:
                        buffer = _a.sent();
                        return [2, new Uint8Array(buffer)];
                    case 3: throw new Error('Network response was not ok.');
                }
            });
        });
    };
    return WidevineDownloader;
}());
export default WidevineDownloader;
//# sourceMappingURL=WidevineDownloader.js.map