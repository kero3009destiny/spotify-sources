import shaka from '../player/shaka';
function ManifestParser() {
    this.curId_ = 0;
    this.config_ = null;
    this.data = null;
    this.MIN_BUFFER_TIME = 4;
    this.UNSUPPORTED_MIME_TYPES = ['video/mp2t'];
    this.PROFILE_ID_PLACEHOLDER = '{{profile_id}}';
    this.FILE_TYPE_PLACEHOLDER = '{{file_type}}';
    this.SEGMENT_TIMESTAMP_PLACEHOLDER = '{{segment_timestamp}}';
    this.LANGUAGE_CODE_PLACEHOLDER = '{{language_code}}';
    this.SPRITEMAP_ID_PLACEHOLDER = '{{spritemap_id}}';
}
ManifestParser.prototype.configure = function (config) {
    this.config_ = config;
};
ManifestParser.prototype.start = function (uri, playerInterface) {
    var _this = this;
    if (!this.config_) {
        console.warn('Must call configure() before start()!');
    }
    var type = shaka.net.NetworkingEngine.RequestType.MANIFEST;
    var request = {
        uris: [uri],
        method: 'GET',
        retryParameters: this.config_.retryParameters,
        allowCrossSiteCredentials: false,
        body: null,
    };
    var operation = playerInterface.networkingEngine.request(type, request);
    return operation.promise.then(function (response) {
        var manifest = _this.loadManifest_(response.data, uri);
        return manifest;
    });
};
ManifestParser.prototype.stop = function () { return Promise.resolve(); };
ManifestParser.prototype.update = function () {
};
ManifestParser.prototype.onExpirationUpdated = function () {
};
ManifestParser.prototype.loadManifest_ = function (rawData, uri) {
    var _this = this;
    this.data = this.loadData_(rawData);
    var timeline = new shaka.media.PresentationTimeline(null, 0);
    timeline.setDuration(this.data.end_time_millis / 1000);
    var periods = this.data.contents.map(function (content) {
        return _this.loadPeriod_(content, uri);
    });
    return {
        presentationTimeline: timeline,
        minBufferTime: this.MIN_BUFFER_TIME,
        offlineSessionIds: [],
        periods: periods,
    };
};
ManifestParser.prototype.loadData_ = function (rawData) {
    var manifestData = null;
    if (rawData instanceof ArrayBuffer) {
        var string = shaka.util.StringUtils.fromUTF8(rawData);
        try {
            manifestData = JSON.parse(string);
        }
        catch (exception) {
            throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.SPOTIFY_INVALID_MANIFEST, "Exception parsing the Json manifest: " + exception.message);
        }
    }
    else {
        manifestData = rawData;
    }
    if (!manifestData) {
        throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.MANIFEST, shaka.util.Error.Code.SPOTIFY_INVALID_MANIFEST, 'Invalid JSON');
    }
    return manifestData;
};
ManifestParser.prototype.loadPeriod_ = function (content, uri) {
    var _this = this;
    var filteredProfiles = this.filterProfiles_(content.profiles);
    var groupedProfiles = this.groupProfiles_(filteredProfiles);
    return {
        startTime: content.start_time_millis / 1000,
        variants: groupedProfiles.map(function (profileGroup) {
            return _this.loadVariant_(content, profileGroup);
        }),
        textStreams: this.loadTextStreams_(content, uri),
    };
};
ManifestParser.prototype.filterProfiles_ = function (profiles) {
    var _this = this;
    return profiles.filter(function (profile) { return !_this.UNSUPPORTED_MIME_TYPES.includes(profile.mime_type); });
};
ManifestParser.prototype.groupProfiles_ = function (profiles) {
    var videoProfiles = [];
    var audioProfiles = [];
    profiles.forEach(function (profile) {
        var type = profile.mime_type.split('/')[0];
        switch (type) {
            case 'video':
                videoProfiles.push(profile);
                break;
            case 'audio':
                audioProfiles.push(profile);
                break;
            default:
                break;
        }
    });
    if (!videoProfiles.length && !audioProfiles.length) {
        return [];
    }
    if (videoProfiles.length && !audioProfiles.length) {
        return videoProfiles.map(function (video) { return ({
            video: video,
            audio: null,
        }); });
    }
    if (!videoProfiles.length && audioProfiles.length) {
        return audioProfiles.map(function (audio) { return ({
            video: null,
            audio: audio,
        }); });
    }
    var groups = [];
    videoProfiles.forEach(function (video) {
        audioProfiles.forEach(function (audio) {
            groups.push({ video: video, audio: audio });
        });
    });
    return groups;
};
ManifestParser.prototype.loadVariant_ = function (content, profileGroup) {
    var isEncrypted = content.encryption_infos && content.encryption_infos.length > 0;
    var bandwidth = (profileGroup.video ? profileGroup.video.video_bitrate : 0) +
        (profileGroup.audio ? profileGroup.audio.audio_bitrate : 0);
    return {
        id: this.curId_++,
        language: 'und',
        primary: false,
        audio: profileGroup.audio
            ? this.loadStream_(content, profileGroup.audio, 'audio', isEncrypted)
            : null,
        video: profileGroup.video
            ? this.loadStream_(content, profileGroup.video, 'video', isEncrypted)
            : null,
        bandwidth: bandwidth,
        drmInfos: isEncrypted
            ?
                [{ keySystem: 'com.widevine.alpha' }]
            : [],
        allowedByApplication: true,
        allowedByKeySystem: true,
        roles: [],
    };
};
ManifestParser.prototype.loadTextStreams_ = function (content) {
    var _this = this;
    var subtitleProfiles = [];
    if (this.data.subtitle_language_codes &&
        this.data.subtitle_language_codes.length) {
        subtitleProfiles = this.data.subtitle_language_codes.map(function (code) { return ({
            id: _this.curId_++,
            mime_type: 'text/vtt',
            language: code,
        }); });
    }
    return subtitleProfiles.map(function (profile) {
        return _this.loadStream_(content, profile, 'text', false);
    });
};
ManifestParser.prototype.loadStream_ = function (content, profile, type, isEncrypted) {
    var index = this.getSegmentIndex_(content, profile, type);
    var codecs = '';
    if (type === 'video') {
        codecs = profile.video_codec;
    }
    if (type === 'audio') {
        codecs = profile.audio_codec;
    }
    return {
        id: this.curId_++,
        createSegmentIndex: function () {
            return Promise.resolve();
        },
        findSegmentPosition: index.find.bind(index),
        getSegmentReference: index.get.bind(index),
        initSegmentReference: type === 'text' ? null : this.getInitSegmentReference_(profile),
        presentationTimeOffset: 0,
        mimeType: profile.mime_type,
        codecs: codecs,
        bandwidth: profile.max_bitrate,
        width: type === 'video' ? profile.video_width : undefined,
        height: type === 'video' ? profile.video_height : undefined,
        kind: type === 'text' ? 'subtitles' : undefined,
        encrypted: isEncrypted,
        keyId: null,
        language: type === 'text' ? profile.language : 'und',
        type: type,
        primary: false,
        trickModeVideo: null,
        containsEmsgBoxes: false,
        allowedByApplication: true,
        allowedByKeySystem: true,
        roles: [],
    };
};
ManifestParser.prototype.getInitSegmentReference_ = function (profile) {
    var _this = this;
    var getInitUris = function () {
        var uris = _this.data.base_urls.map(function (baseUrl) {
            return (baseUrl + _this.data.initialization_template)
                .replace(_this.PROFILE_ID_PLACEHOLDER, profile.id)
                .replace(_this.FILE_TYPE_PLACEHOLDER, profile.file_type);
        });
        return uris;
    };
    return new shaka.media.InitSegmentReference(getInitUris, 0, null);
};
ManifestParser.prototype.getSegmentIndex_ = function (content, profile, type) {
    var _this = this;
    var references = [];
    var start = content.start_time_millis / 1000;
    var end = content.end_time_millis / 1000;
    if (type === 'text') {
        var getSubtitleSegmentUris = function () {
            var uris = null;
            if (!_this.data.subtitle_base_urls) {
                shaka.log.warning("subtitle codes provided but no subtitle_base_urls\n          found in manifest. Are you using v6 (or later) manifests?");
            }
            else {
                uris = _this.data.subtitle_base_urls.map(function (baseUrl) {
                    return (baseUrl + _this.data.subtitle_template).replace(_this.LANGUAGE_CODE_PLACEHOLDER, profile.language);
                });
            }
            return uris;
        };
        references = [
            new shaka.media.SegmentReference(0, start, end, getSubtitleSegmentUris, 0, null),
        ];
    }
    else {
        var length_1 = content.segment_length;
        var i = 0;
        var currentStart = start;
        while (currentStart < end) {
            var reference = this.loadReference_(profile, i, currentStart, currentStart + length_1);
            references.push(reference);
            currentStart += length_1;
            i++;
        }
    }
    var index = new shaka.media.SegmentIndex(references);
    return index;
};
ManifestParser.prototype.loadReference_ = function (profile, i, start, end) {
    var _this = this;
    var getSegmentUris = function () {
        var uris = _this.data.base_urls.map(function (baseUrl) {
            return (baseUrl + _this.data.segment_template)
                .replace(_this.PROFILE_ID_PLACEHOLDER, profile.id)
                .replace(_this.FILE_TYPE_PLACEHOLDER, profile.file_type)
                .replace(_this.SEGMENT_TIMESTAMP_PLACEHOLDER, start);
        });
        return uris;
    };
    return new shaka.media.SegmentReference(i, start, end, getSegmentUris, 0, null);
};
export default ManifestParser;
//# sourceMappingURL=SPManifestParser.js.map