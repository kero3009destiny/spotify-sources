import shaka from '../player/shaka';
import TextParser from './TextParser';
function VttTextParser() { }
VttTextParser.prototype.parseInit = function (data) {
    console.warn('VTT does not have init segments');
};
VttTextParser.prototype.parseMedia = function (data, time) {
    var VttTextParser = this;
    var str = shaka.util.StringUtils.fromUTF8(data);
    str = str.replace(/\r\n|\r(?=[^\n]|$)/gm, '\n');
    var blocks = str.split(/\n{2,}/m);
    if (!/^WEBVTT($|[ \t\n])/m.test(blocks[0])) {
        throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.TEXT, shaka.util.Error.Code.INVALID_TEXT_HEADER);
    }
    var offset = time.segmentStart;
    if (offset == null) {
        offset = 0;
        if (blocks[0].indexOf('X-TIMESTAMP-MAP') >= 0) {
            var cueTimeMatch = blocks[0].match(/LOCAL:((?:(\d{1,}):)?(\d{2}):(\d{2})\.(\d{3}))/m);
            var mpegTimeMatch = blocks[0].match(/MPEGTS:(\d+)/m);
            if (cueTimeMatch && mpegTimeMatch) {
                var parser = new TextParser(cueTimeMatch[1]);
                var cueTime = VttTextParser.parseTime_(parser);
                var mpegTime = Number(mpegTimeMatch[1]);
                var mpegTimescale = VttTextParser.MPEG_TIMESCALE_;
                offset = time.periodStart + (mpegTime / mpegTimescale - cueTime);
            }
        }
    }
    var regions = [];
    var lines = blocks[0].split('\n');
    for (var i = 1; i < lines.length; i++) {
        if (/^Region:/.test(lines[i])) {
            var region = VttTextParser.parseRegion_(lines[i]);
            regions.push(region);
        }
    }
    var ret = [];
    for (var i = 1; i < blocks.length; i++) {
        lines = blocks[i].split('\n');
        var cue = VttTextParser.parseCue_(lines, offset, regions);
        if (cue) {
            ret.push(cue);
        }
    }
    return ret;
};
VttTextParser.prototype.parseRegion_ = function (text) {
    var parser = new TextParser(text);
    var region = new shaka.text.CueRegion();
    parser.readWord();
    parser.skipWhitespace();
    return region;
};
VttTextParser.prototype.parseCue_ = function (text, timeOffset, regions) {
    var VttTextParser = this;
    if (text.length == 1 && !text[0]) {
        return null;
    }
    if (/^NOTE($|[ \t])/.test(text[0])) {
        return null;
    }
    if (text[0] == 'STYLE') {
        return null;
    }
    var id = null;
    var index = text[0].indexOf('-->');
    if (index < 0) {
        id = text[0];
        text.splice(0, 1);
    }
    var parser = new TextParser(text[0]);
    var start = VttTextParser.parseTime_(parser);
    var expect = parser.readRegex(/[ \t]+-->[ \t]+/g);
    var end = VttTextParser.parseTime_(parser);
    if (start == null || expect == null || end == null) {
        throw new shaka.util.Error(shaka.util.Error.Severity.CRITICAL, shaka.util.Error.Category.TEXT, shaka.util.Error.Code.INVALID_TEXT_CUE);
    }
    start += timeOffset;
    end += timeOffset;
    var payload = text
        .slice(1)
        .join('\n')
        .trim();
    var cue = new shaka.text.Cue(start, end, payload);
    parser.skipWhitespace();
    var word = parser.readWord();
    while (word) {
        if (!VttTextParser.parseCueSetting(cue, word, regions)) {
            console.warn('VTT parser encountered an invalid VTT setting: ', word, ' The setting will be ignored.');
        }
        parser.skipWhitespace();
        word = parser.readWord();
    }
    if (id != null) {
        cue.id = id;
    }
    return cue;
};
VttTextParser.prototype.parseCueSetting = function (cue, word, regions) {
    var VttTextParser = this;
    var results = null;
    if ((results = /^align:(start|middle|center|end|left|right)$/.exec(word))) {
        VttTextParser.setTextAlign_(cue, results[1]);
    }
    else if ((results = /^vertical:(lr|rl)$/.exec(word))) {
        VttTextParser.setVerticalWritingDirection_(cue, results[1]);
    }
    else if ((results = /^size:([\d.]+)%$/.exec(word))) {
        cue.size = Number(results[1]);
    }
    else if ((results = /^position:([\d.]+)%(?:,(line-left|line-right|center|start|end))?$/.exec(word))) {
        cue.position = Number(results[1]);
        if (results[2]) {
            VttTextParser.setPositionAlign_(cue, results[2]);
        }
    }
    else if ((results = /^region:(.*)$/.exec(word))) {
        var region = VttTextParser.getRegionById_(regions, results[1]);
        if (region) {
            cue.region = region;
        }
    }
    else {
        return VttTextParser.parsedLineValueAndInterpretation_(cue, word);
    }
    return true;
};
VttTextParser.prototype.getRegionById_ = function (regions, id) {
    var regionsWithId = regions.filter(function (region) {
        return region.id == id;
    });
    if (!regionsWithId.length) {
        console.warn('VTT parser could not find a region with id: ', id, ' The region will be ignored.');
        return null;
    }
    if (regionsWithId.length !== 1) {
        console.warn('VTT does not have init segments');
    }
    return regionsWithId[0];
};
VttTextParser.prototype.setTextAlign_ = function (cue, align) {
    var Cue = shaka.text.Cue;
    if (align == 'middle') {
        cue.textAlign = Cue.textAlign.CENTER;
    }
    else {
        cue.textAlign = Cue.textAlign[align.toUpperCase()];
    }
};
VttTextParser.prototype.setPositionAlign_ = function (cue, align) {
    var Cue = shaka.text.Cue;
    if (align == 'line-left' || align == 'start') {
        cue.positionAlign = Cue.positionAlign.LEFT;
    }
    else if (align == 'line-right' || align == 'end') {
        cue.positionAlign = Cue.positionAlign.RIGHT;
    }
    else {
        cue.positionAlign = Cue.positionAlign.CENTER;
    }
};
VttTextParser.prototype.setVerticalWritingDirection_ = function (cue, value) {
    var Cue = shaka.text.Cue;
    if (value == 'lr') {
        cue.writingDirection = Cue.writingDirection.VERTICAL_LEFT_TO_RIGHT;
    }
    else {
        cue.writingDirection = Cue.writingDirection.VERTICAL_RIGHT_TO_LEFT;
    }
};
VttTextParser.prototype.parsedLineValueAndInterpretation_ = function (cue, word) {
    var Cue = shaka.text.Cue;
    var results = null;
    if ((results = /^line:([\d.]+)%(?:,(start|end|center))?$/.exec(word))) {
        cue.lineInterpretation = Cue.lineInterpretation.PERCENTAGE;
        cue.line = Number(results[1]);
        if (results[2]) {
            cue.lineAlign = Cue.lineAlign[results[2].toUpperCase()];
        }
    }
    else if ((results = /^line:(-?\d+)(?:,(start|end|center))?$/.exec(word))) {
        cue.lineInterpretation = Cue.lineInterpretation.LINE_NUMBER;
        cue.line = Number(results[1]);
        if (results[2]) {
            cue.lineAlign = Cue.lineAlign[results[2].toUpperCase()];
        }
    }
    else {
        return false;
    }
    return true;
};
VttTextParser.prototype.parseTime_ = function (parser) {
    var results = parser.readRegex(/(?:(\d{1,}):)?(\d{2}):(\d{2})\.(\d{3})/g);
    if (results == null) {
        return null;
    }
    var hours = Number(results[1]) || 0;
    var minutes = Number(results[2]);
    var seconds = Number(results[3]);
    var miliseconds = Number(results[4]);
    if (minutes > 59 || seconds > 59) {
        return null;
    }
    return miliseconds / 1000 + seconds + minutes * 60 + hours * 3600;
};
VttTextParser.MPEG_TIMESCALE_ = 90000;
export default VttTextParser;
//# sourceMappingURL=VttTextParser.js.map