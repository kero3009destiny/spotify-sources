function TextParser(data) {
    this.data_ = data;
    this.position_ = 0;
}
TextParser.prototype.atEnd = function () {
    return this.position_ === this.data_.length;
};
TextParser.prototype.readLine = function () {
    return this.readRegexReturnCapture_(/(.*?)(\n|$)/gm, 1);
};
TextParser.prototype.readWord = function () {
    return this.readRegexReturnCapture_(/[^ \t\n]*/gm, 0);
};
TextParser.prototype.skipWhitespace = function () {
    this.readRegex(/[ \t]+/gm);
};
TextParser.prototype.readRegex = function (regex) {
    var index = this.indexOf_(regex);
    if (this.atEnd() || index == null || index.position !== this.position_) {
        return null;
    }
    this.position_ += index.length;
    return index.results;
};
TextParser.prototype.readRegexReturnCapture_ = function (regex, index) {
    if (this.atEnd()) {
        return null;
    }
    var ret = this.readRegex(regex);
    if (!ret) {
        return null;
    }
    else {
        return ret[index];
    }
};
TextParser.prototype.indexOf_ = function (regex) {
    regex.lastIndex = this.position_;
    var results = regex.exec(this.data_);
    if (results == null) {
        return null;
    }
    else {
        return {
            position: results.index,
            length: results[0].length,
            results: results,
        };
    }
};
export default TextParser;
//# sourceMappingURL=TextParser.js.map