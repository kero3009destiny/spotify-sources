var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { EndVideoKeys, PlaybackSessionKeys, } from '../types';
import PlaybackEvents, { EndReason } from '../VideoPlaybackEvents';
import { COMMAND_INITIATED_TIME_MS, computeRange, created, DEFAULT_INVALID_TIME, ended, endedWhilePlaying, getFirstTimestamp, handlePlayingPosition, interruptedWhilePlaying, newSessionLoaded, retrieveEndVideoReasonStart, retrieveEndvideoMetadata, seekingWhilePlaying, startedPlaying, audioFormat, videoFormat, } from '../utils';
import { generatePlaybackSessionMessage } from '../DefaultEventsCalculator';
import { cond, T } from 'ramda';
import { EndVideoReasonEnd } from '../index';
function convertReasonEnd(reasonEnd) {
    switch (reasonEnd) {
        case EndReason.PLAYED_TO_END:
            return EndVideoReasonEnd.END_TRACK_DONE;
        case EndReason.REQUESTED:
            return EndVideoReasonEnd.END_PLAY;
        case EndReason.FATAL_ERROR:
            return EndVideoReasonEnd.END_TRACK_ERROR;
        default:
            return reasonEnd;
    }
}
function sortRange(a, b) {
    if (a.from < b.from) {
        return -1;
    }
    if (a.from === b.from) {
        if (a.to > b.to) {
            return -1;
        }
        if (a.to < b.to) {
            return 1;
        }
        return 0;
    }
    return 1;
}
function calculateTimeWeightedBitrate(bitrates, totalKnowTime) {
    if (totalKnowTime === 0) {
        return 0;
    }
    return Object.entries(bitrates).reduce(function (timeWeight, _a) {
        var bitrate = _a[0], bitrateTime = _a[1];
        var timeInBitrateWeighted = (parseFloat(bitrate) * bitrateTime) / totalKnowTime;
        return Math.round(timeWeight + timeInBitrateWeighted);
    }, 0);
}
function calculateUnionPlayed(sortedList) {
    return sortedList
        .sort(sortRange)
        .reduce(function (uniqueRanges, currentRange, index) {
        if (uniqueRanges.length === 0) {
            uniqueRanges.push(currentRange);
            return uniqueRanges;
        }
        var range = sortedList[index - 1];
        if (range.to === currentRange.from) {
            uniqueRanges[index - 1] = {
                from: range.from,
                to: currentRange.to,
            };
            return uniqueRanges;
        }
        if (range.to < currentRange.to && range.to > currentRange.from) {
            uniqueRanges[index - 1] = {
                from: range.from,
                to: currentRange.to,
            };
            return uniqueRanges;
        }
        if (range.to < currentRange.from) {
            uniqueRanges.push(currentRange);
            return uniqueRanges;
        }
        return uniqueRanges;
    }, [])
        .reduce(function (unionPlayed, union) { return unionPlayed + union.to - union.from; }, 0);
}
var handleBitrateInterruption = function (event, prevState) {
    var state = __assign({}, prevState);
    if (state.playing && state.bitrates[state.activeBitrate] !== undefined) {
        var playedInBitrate = computeRange(state.playingTimestamp / 1000, event.timestamp / 1000);
        state.bitrates[state.activeBitrate] += playedInBitrate;
        state.totalTimePlayedInKnownBitrate += playedInBitrate;
        state.timeWeightedBitrate = calculateTimeWeightedBitrate(state.bitrates, state.totalTimePlayedInKnownBitrate);
    }
    state.playing = false;
    state.playingTimestamp = 0;
    return state;
};
var handleFormatChange = function (event, currentState) {
    var state = __assign({}, currentState);
    var timestamp = event.timestamp, bandwidth = event.data.format.bandwidth;
    if (!state.bitrates[bandwidth]) {
        state.bitrates[bandwidth] = 0;
    }
    if (state.playing && state.activeBitrate === -1) {
        state.playingTimestamp = timestamp;
    }
    else if (state.playing && bandwidth !== state.activeBitrate) {
        var playedInBitrate = computeRange(state.playingTimestamp / 1000, timestamp / 1000);
        state.bitrates[state.activeBitrate] += playedInBitrate;
        state.totalTimePlayedInKnownBitrate += playedInBitrate;
        state.playingTimestamp = timestamp;
        state.timeWeightedBitrate = calculateTimeWeightedBitrate(state.bitrates, state.totalTimePlayedInKnownBitrate);
    }
    if (!state.playing && !state.bitrates[bandwidth]) {
        state.bitrates[bandwidth] = 0;
    }
    state.activeBitrate = bandwidth;
    return state;
};
var handlePlayingTimestamp = function (event, state) { return (__assign(__assign({}, state), { playing: true, playingTimestamp: event.timestamp })); };
var handlePlayedRangesSeeked = function (_a, state) {
    var data = _a.data;
    return (__assign(__assign({}, state), { playingPosition: data.toPosition, playing: false, playedRanges: __spreadArrays(state.playedRanges, [
            {
                from: state.playingPosition,
                to: data.fromPosition,
            },
        ]) }));
};
var handleMaxContinousSeeked = function (event, state) {
    var msPlayedContinuous = (event.data.fromPosition - state.playingPosition) * 1000;
    var maxContinous = Math.round(Math.max(state.maxContinous, msPlayedContinuous));
    return __assign(__assign({}, state), { playing: false, playingPosition: event.data.toPosition, maxContinous: maxContinous });
};
var handleMaxContinousEnded = function (event, state) {
    var msPlayedContinuous = (event.data.position - state.playingPosition) * 1000;
    var maxContinous = Math.round(Math.max(state.maxContinous, msPlayedContinuous));
    return __assign(__assign({}, state), { playing: false, playingPosition: 0, maxContinous: maxContinous });
};
var handleUnionEnded = function (_a, state) {
    var data = _a.data;
    var playedRanges = __spreadArrays(state.playedRanges, [
        { from: state.playingPosition, to: data.position },
    ]);
    var unionPlayed = Math.round(calculateUnionPlayed(playedRanges) * 1000);
    return __assign(__assign({}, state), { playedRanges: playedRanges, playing: false, playingPosition: 0, unionPlayed: unionPlayed });
};
export function processEndVideoMetadata(sessionEvents) {
    return sessionEvents
        .filter(created)
        .reduce(function (_, _a) {
        var data = _a.data;
        return retrieveEndvideoMetadata(data.playbackIdentity.metadata || {});
    }, {});
}
export function processAudioCodec(sessionEvents) {
    var _a;
    return sessionEvents.filter(audioFormat).reduce(function (_, _a) {
        var _b;
        var data = _a.data;
        return (_b = {},
            _b[EndVideoKeys.AUDIOCODEC] = data.format.audioCodec,
            _b);
    }, (_a = {},
        _a[EndVideoKeys.AUDIOCODEC] = '',
        _a));
}
export function processVideoCodec(sessionEvents) {
    var _a;
    return sessionEvents.filter(videoFormat).reduce(function (_, _a) {
        var _b;
        var data = _a.data;
        return (_b = {},
            _b[EndVideoKeys.VIDEOCODEC] = data.format.videoCodec,
            _b);
    }, (_a = {},
        _a[EndVideoKeys.VIDEOCODEC] = '',
        _a));
}
export function processUiLatency(sessionEvents) {
    var _a;
    var onResumedTimestamp = getFirstTimestamp(sessionEvents, PlaybackEvents.RESUMED);
    return sessionEvents.filter(created).reduce(function (prev, _a) {
        var _b;
        var data = _a.data;
        if (onResumedTimestamp !== DEFAULT_INVALID_TIME) {
            var endVideoMetadata = retrieveEndvideoMetadata(data.playbackIdentity.metadata || {});
            var commandInitiatedTime = endVideoMetadata[COMMAND_INITIATED_TIME_MS];
            return _b = {},
                _b[EndVideoKeys.UI_LATENCY] = commandInitiatedTime > -1
                    ? Math.round(onResumedTimestamp - commandInitiatedTime)
                    : -1,
                _b;
        }
        return prev;
    }, (_a = {},
        _a[EndVideoKeys.UI_LATENCY] = DEFAULT_INVALID_TIME,
        _a));
}
export function processLocalTime(sessionEvents) {
    var _a;
    return sessionEvents.filter(created).reduce(function (_, _a) {
        var _b;
        var timestamp = _a.timestamp;
        return (_b = {},
            _b[EndVideoKeys.LOCAL_TIME_MS] = Math.round(timestamp),
            _b);
    }, (_a = {},
        _a[EndVideoKeys.LOCAL_TIME_MS] = 0,
        _a));
}
export function processNewSessionLoaded(sessionEvents) {
    return sessionEvents.filter(newSessionLoaded).reduce(function (_, _a) {
        var data = _a.data;
        return ({
            startReason: data.playbackRequest.metadata
                ? retrieveEndVideoReasonStart(data.playbackRequest.metadata)
                : '',
        });
    }, {
        startReason: '',
    });
}
export function processReasonEnd(sessionEvents) {
    var _a;
    var event = processNewSessionLoaded(sessionEvents);
    return sessionEvents.filter(ended).reduce(function (_, _a) {
        var _b;
        var data = _a.data;
        return (_b = {},
            _b[EndVideoKeys.REASON_END] = event.startReason || convertReasonEnd(data.reason),
            _b);
    }, (_a = {},
        _a[EndVideoKeys.REASON_END] = '',
        _a));
}
export function processUnionPlayed(sessionEvents) {
    var _a;
    var finalState = sessionEvents.reduce(function (state, event) {
        return cond([
            [startedPlaying(state.playing), handlePlayingPosition],
            [seekingWhilePlaying(state.playing), handlePlayedRangesSeeked],
            [endedWhilePlaying(state.playing), handleUnionEnded],
            [T, function (_, defaultState) { return defaultState; }],
        ])(event, state);
    }, {
        playedRanges: [],
        playing: false,
        playingPosition: 0,
        unionPlayed: 0,
    });
    return _a = {},
        _a[EndVideoKeys.UNION_PLAYED] = finalState.unionPlayed,
        _a;
}
export function processMaxContinousPlayed(sessionEvents) {
    var _a;
    var finalState = sessionEvents.reduce(function (state, event) {
        return cond([
            [startedPlaying(state.playing), handlePlayingPosition],
            [seekingWhilePlaying(state.playing), handleMaxContinousSeeked],
            [endedWhilePlaying(state.playing), handleMaxContinousEnded],
            [T, function (_, defaultState) { return defaultState; }],
        ])(event, state);
    }, {
        playing: false,
        playingPosition: 0,
        maxContinous: 0,
    });
    return _a = {},
        _a[EndVideoKeys.MAX_CONTINOUS] = finalState.maxContinous,
        _a;
}
export function processTimeWeightedBitrate(sessionEvents) {
    var _a;
    var finalState = sessionEvents.reduce(function (state, event) {
        return cond([
            [videoFormat, handleFormatChange],
            [startedPlaying(state.playing), handlePlayingTimestamp],
            [interruptedWhilePlaying(state.playing), handleBitrateInterruption],
            [T, function (_, defaultState) { return defaultState; }],
        ])(event, state);
    }, {
        activeBitrate: -1,
        currentPlayingBitrate: 0,
        playing: false,
        playingTimestamp: 0,
        bitrates: {},
        totalTimePlayedInKnownBitrate: 0,
        timeWeightedBitrate: 0,
    });
    return _a = {},
        _a[EndVideoKeys.TIME_WEIGHTED_BITRATE] = finalState.timeWeightedBitrate,
        _a;
}
export function generateEndVideoMessage(sessionEvents) {
    var _a;
    var playbackSessionFields = generatePlaybackSessionMessage(sessionEvents);
    var endVideoFields = __assign(__assign({}, playbackSessionFields), (_a = {}, _a[EndVideoKeys.MS_PLAYED_BACKGROUND] = 0, _a[EndVideoKeys.FULL_SCREEN] = 0, _a[EndVideoKeys.PREFETCHED_BYTES] = 0, _a[EndVideoKeys.PREFETCHED_BYTES_LOADED] = -1, _a[EndVideoKeys.REFERRER_VENDOR] = 'com.spotify', _a[EndVideoKeys.SHUFFLE] = false, _a[EndVideoKeys.LIVE] = false, _a[EndVideoKeys.SEQUENCE_NUMBER] = -1, _a[EndVideoKeys.SEQUENCE_ID] = '', _a[EndVideoKeys.CONNECTION_TYPE_START] = '', _a[EndVideoKeys.CONNECTION_TYPE_END] = '', _a[EndVideoKeys.STREAMING_RULE] = '', _a[EndVideoKeys.INCOGNITO_MODE] = false, _a[EndVideoKeys.N_SEEKFWD] = playbackSessionFields[PlaybackSessionKeys.N_SEEKFORWARD], _a[EndVideoKeys.VIDEO_SESSION_ID] = playbackSessionFields[PlaybackSessionKeys.SESSION_ID], _a[EndVideoKeys.MS_TOTAL_EST] = playbackSessionFields[PlaybackSessionKeys.MS_DURATION], _a[EndVideoKeys.MS_MANIFEST_LATENCY] = playbackSessionFields[PlaybackSessionKeys.MS_MANIFEST_LOAD_TIME], _a[EndVideoKeys.START_OFFSET_MS] = playbackSessionFields[PlaybackSessionKeys.MS_START_POSITION], _a[EndVideoKeys.MS_SEEK_REBUFFERING] = playbackSessionFields[PlaybackSessionKeys.MS_BUFFERING_SEEK], _a[EndVideoKeys.MAX_MS_SEEK_REBUFFERING] = playbackSessionFields[PlaybackSessionKeys.MS_BUFFERING_SEEK_LONGEST], _a[EndVideoKeys.MS_STALLED] = playbackSessionFields[PlaybackSessionKeys.MS_BUFFERING_STALL], _a[EndVideoKeys.MAX_MS_STALLED] = playbackSessionFields[PlaybackSessionKeys.MS_BUFFERING_STALL_LONGEST], _a[EndVideoKeys.KEY_SYSTEM] = playbackSessionFields[PlaybackSessionKeys.ENCRYPTION_TYPE], _a[EndVideoKeys.MS_KEY_LATENCY] = playbackSessionFields[PlaybackSessionKeys.MS_ENCRYPTION_LOAD_TIME], _a[EndVideoKeys.MS_LATENCY] = playbackSessionFields[PlaybackSessionKeys.MS_START_TIME], _a[EndVideoKeys.TOTAL_BYTES] = Math.round(playbackSessionFields[PlaybackSessionKeys.KBYTES_DOWNLOADED] * 1000), _a));
    return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, endVideoFields), processEndVideoMetadata(sessionEvents)), processUiLatency(sessionEvents)), processReasonEnd(sessionEvents)), processUnionPlayed(sessionEvents)), processMaxContinousPlayed(sessionEvents)), processTimeWeightedBitrate(sessionEvents)), processLocalTime(sessionEvents)), processAudioCodec(sessionEvents)), processVideoCodec(sessionEvents));
}
//# sourceMappingURL=EndVideoEventsCalculator.js.map