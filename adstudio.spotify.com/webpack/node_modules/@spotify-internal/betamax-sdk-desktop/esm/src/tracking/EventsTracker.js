import PlaybackEvents from './VideoPlaybackEvents';
var EventsTracker = (function () {
    function EventsTracker() {
        this.sessionEvents = [];
    }
    EventsTracker.prototype.onBuffering = function (playWhenReady, type, position, timestamp) {
        this.sessionEvents.push({
            timestamp: timestamp,
            type: PlaybackEvents.BUFFERING,
            data: {
                type: type,
                playWhenReady: playWhenReady,
                position: position,
            },
        });
    };
    EventsTracker.prototype.onEncryptionKeyLoaded = function (encryptionType, timestamp) {
        this.sessionEvents.push({
            timestamp: timestamp,
            type: PlaybackEvents.ENCRYPTION_KEY_LOADED,
            data: {
                encryptionType: encryptionType,
            },
        });
    };
    EventsTracker.prototype.onDurationChanged = function (duration, timestamp) {
        this.sessionEvents.push({
            timestamp: timestamp,
            type: PlaybackEvents.DURATION_CHANGED,
            data: {
                duration: duration,
            },
        });
    };
    EventsTracker.prototype.onManifestLoaded = function (timestamp) {
        this.sessionEvents.push({
            timestamp: timestamp,
            type: PlaybackEvents.MANIFEST_LOADED,
            data: undefined,
        });
    };
    EventsTracker.prototype.onFatalError = function (error, position, timestamp) {
        this.sessionEvents.push({
            timestamp: timestamp,
            type: PlaybackEvents.FATAL_ERROR,
            data: {
                error: error,
                position: position,
            },
        });
    };
    EventsTracker.prototype.onRecoverableError = function (error, position, timestamp) {
        this.sessionEvents.push({
            timestamp: timestamp,
            type: PlaybackEvents.RECOVERABLE_ERROR,
            data: {
                error: error,
                position: position,
            },
        });
    };
    EventsTracker.prototype.onPlaybackCreated = function (playbackIdentity, initialConfiguration, _timeObservable, timestamp) {
        this.sessionEvents.push({
            timestamp: timestamp,
            type: PlaybackEvents.CREATED,
            data: {
                playbackIdentity: playbackIdentity,
                initialConfiguration: initialConfiguration,
            },
        });
    };
    EventsTracker.prototype.onEndingPlayback = function (playbackRequest, timestamp) {
        this.sessionEvents.push({
            timestamp: timestamp,
            type: PlaybackEvents.NEW_SESSION_LOADED,
            data: {
                playbackRequest: playbackRequest,
            },
        });
    };
    EventsTracker.prototype.onPlaybackEnded = function (reason, position, timestamp) {
        this.sessionEvents.push({
            timestamp: timestamp,
            type: PlaybackEvents.ENDED,
            data: {
                reason: reason,
                position: position,
            },
        });
    };
    EventsTracker.prototype.onReady = function (playWhenReady, position, timestamp) {
        this.sessionEvents.push({
            timestamp: timestamp,
            type: PlaybackEvents.READY,
            data: {
                playWhenReady: playWhenReady,
                position: position,
            },
        });
    };
    EventsTracker.prototype.onResumed = function (position, timestamp) {
        this.sessionEvents.push({
            timestamp: timestamp,
            type: PlaybackEvents.RESUMED,
            data: {
                position: position,
            },
        });
    };
    EventsTracker.prototype.onPaused = function (position, timestamp) {
        this.sessionEvents.push({
            timestamp: timestamp,
            type: PlaybackEvents.PAUSED,
            data: {
                position: position,
            },
        });
    };
    EventsTracker.prototype.onSeeking = function (fromPosition, toPosition, timestamp) {
        this.sessionEvents.push({
            timestamp: timestamp,
            type: PlaybackEvents.SEEKING,
            data: {
                fromPosition: fromPosition,
                toPosition: toPosition,
            },
        });
    };
    EventsTracker.prototype.onAudioFormatChanged = function (format, position, timestamp) {
        this.sessionEvents.push({
            timestamp: timestamp,
            type: PlaybackEvents.AUDIO_FORMAT_CHANGED,
            data: {
                format: format,
                position: position,
            },
        });
    };
    EventsTracker.prototype.onVideoFormatChanged = function (format, position, timestamp) {
        this.sessionEvents.push({
            timestamp: timestamp,
            type: PlaybackEvents.VIDEO_FORMAT_CHANGED,
            data: {
                format: format,
                position: position,
            },
        });
    };
    EventsTracker.prototype.onVolumeChanged = function (volume, position, timestamp) {
        this.sessionEvents.push({
            timestamp: timestamp,
            type: PlaybackEvents.VOLUME_CHANGED,
            data: {
                volume: volume,
                position: position,
            },
        });
    };
    EventsTracker.prototype.onManifestLoading = function (timestamp) {
        this.sessionEvents.push({
            timestamp: timestamp,
            type: PlaybackEvents.MANIFEST_LOADING,
            data: undefined,
        });
    };
    EventsTracker.prototype.onEncryptionKeyLoading = function (timestamp) {
        this.sessionEvents.push({
            timestamp: timestamp,
            type: PlaybackEvents.ENCRYPTION_KEY_LOADING,
            data: undefined,
        });
    };
    EventsTracker.prototype.onBytesTransferred = function (bytes, timeMs, timestamp) {
        this.sessionEvents.push({
            timestamp: timestamp,
            type: PlaybackEvents.BYTES_TRANSFERRED,
            data: {
                bytes: bytes,
                timeMs: timeMs,
            },
        });
    };
    EventsTracker.prototype.onSubtitleChanged = function (subtitle, position, timestamp) {
        this.sessionEvents.push({
            timestamp: timestamp,
            type: PlaybackEvents.SUBTITLE_CHANGED,
            data: {
                subtitle: subtitle,
                position: position,
            },
        });
    };
    EventsTracker.prototype.onFullscreenChanged = function (fullscreen, position, timestamp) {
        this.sessionEvents.push({
            timestamp: timestamp,
            type: PlaybackEvents.FULLSCREEN_CHANGED,
            data: {
                fullscreen: fullscreen,
                position: position,
            },
        });
    };
    EventsTracker.prototype.onDroppedVideoFrames = function (droppedFrames, timestamp) {
        this.sessionEvents.push({
            timestamp: timestamp,
            type: PlaybackEvents.DROPPED_FRAMES,
            data: {
                droppedFrames: droppedFrames,
            },
        });
    };
    return EventsTracker;
}());
export default EventsTracker;
//# sourceMappingURL=EventsTracker.js.map