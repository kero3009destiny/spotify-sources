var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { compose, pathOr, replace, toPairs } from 'ramda';
import { addKeysPrefix } from '../utils';
import PlaybackEvents from './VideoPlaybackEvents';
export var END_VIDEO_PREFIX = 'endvideo_';
export var PLAYBACK_ID = 'playback_id';
export var REASON_START = 'reason_start';
export var FEATURE_IDENTIFIER = 'feature_identifier';
export var REFERRER_VERSION = 'referrer_version';
export var FEATURE_VERSION = 'feature_version';
export var GAIA_DEV_ID = 'gaia_dev_id';
export var VIEW_URI = 'view_uri';
export var PLAY_CONTEXT = 'play_context';
export var FILE_ID = 'file_id';
export var REFERRER = 'referrer';
export var PLAY_TRACK = 'play_track';
export var PROVIDER = 'provider';
export var COMMAND_INITIATED_TIME_MS = 'command_initiated_time_ms';
export var IS_ADVERTISMENT = 'is_advertisement';
export var ENDVIDEO_KEYS = [
    PLAYBACK_ID,
    REASON_START,
    FEATURE_IDENTIFIER,
    FEATURE_VERSION,
    REFERRER_VERSION,
    FILE_ID,
    GAIA_DEV_ID,
    VIEW_URI,
    PLAY_CONTEXT,
    REFERRER,
    PLAY_TRACK,
    PROVIDER,
    COMMAND_INITIATED_TIME_MS,
];
export var DEFAULT_INVALID_TIME = -1;
export function createPlaybackMetadata(payload) {
    var _a;
    var playbackId = pathOr('', ['track', 'playback_id'], payload);
    var manifestId = pathOr('', ['track', 'track', 'metadata', 'media.manifest_id'], payload);
    var featureIdentifier = pathOr('', ['track', 'play_origin', 'feature_identifier'], payload);
    var featureVersion = pathOr('', ['track', 'play_origin', 'feature_version'], payload);
    var viewUri = pathOr('', ['track', 'play_origin', 'view_uri'], payload);
    var referrerIdentifier = pathOr('', ['track', 'play_origin', 'referrer_identifier'], payload);
    var deviceIdentifier = pathOr('', ['track', 'play_origin', 'device_identifier'], payload);
    var provider = pathOr('', ['track', 'track', 'provider'], payload);
    var startReason = pathOr('unknown', ['start_reason'], payload);
    var contextUri = pathOr('', ['track', 'context_uri'], payload);
    var trackUri = pathOr('', ['track', 'track', 'uri'], payload);
    var commandInitiatedTime = pathOr(-1, ['logging_params', 'command_initiated_time'], payload);
    return _a = {},
        _a[PLAYBACK_ID] = playbackId,
        _a[FEATURE_IDENTIFIER] = featureIdentifier,
        _a[REFERRER_VERSION] = featureVersion,
        _a[FEATURE_VERSION] = featureVersion,
        _a[VIEW_URI] = viewUri,
        _a[REFERRER] = referrerIdentifier,
        _a[GAIA_DEV_ID] = deviceIdentifier,
        _a[PROVIDER] = provider,
        _a[REASON_START] = startReason,
        _a[PLAY_CONTEXT] = contextUri,
        _a[PLAY_TRACK] = trackUri,
        _a[COMMAND_INITIATED_TIME_MS] = commandInitiatedTime,
        _a[FILE_ID] = manifestId,
        _a;
}
var endVideoPrefixKeys = addKeysPrefix(ENDVIDEO_KEYS);
export var addEndVideoPrefix = endVideoPrefixKeys(END_VIDEO_PREFIX);
export var createMetadataWithEndVideoPrefix = compose(addEndVideoPrefix, createPlaybackMetadata);
export function retrieveEndvideoMetadata(metadata) {
    return toPairs(metadata)
        .filter(function (_a) {
        var key = _a[0];
        return key.includes(END_VIDEO_PREFIX);
    })
        .reduce(function (acc, _a) {
        var _b;
        var key = _a[0], value = _a[1];
        return (__assign(__assign({}, acc), (_b = {}, _b[replace(END_VIDEO_PREFIX, '', key)] = value, _b)));
    }, {});
}
export var resumed = function (event) {
    return event.type === PlaybackEvents.RESUMED;
};
export var ended = function (event) {
    return event.type === PlaybackEvents.ENDED;
};
export var droppedFrames = function (event) {
    return event.type === PlaybackEvents.DROPPED_FRAMES;
};
export var newSessionLoaded = function (event) {
    return event.type === PlaybackEvents.NEW_SESSION_LOADED;
};
export var paused = function (event) {
    return event.type === PlaybackEvents.PAUSED;
};
export var created = function (event) {
    return event.type === PlaybackEvents.CREATED;
};
export var ready = function (event) {
    return event.type === PlaybackEvents.READY;
};
export var duration = function (event) {
    return event.type === PlaybackEvents.DURATION_CHANGED;
};
export var audioFormat = function (event) {
    return event.type === PlaybackEvents.AUDIO_FORMAT_CHANGED;
};
export var videoFormat = function (event) {
    return event.type === PlaybackEvents.VIDEO_FORMAT_CHANGED;
};
export var encryptionKeyLoaded = function (event) {
    return event.type === PlaybackEvents.ENCRYPTION_KEY_LOADED;
};
export var encryptionKeyLoading = function (event) {
    return event.type === PlaybackEvents.ENCRYPTION_KEY_LOADING;
};
export var subtitles = function (event) {
    return event.type === PlaybackEvents.SUBTITLE_CHANGED;
};
export var manifestLoaded = function (event) {
    return event.type === PlaybackEvents.MANIFEST_LOADED;
};
export var seeking = function (event) {
    return event.type === PlaybackEvents.SEEKING;
};
export var fullscreen = function (event) {
    return event.type === PlaybackEvents.FULLSCREEN_CHANGED;
};
export var bytesTransferred = function (event) {
    return event.type === PlaybackEvents.BYTES_TRANSFERRED;
};
export var retrieveReasonStart = function (metadata) {
    return metadata[REASON_START] || '';
};
export var retrieveEndVideoReasonStart = compose(retrieveReasonStart, retrieveEndvideoMetadata);
export var startedPlaying = function (isPlaying) { return function (event) { return resumed(event) && !isPlaying; }; };
export var seekingWhilePlaying = function (isPlaying) { return function (event) { return seeking(event) && isPlaying; }; };
export var endedWhilePlaying = function (isPlaying) { return function (event) { return ended(event) && isPlaying; }; };
export var interruptedWhilePlaying = function (isPlaying) { return function (event) { return (seeking(event) || paused(event) || ended(event)) && isPlaying; }; };
export var handlePlayingPosition = function (_a, state) {
    var data = _a.data;
    return (__assign(__assign({}, state), { playing: true, playingPosition: data.position }));
};
export function getLastTimestamp(sessionEvents, eventType) {
    return sessionEvents
        .filter(function (_a) {
        var type = _a.type;
        return type === eventType;
    })
        .reduce(function (_, current) { return current.timestamp; }, DEFAULT_INVALID_TIME);
}
export function getFirstTimestamp(sessionEvents, eventType) {
    return sessionEvents
        .filter(function (_a) {
        var type = _a.type;
        return type === eventType;
    })
        .reduce(function (firstTimestamp, current) {
        return firstTimestamp === DEFAULT_INVALID_TIME
            ? current.timestamp
            : firstTimestamp;
    }, DEFAULT_INVALID_TIME);
}
export function computeRange(start, end) {
    if (!Number.isFinite(start) || !Number.isFinite(end)) {
        return 0;
    }
    var range = end - start;
    if (!Number.isFinite(range) || range < 0) {
        return 0;
    }
    return Math.round(range * 1000);
}
export function getConnectionType() {
    return navigator.onLine ? 'wlan' : 'none';
}
//# sourceMappingURL=utils.js.map