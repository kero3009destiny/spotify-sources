var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { EndVideoKeys, PlaybackSessionKeys, } from './types';
import PlaybackEvents, { BufferType } from './VideoPlaybackEvents';
import { cond, T } from 'ramda';
import { bytesTransferred, computeRange, created, DEFAULT_INVALID_TIME, encryptionKeyLoaded, duration, ended, fullscreen, getLastTimestamp, handlePlayingPosition, interruptedWhilePlaying, manifestLoaded, ready, seeking, startedPlaying, subtitles, droppedFrames, videoFormat, } from './utils';
function getEventPosition(_a) {
    var data = _a.data, type = _a.type;
    if (data) {
        if (Number.isFinite(data.position)) {
            return data.position;
        }
        if (type === PlaybackEvents.SEEKING && Number.isFinite(data.fromPosition)) {
            return data.fromPosition;
        }
    }
    return Infinity;
}
function registerBufferingEnd(state, bufferingFields, event) {
    var bufferDuration = Math.round(event.timestamp - state.bufferingStart);
    var newBufferingFields = __assign({}, bufferingFields);
    if (Number.isFinite(bufferDuration) && bufferDuration > 0) {
        switch (state.bufferingType) {
            case BufferType.SEEK:
                newBufferingFields[PlaybackSessionKeys.MS_BUFFERING_SEEK] += bufferDuration;
                if (bufferDuration >
                    newBufferingFields[PlaybackSessionKeys.MS_BUFFERING_SEEK_LONGEST]) {
                    newBufferingFields[PlaybackSessionKeys.MS_BUFFERING_SEEK_LONGEST] = bufferDuration;
                }
                break;
            case BufferType.STALL:
                newBufferingFields[PlaybackSessionKeys.MS_BUFFERING_STALL] += bufferDuration;
                if (bufferDuration >
                    newBufferingFields[PlaybackSessionKeys.MS_BUFFERING_STALL_LONGEST]) {
                    newBufferingFields[PlaybackSessionKeys.MS_BUFFERING_STALL_LONGEST] = bufferDuration;
                }
                break;
            case BufferType.INITIAL:
                newBufferingFields[PlaybackSessionKeys.MS_INITIAL_BUFFERING] += bufferDuration;
                break;
            default:
                break;
        }
    }
    return newBufferingFields;
}
var handleMsPlayed = function (event, state) {
    var msPlayed = computeRange(state.playingPosition, getEventPosition(event));
    return __assign(__assign({}, state), { msPlayed: msPlayed + state.msPlayed, playing: false, playingPosition: 0 });
};
var handleSubtitleChanged = function (_a, state) {
    var data = _a.data;
    return (__assign(__assign({}, state), { subtitlesEnabled: !!(data && data.subtitle.languageTag) }));
};
var handleFullscreenChanged = function (_a, state) {
    var data = _a.data;
    return (__assign(__assign({}, state), { fullscreen: data.fullscreen }));
};
var computeSubtitlePlayed = function (event, currentState) {
    var state = __assign({}, currentState);
    var subtitlesAndPlaying = state.playing && state.subtitlesEnabled;
    if (subtitlesAndPlaying && !state.playingWithSubtitlesPosition) {
        state.playingWithSubtitlesPosition = event.data.position;
    }
    if (!subtitlesAndPlaying && state.playingWithSubtitlesPosition) {
        state.msPlayedSubtitles += computeRange(state.playingWithSubtitlesPosition, getEventPosition(event));
        state.playingWithSubtitlesPosition = 0;
    }
    return state;
};
var computeFullscreenPlayed = function (event, currentState) {
    var state = __assign({}, currentState);
    var fullscreenAndPlaying = state.playing && state.fullscreen;
    if (fullscreenAndPlaying && !state.playingWhileFullscreenPosition) {
        state.playingWhileFullscreenPosition = event.data.position;
    }
    if (!fullscreenAndPlaying && state.playingWhileFullscreenPosition) {
        state.msPlayedFullscreen += computeRange(state.playingWhileFullscreenPosition, getEventPosition(event));
        state.playingWhileFullscreenPosition = 0;
    }
    return state;
};
export function processIdentityFields(sessionEvents) {
    var _a;
    return sessionEvents.filter(created).reduce(function (_, _a) {
        var _b;
        var data = _a.data;
        return (_b = {},
            _b[PlaybackSessionKeys.SESSION_ID] = data.playbackIdentity.sessionId,
            _b[PlaybackSessionKeys.MEDIA_URL] = data.playbackIdentity.mediaUrl,
            _b[PlaybackSessionKeys.FEATURE_IDENTIFIER] = '',
            _b);
    }, (_a = {},
        _a[PlaybackSessionKeys.SESSION_ID] = '',
        _a[PlaybackSessionKeys.MEDIA_URL] = '',
        _a[PlaybackSessionKeys.FEATURE_IDENTIFIER] = '',
        _a));
}
export function processMsStartPosition(sessionEvents) {
    var _a;
    return sessionEvents.filter(ready).reduce(function (_, _a) {
        var _b;
        var data = _a.data;
        return (_b = {},
            _b[PlaybackSessionKeys.MS_START_POSITION] = Math.round(data.position * 1000),
            _b);
    }, (_a = {},
        _a[PlaybackSessionKeys.MS_START_POSITION] = DEFAULT_INVALID_TIME,
        _a));
}
export function processMsDuration(sessionEvents) {
    var _a;
    return sessionEvents.filter(duration).reduce(function (_, _a) {
        var _b;
        var data = _a.data;
        return (_b = {},
            _b[PlaybackSessionKeys.MS_DURATION] = Math.round(data.duration * 1000),
            _b);
    }, (_a = {},
        _a[PlaybackSessionKeys.MS_DURATION] = DEFAULT_INVALID_TIME,
        _a));
}
export function processStartTime(sessionEvents) {
    var _a;
    var createdLastTimestamp = getLastTimestamp(sessionEvents, PlaybackEvents.CREATED);
    return sessionEvents.filter(ready).reduce(function (prev, current) {
        var _a;
        return createdLastTimestamp !== DEFAULT_INVALID_TIME
            ? (_a = {},
                _a[PlaybackSessionKeys.MS_START_TIME] = Math.round(current.timestamp - createdLastTimestamp),
                _a) : prev;
    }, (_a = {},
        _a[PlaybackSessionKeys.MS_START_TIME] = DEFAULT_INVALID_TIME,
        _a));
}
export function processDroppedFrames(sessionEvents) {
    var _a;
    return sessionEvents.filter(droppedFrames).reduce(function (_, _a) {
        var _b;
        var data = _a.data;
        return (_b = {},
            _b[PlaybackSessionKeys.N_DROPPED_FRAMES] = data.droppedFrames,
            _b);
    }, (_a = {},
        _a[PlaybackSessionKeys.N_DROPPED_FRAMES] = 0,
        _a));
}
export function processEndFields(sessionEvents) {
    var _a;
    return sessionEvents.filter(ended).reduce(function (_, _a) {
        var _b;
        var data = _a.data;
        return (_b = {},
            _b[PlaybackSessionKeys.EXIT_REASON] = data.reason,
            _b);
    }, (_a = {},
        _a[PlaybackSessionKeys.EXIT_REASON] = '',
        _a));
}
export function processVideoFormatChangedFields(sessionEvents) {
    var _a;
    return sessionEvents.filter(videoFormat).reduce(function (prev, _a) {
        var _b;
        var data = _a.data;
        return (_b = {},
            _b[PlaybackSessionKeys.ASPECT_RATIO] = data.format.width && data.format.height
                ? data.format.width / data.format.height
                : prev[PlaybackSessionKeys.ASPECT_RATIO],
            _b[PlaybackSessionKeys.START_BITRATE] = data.format.bandwidth && !prev[PlaybackSessionKeys.START_BITRATE]
                ? data.format.bandwidth
                : prev[PlaybackSessionKeys.START_BITRATE],
            _b);
    }, (_a = {},
        _a[PlaybackSessionKeys.ASPECT_RATIO] = 0,
        _a[PlaybackSessionKeys.START_BITRATE] = 0,
        _a));
}
export function processMsEncryptionLoadTime(sessionEvents) {
    var _a;
    var encryptionKeyLoadingLastTimestamp = getLastTimestamp(sessionEvents, PlaybackEvents.ENCRYPTION_KEY_LOADING);
    return sessionEvents.filter(encryptionKeyLoaded).reduce(function (prev, current) {
        var _a;
        return encryptionKeyLoadingLastTimestamp !== DEFAULT_INVALID_TIME
            ? (_a = {},
                _a[PlaybackSessionKeys.MS_ENCRYPTION_LOAD_TIME] = Math.round(current.timestamp - encryptionKeyLoadingLastTimestamp),
                _a) : prev;
    }, (_a = {},
        _a[PlaybackSessionKeys.MS_ENCRYPTION_LOAD_TIME] = DEFAULT_INVALID_TIME,
        _a));
}
export function processEncryptionType(sessionEvents) {
    var _a;
    return sessionEvents.filter(encryptionKeyLoaded).reduce(function (_, _a) {
        var _b;
        var data = _a.data;
        return (_b = {},
            _b[PlaybackSessionKeys.ENCRYPTION_TYPE] = data.encryptionType,
            _b);
    }, (_a = {},
        _a[PlaybackSessionKeys.ENCRYPTION_TYPE] = '',
        _a));
}
export function processLasUsedSubtitle(sessionEvents) {
    var _a;
    return sessionEvents.filter(subtitles).reduce(function (prev, _a) {
        var _b;
        var data = _a.data;
        return (_b = {},
            _b[PlaybackSessionKeys.LAST_USED_SUBTITLE] = data.subtitle.languageTag ||
                prev[PlaybackSessionKeys.LAST_USED_SUBTITLE],
            _b);
    }, (_a = {},
        _a[PlaybackSessionKeys.LAST_USED_SUBTITLE] = '',
        _a));
}
export function processManifestLoadTime(sessionEvents) {
    var _a;
    var manifestLoadingLastTimestamp = getLastTimestamp(sessionEvents, PlaybackEvents.MANIFEST_LOADING);
    return sessionEvents.filter(manifestLoaded).reduce(function (prev, current) {
        var _a;
        return manifestLoadingLastTimestamp !== DEFAULT_INVALID_TIME
            ? (_a = {},
                _a[PlaybackSessionKeys.MS_MANIFEST_LOAD_TIME] = Math.round(current.timestamp - manifestLoadingLastTimestamp),
                _a) : prev;
    }, (_a = {},
        _a[PlaybackSessionKeys.MS_MANIFEST_LOAD_TIME] = DEFAULT_INVALID_TIME,
        _a));
}
export function processSeekFields(sessionEvents) {
    var _a;
    return sessionEvents.filter(seeking).reduce(function (prev, _a) {
        var _b, _c;
        var data = _a.data;
        if (data.fromPosition > data.toPosition) {
            return __assign(__assign({}, prev), (_b = {}, _b[PlaybackSessionKeys.N_SEEKBACK] = prev[PlaybackSessionKeys.N_SEEKBACK] + 1, _b[EndVideoKeys.MS_SEEKBACK] = Math.round(prev[EndVideoKeys.MS_SEEKBACK] +
                (data.fromPosition - data.toPosition) * 1000), _b));
        }
        if (data.fromPosition <= data.toPosition) {
            return __assign(__assign({}, prev), (_c = {}, _c[PlaybackSessionKeys.N_SEEKFORWARD] = prev[PlaybackSessionKeys.N_SEEKFORWARD] + 1, _c[EndVideoKeys.MS_SEEKFWD] = Math.round(prev[EndVideoKeys.MS_SEEKFWD] +
                (data.toPosition - data.fromPosition) * 1000), _c));
        }
        return prev;
    }, (_a = {},
        _a[PlaybackSessionKeys.N_SEEKBACK] = 0,
        _a[EndVideoKeys.MS_SEEKBACK] = 0,
        _a[PlaybackSessionKeys.N_SEEKFORWARD] = 0,
        _a[EndVideoKeys.MS_SEEKFWD] = 0,
        _a));
}
export function processBandwidthFields(sessionEvents) {
    var _a;
    var kiloBitsPerByte = 8 / 1000;
    var kilo = 1000;
    var state = {
        totalBytes: 0,
        totalTransferTimeSeconds: 0,
    };
    return sessionEvents.filter(bytesTransferred).reduce(function (_, _a) {
        var _b;
        var data = _a.data;
        state.totalBytes += data.bytes;
        state.totalTransferTimeSeconds += data.timeMs / 1000;
        return _b = {},
            _b[PlaybackSessionKeys.KBPS_AVERAGE_BANDWIDTH] = Math.round((state.totalBytes / state.totalTransferTimeSeconds) * kiloBitsPerByte),
            _b[PlaybackSessionKeys.KBYTES_DOWNLOADED] = Math.round(state.totalBytes / kilo),
            _b;
    }, (_a = {},
        _a[PlaybackSessionKeys.KBYTES_DOWNLOADED] = 0,
        _a[PlaybackSessionKeys.KBPS_AVERAGE_BANDWIDTH] = 0,
        _a));
}
export function processBufferingFields(sessionEvents) {
    var _a;
    var state = {
        buffering: false,
        bufferingType: '',
        bufferingStart: 0,
    };
    var bufferingFields = (_a = {},
        _a[PlaybackSessionKeys.N_STALLS] = 0,
        _a[PlaybackSessionKeys.MS_BUFFERING_SEEK] = 0,
        _a[PlaybackSessionKeys.MS_BUFFERING_SEEK_LONGEST] = 0,
        _a[PlaybackSessionKeys.MS_BUFFERING_STALL] = 0,
        _a[PlaybackSessionKeys.MS_INITIAL_BUFFERING] = 0,
        _a[PlaybackSessionKeys.MS_BUFFERING_STALL_LONGEST] = 0,
        _a);
    for (var _i = 0, sessionEvents_1 = sessionEvents; _i < sessionEvents_1.length; _i++) {
        var event_1 = sessionEvents_1[_i];
        if (event_1.type === PlaybackEvents.BUFFERING &&
            event_1.data.type ===
                BufferType.STALL) {
            bufferingFields[PlaybackSessionKeys.N_STALLS]++;
        }
        if (event_1.type === PlaybackEvents.BUFFERING) {
            if (state.buffering) {
                bufferingFields = registerBufferingEnd(state, bufferingFields, event_1);
            }
            state.buffering = true;
            state.bufferingType = event_1.data.type;
            state.bufferingStart = event_1.timestamp;
        }
        if (event_1.type === PlaybackEvents.READY ||
            event_1.type === PlaybackEvents.ENDED) {
            if (state.buffering) {
                bufferingFields = registerBufferingEnd(state, bufferingFields, event_1);
                state.buffering = false;
                state.bufferingType = '';
                state.bufferingStart = 0;
            }
        }
    }
    return bufferingFields;
}
export function processMsPlayed(sessionEvents) {
    var _a;
    var finalState = sessionEvents.reduce(function (currentState, event) {
        return cond([
            [startedPlaying(currentState.playing), handlePlayingPosition],
            [interruptedWhilePlaying(currentState.playing), handleMsPlayed],
            [T, function (_, defaultState) { return defaultState; }],
        ])(event, currentState);
    }, {
        playing: false,
        playingPosition: 0,
        msPlayed: 0,
    });
    return _a = {},
        _a[PlaybackSessionKeys.MS_PLAYED] = finalState.msPlayed,
        _a;
}
export function processMsSubtitlesPlayed(sessionEvents) {
    var _a;
    var finalState = sessionEvents.reduce(function (state, event) {
        var stateFn = cond([
            [startedPlaying(state.playing), handlePlayingPosition],
            [interruptedWhilePlaying(state.playing), handleMsPlayed],
            [subtitles, handleSubtitleChanged],
            [T, function (_, defaultState) { return defaultState; }],
        ]);
        var currentState = stateFn(event, state);
        return computeSubtitlePlayed(event, currentState);
    }, {
        playing: false,
        subtitlesEnabled: false,
        playingWithSubtitlesPosition: 0,
        msPlayedSubtitles: 0,
    });
    return _a = {},
        _a[PlaybackSessionKeys.MS_PLAYED_SUBTITLES] = finalState.msPlayedSubtitles,
        _a;
}
export function processMsFullscreenPlayed(sessionEvents) {
    var _a;
    var finalState = sessionEvents.reduce(function (state, event) {
        var stateFn = cond([
            [startedPlaying(state.playing), handlePlayingPosition],
            [interruptedWhilePlaying(state.playing), handleMsPlayed],
            [fullscreen, handleFullscreenChanged],
            [T, function (_, defaultState) { return defaultState; }],
        ]);
        var currentState = stateFn(event, state);
        return computeFullscreenPlayed(event, currentState);
    }, {
        playing: false,
        fullscreen: false,
        playingWhileFullscreenPosition: 0,
        msPlayedFullscreen: 0,
    });
    return _a = {},
        _a[PlaybackSessionKeys.MS_PLAYED_FULLSCREEN] = finalState.msPlayedFullscreen,
        _a;
}
export function generatePlaybackSessionMessage(sessionEvents) {
    return __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, processIdentityFields(sessionEvents)), processMsStartPosition(sessionEvents)), processMsDuration(sessionEvents)), processStartTime(sessionEvents)), processEndFields(sessionEvents)), processVideoFormatChangedFields(sessionEvents)), processMsEncryptionLoadTime(sessionEvents)), processEncryptionType(sessionEvents)), processLasUsedSubtitle(sessionEvents)), processManifestLoadTime(sessionEvents)), processSeekFields(sessionEvents)), processBandwidthFields(sessionEvents)), processBufferingFields(sessionEvents)), processMsPlayed(sessionEvents)), processMsSubtitlesPlayed(sessionEvents)), processMsFullscreenPlayed(sessionEvents)), processDroppedFrames(sessionEvents));
}
//# sourceMappingURL=DefaultEventsCalculator.js.map