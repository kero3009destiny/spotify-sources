var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { BufferType, InternalEvents } from '../VideoPlaybackEvents';
import _ from '../../utils';
import { COMMAND_INITIATED_TIME_MS, REASON_START, retrieveEndvideoMetadata, } from '../utils';
import EndVideoReasonEnd from './EndVideoReasonEnd';
var EndVideoTracker = (function () {
    function EndVideoTracker(endVideo, productStateProvider, logError) {
        this.endVideo = endVideo;
        this.logError = logError;
        this.productStateProvider = productStateProvider;
    }
    EndVideoTracker.prototype.init = function (eventEmitter, options) {
        this.sessionId = options.sessionId;
        this.nSeekfwd = 0;
        this.msSeekfwd = 0;
        this.nSeekback = 0;
        this.msSeekback = 0;
        this.nStalls = 0;
        this.msInitialBuffering = -1;
        this.msStalled = 0;
        this.maxMsStalled = 0;
        this.msSeekRebuffering = 0;
        this.maxMsSeekRebuffering = 0;
        this.startBitrate = 0;
        this.oldBitrate = 0;
        this.initTime = new Date().getTime();
        this.latency = 0;
        this.bitrates = [];
        this.options = options;
        this.logged = false;
        this.endVideoSent = false;
        this.shouldSendEndVideo = false;
        this.endReason = EndVideoReasonEnd.END_UNKNOWN;
        this.duration = 0;
        this.connection_type_current = 'unknown';
        this.connection_type_start = 'unknown';
        this.incognito = false;
        this.keySystem = '';
        this.playRanges = { lastPosition: options.initialPosition, ranges: [] };
        _.bindAll(this);
        this.connection_type_start =
            this.productStateProvider.connection_type_start || '';
        this.connection_type_current =
            this.productStateProvider.connection_type_current || '';
        this.incognito = this.productStateProvider.incognito || false;
        eventEmitter.on(InternalEvents.CHANGE, this.onChange.bind(this));
    };
    EndVideoTracker.prototype.onChange = function (__, oldState, newState) {
        if (oldState.isLoaded !== newState.isLoaded) {
            this.keySystem = this.parseKeySystem(newState.keySystem);
        }
        var endVideoMetadata = retrieveEndvideoMetadata(this.options.metadata || {});
        if (this.latency === 0 && newState.currentTime >= 0) {
            var currentTime = new Date().getTime();
            var commandInitiatedTime = endVideoMetadata[COMMAND_INITIATED_TIME_MS];
            this.latency = currentTime - this.initTime;
            this.ui_latency =
                commandInitiatedTime > -1 ? currentTime - commandInitiatedTime : -1;
        }
        if (newState.isSeeking && newState.currentTime !== oldState.currentTime) {
            this.seekTo(oldState, newState);
        }
        if (this.duration === 0 && newState.duration >= 0) {
            this.duration = newState.duration;
        }
        if (this.endReason !== newState.endReason) {
            this.endReason = newState.endReason;
        }
        if (newState.bitrate !== this.oldBitrate) {
            this.updatePlayedSegment(newState.currentTime, oldState.bitrate, newState.currentTime, false);
        }
        var playbackEndedWhileBuffering = newState.isEnded && newState.isBuffering;
        var initialBufferComplete = this.msInitialBuffering >= 0;
        var bufferingEnded = oldState.isBuffering && !newState.isBuffering;
        if (bufferingEnded || playbackEndedWhileBuffering) {
            var bufferTime = newState.time - newState.lastBufferStart;
            if (!initialBufferComplete) {
                this.msInitialBuffering = bufferTime;
            }
            else if (oldState.bufferType === BufferType.SEEK) {
                this.msSeekRebuffering += bufferTime;
                this.maxMsSeekRebuffering = Math.max(this.maxMsSeekRebuffering, bufferTime);
            }
            else {
                this.nStalls++;
                this.msStalled += bufferTime;
                this.maxMsStalled = Math.max(this.maxMsStalled, bufferTime);
            }
        }
        if (newState.manifestLatency && !this.manifestLatency) {
            this.manifestLatency = newState.manifestLatency;
        }
        if (newState.keyLatency && !this.keyLatency) {
            this.keyLatency = newState.keyLatency;
        }
        this.oldBitrate = newState.bitrate;
        if (this.startBitrate === 0) {
            this.startBitrate = newState.bitrate;
        }
        var reason = null;
        if (newState.timeUpdate) {
            reason = EndVideoReasonEnd.END_UNEXPECTED_EXIT;
        }
        else if (!oldState.isPaused && newState.isPaused) {
            reason = EndVideoReasonEnd.END_UNEXPECTED_EXIT_WHILE_PAUSED;
        }
        if (reason) {
            this.updatePlayedSegment(newState.currentTime, oldState.bitrate, newState.currentTime, false);
            this.updateEndVideo(reason);
        }
        if (newState.isEnded && !this.logged) {
            this.updatePlayedSegment(newState.currentTime, oldState.bitrate, newState.currentTime, true);
            var first = this.bitrates.length > 0 ? this.bitrates[0].timeDiff : 0;
            var short = this.bitrates.length <= 1 && first < 0.1;
            var appload = endVideoMetadata[REASON_START] === EndVideoReasonEnd.END_APPLOAD;
            if (!(appload && short)) {
                this.logEndVideo(this.endReason);
            }
            this.logged = true;
        }
    };
    EndVideoTracker.prototype.seekTo = function (oldState, newState) {
        this.updatePlayedSegment(oldState.currentTime, oldState.bitrate, newState.currentTime, true);
        var relativeSeek = newState.currentTime - oldState.currentTime;
        if (relativeSeek > 0) {
            this.nSeekfwd++;
            this.msSeekfwd += relativeSeek;
        }
        else {
            this.nSeekback++;
            this.msSeekback -= relativeSeek;
        }
    };
    EndVideoTracker.prototype.updatePlayedSegment = function (currentTime, bitrate, newTime, endSegment) {
        if (currentTime >= 0) {
            var length_1 = currentTime - this.playRanges.lastPosition;
            if (length_1 > 0) {
                this.playRanges.ranges.push({
                    position: this.playRanges.lastPosition,
                    length: length_1,
                });
            }
            this.playRanges.lastPosition = newTime;
        }
        if (this.segmentStartTime !== undefined) {
            var diff = currentTime - this.segmentStartTime;
            if (diff > 0.01) {
                this.bitrates.push({
                    timeDiff: diff,
                    endSegment: endSegment,
                    bitrate: bitrate,
                });
            }
        }
        if (currentTime >= 0.0) {
            this.segmentStartTime = newTime;
        }
    };
    EndVideoTracker.prototype.calculatePlayTimesAndBitrates = function () {
        var msPlayed = 0;
        var unionPlayed = 0;
        var maxContinuous = 0;
        var curContinuous = 0;
        var bitrateLength = {};
        var lastRangeEndedAt = 0;
        var sortedPlayRanges = this.playRanges.ranges.sort(function (lhs, rhs) {
            if (lhs.position < rhs.position) {
                return -1;
            }
            else if (lhs.position === rhs.position) {
                return 0;
            }
            return 1;
        });
        var end = 0;
        for (var j = 0; j < sortedPlayRanges.length; j++) {
            var start = sortedPlayRanges[j].position;
            var length_2 = sortedPlayRanges[j].length;
            msPlayed += length_2;
            if (start >= end) {
                unionPlayed += length_2;
                end = start + length_2;
            }
            else {
                unionPlayed += Math.max(0, start + length_2 - end);
                end = Math.max(end, start + length_2);
            }
            if (lastRangeEndedAt === start) {
                curContinuous += length_2;
            }
            else {
                maxContinuous = Math.max(maxContinuous, curContinuous);
                curContinuous = length_2;
            }
            lastRangeEndedAt = start + length_2;
        }
        maxContinuous = Math.max(maxContinuous, curContinuous);
        for (var i in this.bitrates) {
            if (!this.bitrates.hasOwnProperty(i)) {
                continue;
            }
            var ent = this.bitrates[i];
            if (bitrateLength.hasOwnProperty(ent.bitrate)) {
                bitrateLength[ent.bitrate] += ent.timeDiff;
            }
            else {
                bitrateLength[ent.bitrate] = ent.timeDiff;
            }
        }
        var timeWeightedBitrate = 0;
        for (var bitrate in bitrateLength) {
            if (bitrateLength.hasOwnProperty(bitrate)) {
                timeWeightedBitrate +=
                    (bitrate * bitrateLength[bitrate]) / msPlayed;
            }
        }
        return {
            msPlayed: Math.round(msPlayed * 1000),
            unionPlayed: Math.round(unionPlayed * 1000),
            maxContinuous: Math.round(maxContinuous * 1000),
            timeWeightedBitrate: Math.round(timeWeightedBitrate),
        };
    };
    EndVideoTracker.prototype.parseKeySystem = function (keySystem) {
        switch (keySystem) {
            case 'com.widevine.alpha':
                return 'widevine';
            default:
                return keySystem || '';
        }
    };
    EndVideoTracker.prototype.createMessage = function (reason) {
        var calc = this.calculatePlayTimesAndBitrates();
        var endVideoMetadata = retrieveEndvideoMetadata(this.options.metadata || {});
        return __assign({ sequence_number: this.sequenceNumber, sequence_id: this.sequenceId, video_session_id: this.sessionId, reason_end: reason, ms_played: calc.msPlayed, ms_total_est: Math.round(this.duration * 1000), live: false, ms_manifest_latency: this.manifestLatency || -1, n_seekback: this.nSeekback, ms_seekback: Math.round(this.msSeekback * 1000), n_seekfwd: this.nSeekfwd, ms_seekfwd: Math.round(this.msSeekfwd * 1000), ms_latency: Math.round(this.latency), ui_latency: this.ui_latency, start_offset_ms: Math.round(this.options.initialPosition * 1000), ms_initial_buffering: this.msInitialBuffering, ms_seek_rebuffering: this.msSeekRebuffering, ms_stalled: this.msStalled, max_ms_seek_rebuffering: this.maxMsSeekRebuffering, max_ms_stalled: this.maxMsStalled, n_stalls: this.nStalls, shuffle: false, max_continous: calc.maxContinuous, union_played: calc.unionPlayed, audiocodec: 'mp4a.40.5', videocodec: 'vp9', incognito_mode: this.incognito, referrer_vendor: 'com.spotify', streaming_rule: this.productStateProvider.streamingRules(), start_bitrate: this.startBitrate, full_screen: 0, time_weighted_bitrate: calc.timeWeightedBitrate, prefetched_bytes: 0, prefetched_bytes_loaded: -1, key_system: this.keySystem, ms_key_latency: this.keyLatency || -1, total_bytes: Math.round((calc.timeWeightedBitrate * calc.msPlayed) / 1000 / 8), local_time_ms: Math.round(this.initTime), connection_type_start: this.connection_type_start, connection_type_end: this.connection_type_current, ms_played_background: 0 }, endVideoMetadata);
    };
    EndVideoTracker.prototype.updateEndVideoInternal = function (reason) {
        var _this = this;
        var logMessage = this.createMessage(reason);
        this.endVideo.update(this.sequenceNumber, logMessage, function (error) {
            if (error) {
                if (_this.logError) {
                    _this.logError('logEndVideo, failed update:', error);
                }
                return;
            }
            if (_this.shouldSendEndVideo) {
                _this.endVideo.send(_this.sequenceNumber);
            }
        });
    };
    EndVideoTracker.prototype.updateEndVideo = function (reason) {
        var _this = this;
        if (this.endVideoSent) {
            return;
        }
        if (this.sequenceNumber === undefined) {
            this.sequenceNumber = -1;
            this.endVideo.create(function (error, sequenceNumber, sequenceId) {
                if (error) {
                    _this.sequenceNumber = undefined;
                    _this.sequenceId = undefined;
                    return;
                }
                _this.sequenceNumber = sequenceNumber;
                _this.sequenceId = sequenceId;
                _this.updateEndVideoInternal(reason);
            });
            return;
        }
        else if (this.sequenceNumber === -1) {
            return;
        }
        this.updateEndVideoInternal(reason);
    };
    EndVideoTracker.prototype.logEndVideo = function (reason) {
        if (this.endVideoSent) {
            return;
        }
        this.shouldSendEndVideo = true;
        this.updateEndVideo(reason);
        this.endVideoSent = true;
    };
    return EndVideoTracker;
}());
export default EndVideoTracker;
//# sourceMappingURL=EndVideoTracker.js.map