var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { shaka, BetamaxPlayerFactory } from '../player';
import videoUtils from '../utils';
import { pathOr, path } from 'ramda';
import { createMetadataWithEndVideoPrefix } from '../tracking/utils';
import { InternalEvents, PlaybackSessionLoggerFactory, ErrorLoggerFactory, } from '../tracking';
import WidevineDownloader from '../plugins/WidevineDownloader';
import { SpotifyVideoUrl, SpotifyVideoMediaExtension } from '../plugins';
import VideoContextPlayerCoordinatorXObserver from './VideoContextPlayerCoordinatorXObserver';
import CosmosProductStateProvider from './CosmosProductStateProvider';
var ErrorCodes = shaka.util.Error.Code;
var VideoContextPlayerCoordinatorX = (function () {
    function VideoContextPlayerCoordinatorX(configuration) {
        var _this = this;
        this.cosmosVideoPlayerEndpoint = 'sp://videoplayer/v1';
        this.cosmos = configuration.cosmos;
        this.spotifyProductState = configuration.productState;
        var widevineConfiguration = {
            getToken: configuration.getToken,
        };
        this.widevineDownloader = new WidevineDownloader(widevineConfiguration, this.cosmos);
        this.authTokenCallback = function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, accessToken, tokenType;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4, configuration.getToken()];
                    case 1:
                        _a = _b.sent(), accessToken = _a.accessToken, tokenType = _a.tokenType;
                        return [2, tokenType + " " + accessToken];
                }
            });
        }); };
        if (configuration.playerDependencies.factories) {
            configuration.playerDependencies.factories.push(this);
        }
        else {
            configuration.playerDependencies.factories = [this];
        }
        if (configuration.cosmosLoggers.playbackSessionLogger) {
            var playbackSessionLoggerFactory = new PlaybackSessionLoggerFactory(configuration.cosmosLoggers.playbackSessionLogger);
            configuration.playerDependencies.factories.push(playbackSessionLoggerFactory);
        }
        if (configuration.cosmosLoggers.playbackErrorLogger) {
            var errorLoggerFactory = new ErrorLoggerFactory(configuration.cosmosLoggers.playbackErrorLogger);
            configuration.playerDependencies.factories.push(errorLoggerFactory);
            this.playbackErrorLogger =
                configuration.cosmosLoggers.playbackErrorLogger;
        }
        if (configuration.cosmosLoggers.endVideoLogger) {
            var productStateProvider = new CosmosProductStateProvider(this.cosmos);
            configuration.playerDependencies.endVideo = {
                endVideo: configuration.cosmosLoggers.endVideoLogger,
                productStateProvider: productStateProvider,
            };
        }
        this.playerDependencies = configuration.playerDependencies;
        this.videoContextPlayerSub = null;
        this.contextPlayerVolumeSub = null;
        this.betamaxPlayer = null;
        this.contextPlayerVolume = 1;
        this.onClientPlayerStateUpdate = this.onClientPlayerStateUpdate.bind(this);
    }
    VideoContextPlayerCoordinatorX.prototype.initialize = function (playerConfiguration) {
        var manifestUrlTemplate = this.spotifyProductState['video-manifest-url'];
        var mediaExtensions = [
            new SpotifyVideoMediaExtension(manifestUrlTemplate),
        ];
        var betamaxPlayerFactory = new BetamaxPlayerFactory(__assign(__assign({}, this.playerDependencies), { mediaExtensions: mediaExtensions }));
        this.playerConfiguration = playerConfiguration
            ? __assign({}, playerConfiguration) : {
            subtitlesEnabled: false,
        };
        this.betamaxPlayer = betamaxPlayerFactory.createBetamaxPlayer(this.playerConfiguration);
        this.widevineDownloader.startWatchingStatus();
        this.videoContextPlayerSub = this.cosmos.sub(this.cosmosVideoPlayerEndpoint + "/commands", this.onCommandReceived.bind(this), function () { });
        this.contextPlayerVolumeSub = this.cosmos.sub("sp://playback/v1/volume", this.onVolumeCommandReceived.bind(this), function () { });
    };
    VideoContextPlayerCoordinatorX.prototype.onCommandReceived = function (contextPayload) {
        return __awaiter(this, void 0, void 0, function () {
            var payload, _a, _b, live, posMS;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        payload = contextPayload || {};
                        _a = payload.type;
                        switch (_a) {
                            case 'subscribed': return [3, 1];
                            case 'start': return [3, 2];
                            case 'stop': return [3, 7];
                            case 'pause': return [3, 8];
                            case 'resume': return [3, 9];
                            case 'seek_to': return [3, 10];
                            case 'config': return [3, 11];
                            case 'prefetch_tracks': return [3, 12];
                            case 'advance': return [3, 13];
                        }
                        return [3, 14];
                    case 1:
                        {
                            return [3, 15];
                        }
                        _c.label = 2;
                    case 2:
                        this.finishCurrentVideoInStart();
                        _c.label = 3;
                    case 3:
                        _c.trys.push([3, 5, , 6]);
                        return [4, this.createSessionAndStart(payload)];
                    case 4:
                        _c.sent();
                        if (this.betamaxPlayer) {
                            this.betamaxPlayer.on(InternalEvents.CHANGE, this.onClientPlayerStateUpdate);
                        }
                        return [3, 6];
                    case 5:
                        _b = _c.sent();
                        this.sendError({ type: 'start_command_error' });
                        return [3, 6];
                    case 6: return [2, payload];
                    case 7:
                        this.finishCurrentVideoInClientPlayer();
                        return [3, 15];
                    case 8:
                        if (this.betamaxPlayer) {
                            this.betamaxPlayer.pause();
                        }
                        return [3, 15];
                    case 9:
                        if (this.betamaxPlayer) {
                            live = path(['track', 'metadata', 'media.live'], this.videoTrack) ===
                                'true';
                            if (live) {
                                this.betamaxPlayer.seekTo(0);
                            }
                            this.betamaxPlayer.resume();
                        }
                        return [3, 15];
                    case 10:
                        if (this.betamaxPlayer) {
                            posMS = payload.position || 0;
                            this.betamaxPlayer.seekTo(posMS / 1000.0);
                        }
                        return [3, 15];
                    case 11: return [3, 15];
                    case 12: return [3, 15];
                    case 13: return [3, 15];
                    case 14: return [3, 15];
                    case 15: return [2, payload];
                }
            });
        });
    };
    VideoContextPlayerCoordinatorX.prototype.onVolumeCommandReceived = function (payload) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (payload && typeof payload.volume === 'number') {
                    this.contextPlayerVolume = payload.volume;
                    if (this.betamaxPlayer) {
                        this.betamaxPlayer.setVolume(payload.volume);
                    }
                    return [2, payload];
                }
                return [2, Promise.reject('volume payload from cosmos has the wrong format')];
            });
        });
    };
    VideoContextPlayerCoordinatorX.prototype.makeVideoContextPlayerCoordinatorError = function (reason, message) {
        var error = new Error(message);
        error.name = 'VideoContextPlayerCoordinatorError';
        error.reason = reason;
        return error;
    };
    VideoContextPlayerCoordinatorX.prototype.backendErrorToContextPlayerError = function (error) {
        if (!error) {
            return null;
        }
        if (!error.responseText && !error.httpStatus) {
            if (error.error_code &&
                error.error_code === ErrorCodes.REQUESTED_KEY_SYSTEM_CONFIG_UNAVAILABLE) {
                return { type: 'video_unsupported_key_system' };
            }
            if (error.error_category === 6) {
                return { type: 'video_playback_error' };
            }
            if (error.canRecover) {
                return null;
            }
            return { type: 'unknown' };
        }
        if (error.httpStatus === 401) {
            return { type: 'video_playback_error' };
        }
        var reason = null;
        try {
            if (error.responseHeaders && 'content-type' in error.responseHeaders) {
                var contentType = error.responseHeaders['content-type'];
                if (contentType === 'application/json') {
                    var response = JSON.parse(error.responseText);
                    reason = response.reason;
                }
            }
        }
        catch (e) {
            return { type: 'unknown' };
        }
        switch (reason) {
            case 'GEO_RESTRICTED':
                return { type: 'video_georestricted' };
            case 'UNSUPPORTED_CLIENT_VERSION':
                return { type: 'video_unsupported_client_version' };
            case 'UNSUPPORTED_PLATFORM_VERSION':
                return { type: 'video_unsupported_platform_version' };
            case 'COUNTRY_RESTRICTED':
                return { type: 'video_country_restricted' };
            case 'UNAVAILABLE':
                return { type: 'video_unavailable' };
            case 'CATALOGUE_RESTRICTED':
                return { type: 'video_catalogue_restricted' };
            default:
                return { type: 'unknown' };
        }
    };
    VideoContextPlayerCoordinatorX.prototype.onClientPlayerStateUpdate = function (error) {
        var contextPlayerError = this.backendErrorToContextPlayerError(error);
        if (contextPlayerError) {
            this.sendError(contextPlayerError);
        }
    };
    VideoContextPlayerCoordinatorX.prototype.sendError = function (error) {
        return this.cosmos.post(this.cosmosVideoPlayerEndpoint + "/error", error);
    };
    VideoContextPlayerCoordinatorX.prototype.createSessionAndStart = function (payload) {
        return __awaiter(this, void 0, void 0, function () {
            var track, manifestId, url, formats, error, serverCertificate, isAd, usesDrm, isRoyaltyMedia, licenseServerUrl, initialPosition, playWhenReady, authTokenCallback, endVideoMetadata, metadata, mediaUrl, playbackRequest;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        track = pathOr(payload, ['track', 'track'], payload);
                        manifestId = pathOr('', ['metadata', 'media.manifest_id'], track);
                        url = '';
                        if (!manifestId) {
                            try {
                                formats = JSON.parse(track.metadata['media.manifest']);
                                url = videoUtils.getPreferredUrl(formats) || '';
                            }
                            catch (e) {
                                url = '';
                            }
                            if (!url) {
                                url = pathOr('', ['metadata', 'external_url'], track);
                            }
                        }
                        if (!manifestId && !url) {
                            error = this.makeVideoContextPlayerCoordinatorError('no-source-url', 'Cannot find a manifest ID nor a source URL in payload');
                            return [2, Promise.reject(error)];
                        }
                        this.videoTrack = payload.track;
                        isAd = path(['metadata', 'is_advertisement'], track) === 'true';
                        usesDrm = !isAd;
                        isRoyaltyMedia = !isAd;
                        if (!usesDrm) return [3, 2];
                        return [4, new Promise(function (resolve, reject) {
                                _this.widevineDownloader.pollStatus(3000, function (widevineError) {
                                    if (widevineError) {
                                        var error = _this.makeVideoContextPlayerCoordinatorError('widevine-error', widevineError.message);
                                        error.widevineStatus = widevineError.status;
                                        reject(error);
                                        return;
                                    }
                                    _this.widevineDownloader
                                        .downloadLicenseCertificate()
                                        .then(function (certificate) { return resolve(certificate); })
                                        .catch(function (error) {
                                        if (_this.playbackErrorLogger) {
                                            var trackUri = pathOr('', ['track', 'uri'], track);
                                            var playbackId = payload.track.playback_id;
                                            var kind = 'widevine-server-certificate';
                                            var errorMessage = {
                                                name: kind,
                                                local_time: new Date().getTime(),
                                                playback_id: playbackId,
                                                file_id: manifestId,
                                                uri: trackUri,
                                                message: JSON.stringify({
                                                    kind: kind,
                                                    type: error ? error.type : null,
                                                    detail: error ? error.detail : null,
                                                }),
                                            };
                                            _this.playbackErrorLogger.log(errorMessage);
                                        }
                                        reject(error);
                                    });
                                });
                            })];
                    case 1:
                        serverCertificate = _a.sent();
                        return [3, 3];
                    case 2:
                        serverCertificate = null;
                        _a.label = 3;
                    case 3:
                        licenseServerUrl = this.spotifyProductState['widevine-license-url'];
                        initialPosition = (payload.seek_to || 0) / 1000.0;
                        playWhenReady = !payload.initially_paused;
                        authTokenCallback = !!manifestId ? this.authTokenCallback : undefined;
                        if (this.playerConfiguration) {
                            this.playerConfiguration.drm = {
                                servers: {
                                    'com.widevine.alpha': licenseServerUrl,
                                },
                                advanced: {
                                    'com.widevine.alpha': {
                                        videoRobustness: 'SW_SECURE_DECODE',
                                        serverCertificate: serverCertificate || null,
                                    },
                                },
                            };
                            this.playerConfiguration.widevineLicenseUrl = licenseServerUrl;
                            this.playerConfiguration.subtitlesEnabled = false;
                            this.playerConfiguration.newEventApi = false;
                            this.playerConfiguration.getToken = authTokenCallback;
                        }
                        endVideoMetadata = createMetadataWithEndVideoPrefix(payload);
                        metadata = pathOr({}, ['track', 'track', 'metadata'], payload);
                        mediaUrl = manifestId ? SpotifyVideoUrl.create(manifestId) : url;
                        playbackRequest = {
                            mediaUrl: mediaUrl,
                            isRoyaltyMedia: isRoyaltyMedia,
                            metadata: __assign(__assign({}, metadata), endVideoMetadata),
                        };
                        if (!this.betamaxPlayer) {
                            return [2, Promise.reject('betamaxPlayer was not set')];
                        }
                        this.betamaxPlayer.setVolume(this.contextPlayerVolume);
                        return [2, this.betamaxPlayer.playWithOptions(playbackRequest, {
                                playWhenReady: playWhenReady,
                                initialPosition: initialPosition,
                            })];
                }
            });
        });
    };
    VideoContextPlayerCoordinatorX.prototype.unsubscribeAndRemoveNode = function () {
        if (this.betamaxPlayer) {
            this.betamaxPlayer.off(InternalEvents.CHANGE, this.onClientPlayerStateUpdate);
            var node = this.betamaxPlayer.getNode();
            if (node) {
                node.remove();
            }
        }
    };
    VideoContextPlayerCoordinatorX.prototype.finishCurrentVideoInStart = function () {
        this.videoTrack = null;
        if (this.betamaxPlayer) {
            this.unsubscribeAndRemoveNode();
        }
    };
    VideoContextPlayerCoordinatorX.prototype.stopSyncing = function () {
        if (this.videoContextPlayerSub) {
            this.videoContextPlayerSub.cancel();
            this.videoContextPlayerSub = null;
        }
        if (this.contextPlayerVolumeSub) {
            this.contextPlayerVolumeSub.cancel();
            this.contextPlayerVolumeSub = null;
        }
        this.betamaxPlayer = null;
        this.contextPlayerVolume = 1;
        this.videoTrack = null;
    };
    VideoContextPlayerCoordinatorX.prototype.finishCurrentVideoInClientPlayer = function () {
        this.videoTrack = null;
        if (this.betamaxPlayer) {
            this.unsubscribeAndRemoveNode();
            this.betamaxPlayer.stop();
        }
    };
    VideoContextPlayerCoordinatorX.prototype.sendAdvance = function (reason) {
        this.finishCurrentVideoInClientPlayer();
        var advancePayload = {
            reason: reason,
        };
        return this.cosmos.post(this.cosmosVideoPlayerEndpoint + "/advance", advancePayload);
    };
    VideoContextPlayerCoordinatorX.prototype.sendPlaybackState = function () {
        if (this.betamaxPlayer && this.videoTrack) {
            var sessionState = this.betamaxPlayer.getSessionState();
            if (sessionState) {
                var duration = sessionState.duration > -1
                    ? Math.floor(sessionState.duration * 1000)
                    : -1;
                var position = sessionState.currentTime > -1
                    ? Math.floor(sessionState.currentTime * 1000)
                    : -1;
                var statePayload = {
                    timestamp: new Date().getTime(),
                    playback_id: this.videoTrack.playback_id || '',
                    is_paused: sessionState.isPaused,
                    is_buffering: sessionState.isBuffering || false,
                    playback_speed: sessionState.isPlaying && !sessionState.isPaused ? 1 : 0,
                    position_as_of_timestamp: position,
                    duration: duration,
                };
                this.cosmos.post(this.cosmosVideoPlayerEndpoint + "/state", statePayload);
            }
        }
    };
    VideoContextPlayerCoordinatorX.prototype.createEventObserver = function () {
        return new VideoContextPlayerCoordinatorXObserver(this);
    };
    return VideoContextPlayerCoordinatorX;
}());
export default VideoContextPlayerCoordinatorX;
//# sourceMappingURL=VideoContextPlayerCoordinatorX.js.map