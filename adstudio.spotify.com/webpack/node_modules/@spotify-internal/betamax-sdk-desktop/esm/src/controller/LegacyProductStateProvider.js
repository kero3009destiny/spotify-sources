var LegacyProductStateProvider = (function () {
    function LegacyProductStateProvider(cosmos, live, clientModel, logError) {
        var _this = this;
        this.cosmos = cosmos;
        this.logError = logError;
        this.rules = '';
        this.cosmos.sub('sp://product-state/v1/values/streaming-rules', function (response) {
            _this.rules = response['streaming-rules'];
        }, function () { });
        if (clientModel) {
            clientModel.register();
        }
        if (live) {
            var client_1 = live('spotify:client');
            client_1.query('session(connection, incognito)', function (error, data) {
                if (error) {
                    if (_this.logError) {
                        _this.logError('Failed to load client connection:', error);
                    }
                    return;
                }
                _this.connection_type_start = data.session.connection;
                _this.connection_type_current = data.session.connection;
                _this.incognito = data.session.incognito;
                client_1.get('session').on('update', function (properties) {
                    if ('connection' in properties) {
                        _this.connection_type_current = properties.connection;
                    }
                    if ('incognito' in properties) {
                        _this.incognito = properties.incognito;
                    }
                });
            });
        }
    }
    LegacyProductStateProvider.prototype.streamingRules = function () {
        return this.rules;
    };
    return LegacyProductStateProvider;
}());
export default LegacyProductStateProvider;
//# sourceMappingURL=LegacyProductStateProvider.js.map