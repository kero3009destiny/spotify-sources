var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { shaka } from '../player';
import videoUtils from '../utils';
import { pick, equals, pathOr, path } from 'ramda';
import { createMetadataWithEndVideoPrefix, IS_ADVERTISMENT, } from '../tracking/utils';
import { InternalEvents, VideoPlaybackEvents } from '../tracking';
import { SpotifyVideoUrl } from '../plugins';
var ErrorCodes = shaka.util.Error.Code;
var VideoContextPlayerCoordinator = (function () {
    function VideoContextPlayerCoordinator(configuration) {
        var _this = this;
        this.setPreferredSubtitle = function () {
            if (_this.preferredSubtitleCode && _this.session) {
                _this.session.setPreferredSubtitle(_this.preferredSubtitleCode);
            }
        };
        var productState = configuration.productState, cancellationTokenSource = configuration.cancellationTokenSource, cosmos = configuration.cosmos, abba = configuration.abba, getWebgateHeaders = configuration.getWebgateHeaders, VideoPlayerErrorKM1 = configuration.VideoPlayerErrorKM1, widevineDownloader = configuration.widevineDownloader, authTokenCallback = configuration.authTokenCallback, logError = configuration.logError, logWarn = configuration.logWarn, betamaxPlayerFactory = configuration.betamaxPlayerFactory, playerConfiguration = configuration.playerConfiguration;
        this.VideoPlayerErrorKM1 = VideoPlayerErrorKM1;
        this.cosmos = cosmos;
        this.widevineDownloader = widevineDownloader;
        this.abba = abba;
        this.getWebgateHeaders = getWebgateHeaders;
        this.logError = logError;
        this.logWarn = logWarn;
        this.cancellationTokenSource = cancellationTokenSource;
        this.spotifyProductState = productState;
        this.videoContextPlayerSub = null;
        this.contextPlayerVolumeSub = null;
        this.session = null;
        this.contextPlayerVolume = 1;
        this.clientPlayerState = null;
        this.contextPlayerConfig = null;
        this.onClientPlayerStateUpdate = this.onClientPlayerStateUpdate.bind(this);
        this.didFinishVideoInClientPlayerCallback = null;
        this.CC_SUFFIX = '-x-cc';
        this.authTokenCallback = authTokenCallback;
        this.playerConfiguration = playerConfiguration
            ? __assign({}, playerConfiguration) : {
            subtitlesEnabled: false,
        };
        this.betamaxPlayer = betamaxPlayerFactory.createBetamaxPlayer(this.playerConfiguration);
        this.betamaxPlayer.on(VideoPlaybackEvents.MANIFEST_LOADED, this.setPreferredSubtitle);
    }
    VideoContextPlayerCoordinator.prototype.makeVideoContextPlayerCoordinatorError = function (reason, message) {
        var error = new Error(message);
        error.name = 'VideoContextPlayerCoordinatorError';
        error.reason = reason;
        return error;
    };
    VideoContextPlayerCoordinator.prototype.backendErrorToContextPlayerError = function (error) {
        if (!error) {
            return null;
        }
        if (!error.responseText && !error.httpStatus) {
            if (error.error_code &&
                error.error_code === ErrorCodes.REQUESTED_KEY_SYSTEM_CONFIG_UNAVAILABLE) {
                return { type: 'video_unsupported_key_system' };
            }
            if (error.error_category === 6) {
                return { type: 'video_playback_error' };
            }
            if (error.canRecover) {
                return null;
            }
            return { type: 'unknown' };
        }
        if (error.httpStatus === 401) {
            return { type: 'video_playback_error' };
        }
        var reason = null;
        try {
            if (error.responseHeaders && 'content-type' in error.responseHeaders) {
                var contentType = error.responseHeaders['content-type'];
                if (contentType === 'application/json') {
                    var response = JSON.parse(error.responseText);
                    reason = response.reason;
                }
            }
        }
        catch (e) {
            if (this.logError) {
                this.logError(e);
            }
            return { type: 'unknown' };
        }
        switch (reason) {
            case 'GEO_RESTRICTED':
                return { type: 'video_georestricted' };
            case 'UNSUPPORTED_CLIENT_VERSION':
                return { type: 'video_unsupported_client_version' };
            case 'UNSUPPORTED_PLATFORM_VERSION':
                return { type: 'video_unsupported_platform_version' };
            case 'COUNTRY_RESTRICTED':
                return { type: 'video_country_restricted' };
            case 'UNAVAILABLE':
                return { type: 'video_unavailable' };
            case 'CATALOGUE_RESTRICTED':
                return { type: 'video_catalogue_restricted' };
            default:
                return { type: 'unknown' };
        }
    };
    VideoContextPlayerCoordinator.prototype.logVideoError = function (kind, trackUri, sourceId, playbackId, error) {
        if (this.VideoPlayerErrorKM1) {
            this.VideoPlayerErrorKM1.log({
                file_id: sourceId,
                uri: trackUri,
                playback_id: playbackId,
                local_time: new Date().getTime(),
                name: kind,
                message: JSON.stringify({
                    kind: kind,
                    type: error ? error.type : null,
                    detail: error ? error.detail : null,
                }),
            });
        }
    };
    VideoContextPlayerCoordinator.prototype.onClientPlayerStateUpdate = function (error, _prevState, newState) {
        var videoError = this.backendErrorToContextPlayerError(error);
        if (videoError) {
            this.cosmos.post('sp://videoplayer/v1/error', videoError);
        }
        if (!newState) {
            return;
        }
        var hasDuration = newState.duration > 0;
        var hasCurrentTime = newState.currentTime >= 0;
        if (!newState || !hasDuration || !hasCurrentTime) {
            return;
        }
        var changedFields = pick([
            'isPlaying',
            'isPaused',
            'isBuffering',
            'isEnded',
            'isError',
            'isSeeking',
            'duration',
        ], newState);
        if (equals(changedFields, this.clientPlayerState)) {
            return;
        }
        this.clientPlayerState = changedFields;
        if (this.videoTrack) {
            var duration = newState.duration > -1 ? Math.floor(newState.duration * 1000) : -1;
            var position = newState.currentTime > -1
                ? Math.floor(newState.currentTime * 1000)
                : -1;
            this.cosmos.post('sp://videoplayer/v1/state', {
                playback_id: this.videoTrack.playback_id || '',
                is_paused: newState.isPaused,
                is_buffering: newState.isBuffering || false,
                timestamp: new Date().getTime(),
                playback_speed: newState.isPlaying && !newState.isPaused ? 1 : 0,
                position_as_of_timestamp: position,
                duration: duration,
            });
        }
        if (newState.isEnded) {
            this.finishCurrentVideoInClientPlayer('finished');
        }
    };
    VideoContextPlayerCoordinator.prototype.createVideoPlayer = function (payload, cancellationToken, callback) {
        var _this = this;
        var track = pathOr(payload, ['track', 'track'], payload);
        var isAd = path(['metadata', IS_ADVERTISMENT], track) === 'true';
        var manifestId = pathOr('', ['metadata', 'media.manifest_id'], track);
        var url = '';
        if (!manifestId) {
            try {
                var formats = JSON.parse(track.metadata['media.manifest']);
                url = videoUtils.getPreferredUrl(formats) || '';
            }
            catch (e) {
                url = '';
            }
            if (!url) {
                url = pathOr('', ['metadata', 'external_url'], track);
            }
        }
        if (!manifestId && !url) {
            var error = this.makeVideoContextPlayerCoordinatorError('no-source-url', 'Cannot find a manifest ID nor a source URL in payload');
            callback(error, null);
            return;
        }
        var trackUri = pathOr('', ['track', 'uri'], track);
        var doCreateVideoPlayer = function (licenseServerCertificate) {
            var licenseServerUrl = _this.spotifyProductState['widevine-license-url'];
            _this.preferredSubtitleCode = _this.getPrefSubtitleCodeFromContextPlayerConfig(_this.contextPlayerConfig);
            var initialPosition = (payload.seek_to || 0) / 1000.0;
            var playWhenReady = !payload.initially_paused;
            return Promise.all([
                _this.abba.fetch('ab-video-subtitles'),
                _this.abba.fetch('rollout_desktop_endvideo_event_api'),
            ]).then(function (_a) {
                var subtitlesFlag = _a[0], newEventApiFlag = _a[1];
                var subtitlesEnabled = subtitlesFlag && subtitlesFlag.toLowerCase() === 'enabled';
                var newEventApiEnabled = newEventApiFlag && newEventApiFlag.toLowerCase() === 'enabled';
                var authTokenCallback = !!manifestId
                    ? _this.authTokenCallback
                    : undefined;
                _this.playerConfiguration.drm = {
                    servers: {
                        'com.widevine.alpha': licenseServerUrl,
                    },
                    advanced: {
                        'com.widevine.alpha': {
                            videoRobustness: 'SW_SECURE_DECODE',
                            serverCertificate: licenseServerCertificate,
                        },
                    },
                };
                _this.playerConfiguration.widevineLicenseUrl = licenseServerUrl;
                _this.playerConfiguration.subtitlesEnabled = subtitlesEnabled;
                _this.playerConfiguration.newEventApi = newEventApiEnabled;
                _this.playerConfiguration.getToken = authTokenCallback;
                _this.playerConfiguration.getWebgateHeaders = _this.getWebgateHeaders;
                var endVideoMetadata = createMetadataWithEndVideoPrefix(payload);
                var metadata = pathOr({}, ['track', 'track', 'metadata'], payload);
                var mediaUrl = manifestId ? SpotifyVideoUrl.create(manifestId) : url;
                var playbackRequest = {
                    mediaUrl: mediaUrl,
                    isRoyaltyMedia: !isAd,
                    metadata: __assign(__assign({}, metadata), endVideoMetadata),
                };
                _this.betamaxPlayer.setVolume(_this.contextPlayerVolume);
                return _this.betamaxPlayer.playWithOptions(playbackRequest, {
                    playWhenReady: playWhenReady,
                    initialPosition: initialPosition,
                });
            });
        };
        if (isAd) {
            doCreateVideoPlayer(null).then(function (clientPlayer) {
                callback(clientPlayer
                    ? null
                    : new Error('Failed to create client video player'), clientPlayer);
            });
            return;
        }
        this.widevineDownloader.pollStatus(3000, function (widevineError) {
            if (widevineError) {
                var error = _this.makeVideoContextPlayerCoordinatorError('widevine-error', widevineError.message);
                error.widevineStatus = widevineError.status;
                callback(error, null);
                return;
            }
            var licenserServerCertificate;
            _this.widevineDownloader
                .downloadLicenseCertificate()
                .then(function (serverCertificate) {
                licenserServerCertificate = serverCertificate;
            })
                .catch(function (error) {
                licenserServerCertificate = null;
                var playbackId = payload.track.playback_id;
                _this.logVideoError('widevine-server-certificate', trackUri, manifestId, playbackId, error);
            })
                .then(function () {
                if (cancellationToken.isCanceled()) {
                    return Promise.resolve(null);
                }
                return doCreateVideoPlayer(licenserServerCertificate);
            })
                .then(function (clientPlayer) {
                if (!cancellationToken.isCanceled()) {
                    callback(clientPlayer
                        ? null
                        : new Error('Failed to create client video player'), clientPlayer);
                }
            });
        });
    };
    VideoContextPlayerCoordinator.prototype.processStartCommand = function (payload, cancellationToken, didProcessCommandCallback) {
        var _this = this;
        this.createVideoPlayer(payload, cancellationToken, function (error, clientPlayer) {
            if (cancellationToken.isCanceled()) {
                didProcessCommandCallback(cancellationToken.operationCanceledError);
                return;
            }
            _this.session = clientPlayer;
            if (error) {
                didProcessCommandCallback(error, payload, clientPlayer);
                return;
            }
            _this.videoTrack = payload.track;
            if (_this.session) {
                _this.session.on(InternalEvents.CHANGE, _this.onClientPlayerStateUpdate);
            }
            didProcessCommandCallback(error, payload, clientPlayer);
        });
    };
    VideoContextPlayerCoordinator.prototype.startSyncing = function (willProcessCommandCallback, didProcessCommandCallback, didFinishVideoInClientPlayerCallback) {
        var _this = this;
        this.widevineDownloader.startWatchingStatus();
        this.didFinishVideoInClientPlayerCallback = didFinishVideoInClientPlayerCallback;
        this.videoContextPlayerSub = this.cosmos.sub('sp://videoplayer/v1/commands', function (res) {
            var payload = res || {};
            if (payload.type === 'subscribed') {
                _this.contextPlayerConfig = payload.config;
                return;
            }
            willProcessCommandCallback(null, payload);
            var cancellationToken = _this.cancellationTokenSource.token();
            switch (payload.type) {
                case 'start': {
                    _this.finishCurrentVideoInStart(payload.start_reason);
                    _this.processStartCommand(payload, cancellationToken, didProcessCommandCallback);
                    break;
                }
                case 'stop':
                    _this.finishCurrentVideoInClientPlayer('endplay');
                    didProcessCommandCallback(null, payload);
                    break;
                case 'pause':
                    if (_this.session) {
                        _this.session.pause();
                    }
                    didProcessCommandCallback(null, payload);
                    break;
                case 'resume':
                    if (_this.session) {
                        var live = path(['track', 'metadata', 'media.live'], _this.videoTrack) ===
                            'true';
                        if (live) {
                            _this.session.seekTo(0);
                        }
                        _this.session.resume();
                    }
                    didProcessCommandCallback(null, payload);
                    break;
                case 'seek_to':
                    if (_this.session) {
                        var posMS = payload.position || 0;
                        _this.session.seekTo(posMS / 1000.0);
                    }
                    didProcessCommandCallback(null, payload);
                    break;
                case 'config':
                    if (_this.session) {
                        _this.contextPlayerConfig = payload.config;
                        var prefSubtitleCode = _this.getPrefSubtitleCodeFromContextPlayerConfig(payload.config);
                        _this.session.setPreferredSubtitle(prefSubtitleCode);
                    }
                    didProcessCommandCallback(null, payload);
                    break;
                case 'prefetch_tracks':
                    didProcessCommandCallback(null, payload);
                    break;
                case 'advance':
                    didProcessCommandCallback(null, payload);
                    break;
                default:
                    if (_this.logWarn) {
                        _this.logWarn('Unknown videoplayer cosmos command: ', payload.type);
                    }
                    didProcessCommandCallback(null, payload);
                    break;
            }
        }, function (err) {
            willProcessCommandCallback(err);
            didProcessCommandCallback(err);
        });
        this.contextPlayerVolumeSub = this.cosmos.sub('sp://playback/v1/volume', function (res) {
            var data = res;
            if (data && typeof data.volume === 'number') {
                _this.contextPlayerVolume = data.volume;
                if (_this.session) {
                    _this.session.setVolume(data.volume);
                }
            }
        }, function () { });
    };
    VideoContextPlayerCoordinator.prototype.notifySessionEnd = function (reason, optUnplayableReason) {
        if (this.didFinishVideoInClientPlayerCallback) {
            this.didFinishVideoInClientPlayerCallback(reason, optUnplayableReason);
        }
    };
    VideoContextPlayerCoordinator.prototype.unsubscribeAndRemoveNode = function () {
        if (this.session) {
            this.session.off(InternalEvents.CHANGE, this.onClientPlayerStateUpdate);
            var node = this.session.getNode();
            if (node) {
                node.remove();
            }
        }
    };
    VideoContextPlayerCoordinator.prototype.finishCurrentVideoInStart = function (reasonStart) {
        this.videoTrack = null;
        this.clientPlayerState = null;
        if (this.session) {
            this.unsubscribeAndRemoveNode();
            this.session = null;
            this.notifySessionEnd(reasonStart);
        }
    };
    VideoContextPlayerCoordinator.prototype.stopSyncing = function () {
        if (this.videoContextPlayerSub) {
            this.videoContextPlayerSub.cancel();
            this.videoContextPlayerSub = null;
        }
        if (this.contextPlayerVolumeSub) {
            this.contextPlayerVolumeSub.cancel();
            this.contextPlayerVolumeSub = null;
        }
        this.session = null;
        this.contextPlayerVolume = 1;
        this.clientPlayerState = null;
        this.videoTrack = null;
        this.didFinishVideoInClientPlayerCallback = null;
    };
    VideoContextPlayerCoordinator.prototype.finishCurrentVideoInClientPlayer = function (reason, optUnplayableReason) {
        this.videoTrack = null;
        this.clientPlayerState = null;
        if (this.session) {
            this.unsubscribeAndRemoveNode();
            this.session.stop();
            this.session = null;
            this.notifySessionEnd(reason, optUnplayableReason);
        }
    };
    VideoContextPlayerCoordinator.prototype.advanceContextPlayer = function (reason, optUnplayableReason, callback) {
        if (this.session) {
            this.finishCurrentVideoInClientPlayer(reason, optUnplayableReason);
            callback(new Error('Cannot advance before destroying client player'));
            return false;
        }
        var advancePayload;
        if (optUnplayableReason && reason === 'unplayable') {
            advancePayload = {
                reason: reason,
                unplayable_reason: optUnplayableReason,
            };
        }
        else {
            advancePayload = { reason: reason };
        }
        this.cosmos
            .post('sp://videoplayer/v1/advance', advancePayload)
            .catch(function (error) { return callback(error); });
        return true;
    };
    VideoContextPlayerCoordinator.prototype.getPrefSubtitleCodeFromContextPlayerConfig = function (config) {
        if (config) {
            var prefSubtitleLanguage = config['video.subtitles'];
            var prefSubtitleIsCc = config['video.subtitles_cc'];
            var prefSubtitleCode = prefSubtitleIsCc && prefSubtitleLanguage
                ? prefSubtitleLanguage + this.CC_SUFFIX
                : prefSubtitleLanguage;
            return prefSubtitleCode;
        }
        return '';
    };
    return VideoContextPlayerCoordinator;
}());
export default VideoContextPlayerCoordinator;
//# sourceMappingURL=VideoContextPlayerCoordinator.js.map