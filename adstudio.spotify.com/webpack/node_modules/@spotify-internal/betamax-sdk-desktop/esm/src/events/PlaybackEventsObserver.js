import { VideoPlaybackEvents as PlaybackEvents, } from '../tracking';
var PlaybackEventsObserver = (function () {
    function PlaybackEventsObserver(eventEmitter, internalObservers) {
        this.eventEmitter = eventEmitter;
        this.internalObservers = internalObservers;
    }
    PlaybackEventsObserver.prototype.initiateObservers = function (playbackIdentity, featureIdentifier, playerConfiguration) {
        this.internalObservers.initiateObservers(playbackIdentity, featureIdentifier, playerConfiguration);
    };
    PlaybackEventsObserver.prototype.onTimeUpdate = function (position) {
        this.emitSessionPlaybackEvent(PlaybackEvents.POSITION_UPDATE, { position: position });
    };
    PlaybackEventsObserver.prototype.onProgressChanged = function (percentage) {
        this.emitSessionPlaybackEvent(PlaybackEvents.PROGRESS, percentage);
    };
    PlaybackEventsObserver.prototype.onPlaybackCreated = function (playbackIdentity, initialConfiguration, timeObservable) {
        this.internalObservers.onPlaybackCreated(playbackIdentity, initialConfiguration, timeObservable);
        this.emitSessionPlaybackEvent(PlaybackEvents.CREATED, {
            identity: playbackIdentity,
        });
    };
    PlaybackEventsObserver.prototype.onEndingPlayback = function (playbackRequest) {
        this.internalObservers.onEndingPlayback(playbackRequest);
    };
    PlaybackEventsObserver.prototype.onPlaybackEnded = function (position, reason, droppedFrames) {
        this.internalObservers.onPlaybackEnded(position, reason);
        this.emitSessionPlaybackEvent(PlaybackEvents.ENDED, {
            position: position,
            reason: reason,
            n_dropped_frames: droppedFrames,
        });
    };
    PlaybackEventsObserver.prototype.onVolumeChanged = function (position, volume, muted) {
        this.internalObservers.onVolumeChanged(position, volume);
        this.emitSessionPlaybackEvent(PlaybackEvents.VOLUME_CHANGED, {
            position: position,
            volume: volume,
            muted: muted,
        });
    };
    PlaybackEventsObserver.prototype.onStarted = function (position) {
        this.internalObservers.onResumed(position);
        this.emitSessionPlaybackEvent(PlaybackEvents.STARTED, { position: position });
    };
    PlaybackEventsObserver.prototype.onResumed = function (position) {
        this.internalObservers.onResumed(position);
        this.emitSessionPlaybackEvent(PlaybackEvents.RESUMED, { position: position });
    };
    PlaybackEventsObserver.prototype.onSeeking = function (fromPosition, toPosition) {
        this.internalObservers.onSeeking(fromPosition, toPosition);
        this.emitSessionPlaybackEvent(PlaybackEvents.SEEKING, {
            fromPosition: fromPosition,
            toPosition: toPosition,
        });
    };
    PlaybackEventsObserver.prototype.onPaused = function (position) {
        this.internalObservers.onPaused(position);
        this.emitSessionPlaybackEvent(PlaybackEvents.PAUSED, { position: position });
    };
    PlaybackEventsObserver.prototype.onReady = function (position, duration, playWhenReady) {
        this.internalObservers.onReady(position, playWhenReady);
        this.emitSessionPlaybackEvent(PlaybackEvents.READY, {
            position: position,
            duration: duration,
            playWhenReady: playWhenReady,
        });
    };
    PlaybackEventsObserver.prototype.onManifestLoaded = function () {
        this.internalObservers.onManifestLoaded();
        this.emitSessionPlaybackEvent(PlaybackEvents.MANIFEST_LOADED);
    };
    PlaybackEventsObserver.prototype.onManifestLoading = function () {
        this.internalObservers.onManifestLoading();
        this.emitSessionPlaybackEvent(PlaybackEvents.MANIFEST_LOADING);
    };
    PlaybackEventsObserver.prototype.onRecoverableError = function (error, position) {
        this.internalObservers.onRecoverableError(error, position);
        this.emitSessionPlaybackEvent(PlaybackEvents.RECOVERABLE_ERROR, {
            error: error,
            position: position,
        });
    };
    PlaybackEventsObserver.prototype.onFatalError = function (error, position) {
        this.internalObservers.onFatalError(error, position);
        this.emitSessionPlaybackEvent(PlaybackEvents.FATAL_ERROR, {
            error: error,
            position: position,
        });
    };
    PlaybackEventsObserver.prototype.onAudioFormatChanged = function (format, position) {
        this.internalObservers.onAudioFormatChanged(format, position);
        this.emitSessionPlaybackEvent(PlaybackEvents.AUDIO_FORMAT_CHANGED, {
            bandwidth: format.bandwidth,
        });
    };
    PlaybackEventsObserver.prototype.onVideoFormatChanged = function (format, position) {
        this.internalObservers.onVideoFormatChanged(format, position);
        this.emitSessionPlaybackEvent(PlaybackEvents.VIDEO_FORMAT_CHANGED, {
            width: format.width,
            height: format.height,
            bandwidth: format.bandwidth,
        });
    };
    PlaybackEventsObserver.prototype.onBuffering = function (position, playWhenReady, type) {
        this.internalObservers.onBuffering(position, playWhenReady, type);
        this.emitSessionPlaybackEvent(PlaybackEvents.BUFFERING, {
            position: position,
            type: type,
        });
    };
    PlaybackEventsObserver.prototype.onDroppedVideoFrames = function (droppedFrames) {
        this.internalObservers.onDroppedVideoFrames(droppedFrames);
        this.emitSessionPlaybackEvent(PlaybackEvents.DROPPED_FRAMES, {
            droppedFrames: droppedFrames,
        });
    };
    PlaybackEventsObserver.prototype.onEncryptionKeyLoaded = function (encryptionType) {
        this.internalObservers.onEncryptionKeyLoaded(encryptionType);
        this.emitSessionPlaybackEvent(PlaybackEvents.ENCRYPTION_KEY_LOADED, {
            encryptionType: encryptionType,
        });
    };
    PlaybackEventsObserver.prototype.onEncryptionKeyLoading = function () {
        this.internalObservers.onEncryptionKeyLoading();
        this.emitSessionPlaybackEvent(PlaybackEvents.ENCRYPTION_KEY_LOADING);
    };
    PlaybackEventsObserver.prototype.onBytesTransferred = function (bytes, timeMs) {
        this.internalObservers.onBytesTransferred(bytes, timeMs);
        this.emitSessionPlaybackEvent(PlaybackEvents.BYTES_TRANSFERRED, {
            bytes: bytes,
            time: timeMs,
        });
    };
    PlaybackEventsObserver.prototype.onDurationChanged = function (duration) {
        this.internalObservers.onDurationChanged(duration);
        this.emitSessionPlaybackEvent(PlaybackEvents.DURATION_CHANGED, {
            duration: duration,
        });
    };
    PlaybackEventsObserver.prototype.onSubtitleChanged = function (position, subtitle) {
        this.internalObservers.onSubtitleChanged(position, subtitle);
        this.emitSessionPlaybackEvent(PlaybackEvents.SUBTITLE_CHANGED, {
            position: position,
            languageTag: subtitle.languageTag,
        });
    };
    PlaybackEventsObserver.prototype.onFullscreenChanged = function (position, fullscreen) {
        this.internalObservers.onFullscreenChanged(position, fullscreen);
        this.emitSessionPlaybackEvent(PlaybackEvents.FULLSCREEN_CHANGED, {
            fullscreen: fullscreen,
            position: position,
        });
    };
    PlaybackEventsObserver.prototype.emitSessionPlaybackEvent = function (type, data) {
        this.eventEmitter.emit(type, data);
        this.eventEmitter.emit('any', type, data);
    };
    return PlaybackEventsObserver;
}());
export default PlaybackEventsObserver;
//# sourceMappingURL=PlaybackEventsObserver.js.map