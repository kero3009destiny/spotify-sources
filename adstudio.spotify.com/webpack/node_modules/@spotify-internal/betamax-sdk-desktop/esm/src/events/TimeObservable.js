var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var TimeObservable = (function () {
    function TimeObservable() {
        var _this = this;
        this.handleTimeUpdate = function (event) {
            _this.observersForMediaPositions.forEach(function (callback) {
                callback(event);
            });
            _this.observersForPeriodicEvents.forEach(function (callback) {
                callback(event);
            });
        };
        this.observersForMediaPositions = [];
        this.observersForPeriodicEvents = [];
    }
    TimeObservable.prototype.addObserverForMediaPositions = function (mediaPositions, callback) {
        var reportedCallbacks = __spreadArrays(mediaPositions);
        this.observersForMediaPositions.push(function (event) {
            var position = event.target.currentTime;
            var duration = event.target.duration;
            var videoPercentage = Math.min(Math.max(position / duration, 0), 1);
            reportedCallbacks = reportedCallbacks.filter(function (percentage) {
                if (videoPercentage >= percentage) {
                    callback(percentage);
                    return false;
                }
                return true;
            });
        });
    };
    TimeObservable.prototype.addObserverForPeriodicEvents = function (intervalInSeconds, callback) {
        var lastReportedPosition = 0;
        this.observersForPeriodicEvents.push(function (event) {
            var currentPosition = event.target.currentTime;
            var positionDifference = Math.abs(lastReportedPosition - currentPosition);
            if (positionDifference >= intervalInSeconds) {
                callback(currentPosition);
                lastReportedPosition = Math.floor(currentPosition);
            }
        });
    };
    return TimeObservable;
}());
export default TimeObservable;
//# sourceMappingURL=TimeObservable.js.map