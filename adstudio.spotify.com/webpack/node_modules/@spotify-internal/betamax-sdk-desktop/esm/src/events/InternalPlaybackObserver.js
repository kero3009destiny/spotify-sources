var InternalPlaybackObserver = (function () {
    function InternalPlaybackObserver(factories) {
        this.factories = factories;
        this.observers = [];
    }
    InternalPlaybackObserver.prototype.initiateObservers = function (playbackIdentity, featureIdentifier, playerConfiguration) {
        this.observers = this.factories
            .map(function (factory) {
            return factory.createEventObserver(playbackIdentity, featureIdentifier, playerConfiguration);
        })
            .filter(function (factory) { return factory; });
    };
    InternalPlaybackObserver.prototype.onPlaybackCreated = function (playbackIdentity, initialConfiguration, timeObservable) {
        var timestamp = Date.now();
        this.observers.forEach(function (observer) {
            observer.onPlaybackCreated(playbackIdentity, initialConfiguration, timeObservable, timestamp);
        });
    };
    InternalPlaybackObserver.prototype.onEndingPlayback = function (playbackRequest) {
        var timestamp = Date.now();
        this.observers.forEach(function (observer) {
            observer.onEndingPlayback(playbackRequest, timestamp);
        });
    };
    InternalPlaybackObserver.prototype.onPlaybackEnded = function (position, reason) {
        var timestamp = Date.now();
        this.observers.forEach(function (observer) {
            observer.onPlaybackEnded(reason, position, timestamp);
        });
    };
    InternalPlaybackObserver.prototype.onVolumeChanged = function (position, volume) {
        var timestamp = Date.now();
        this.observers.forEach(function (observer) {
            observer.onVolumeChanged(volume, position, timestamp);
        });
    };
    InternalPlaybackObserver.prototype.onResumed = function (position) {
        var timestamp = Date.now();
        this.observers.forEach(function (observer) {
            observer.onResumed(position, timestamp);
        });
    };
    InternalPlaybackObserver.prototype.onSeeking = function (fromPosition, toPosition) {
        var timestamp = Date.now();
        this.observers.forEach(function (observer) {
            observer.onSeeking(fromPosition, toPosition, timestamp);
        });
    };
    InternalPlaybackObserver.prototype.onPaused = function (position) {
        var timestamp = Date.now();
        this.observers.forEach(function (observer) {
            observer.onPaused(position, timestamp);
        });
    };
    InternalPlaybackObserver.prototype.onReady = function (position, playWhenReady) {
        var timestamp = Date.now();
        this.observers.forEach(function (observer) {
            observer.onReady(playWhenReady, position, timestamp);
        });
    };
    InternalPlaybackObserver.prototype.onManifestLoaded = function () {
        var timestamp = Date.now();
        this.observers.forEach(function (observer) {
            observer.onManifestLoaded(timestamp);
        });
    };
    InternalPlaybackObserver.prototype.onManifestLoading = function () {
        var timestamp = Date.now();
        this.observers.forEach(function (observer) {
            observer.onManifestLoading(timestamp);
        });
    };
    InternalPlaybackObserver.prototype.onRecoverableError = function (error, position) {
        var timestamp = Date.now();
        this.observers.forEach(function (observer) {
            observer.onRecoverableError(error, position, timestamp);
        });
    };
    InternalPlaybackObserver.prototype.onFatalError = function (error, position) {
        var timestamp = Date.now();
        this.observers.forEach(function (observer) {
            observer.onFatalError(error, position, timestamp);
        });
    };
    InternalPlaybackObserver.prototype.onAudioFormatChanged = function (format, position) {
        var timestamp = Date.now();
        this.observers.forEach(function (observer) {
            observer.onAudioFormatChanged(format, position, timestamp);
        });
    };
    InternalPlaybackObserver.prototype.onVideoFormatChanged = function (format, position) {
        var timestamp = Date.now();
        this.observers.forEach(function (observer) {
            observer.onVideoFormatChanged(format, position, timestamp);
        });
    };
    InternalPlaybackObserver.prototype.onBuffering = function (position, playWhenReady, type) {
        var timestamp = Date.now();
        this.observers.forEach(function (observer) {
            observer.onBuffering(playWhenReady, type, position, timestamp);
        });
    };
    InternalPlaybackObserver.prototype.onDroppedVideoFrames = function (droppedFrames) {
        var timestamp = Date.now();
        this.observers.forEach(function (observer) {
            observer.onDroppedVideoFrames(droppedFrames, timestamp);
        });
    };
    InternalPlaybackObserver.prototype.onEncryptionKeyLoaded = function (encryptionType) {
        var timestamp = Date.now();
        this.observers.forEach(function (observer) {
            observer.onEncryptionKeyLoaded(encryptionType, timestamp);
        });
    };
    InternalPlaybackObserver.prototype.onEncryptionKeyLoading = function () {
        var timestamp = Date.now();
        this.observers.forEach(function (observer) {
            observer.onEncryptionKeyLoading(timestamp);
        });
    };
    InternalPlaybackObserver.prototype.onBytesTransferred = function (bytes, timeMs) {
        var timestamp = Date.now();
        this.observers.forEach(function (observer) {
            observer.onBytesTransferred(bytes, timeMs, timestamp);
        });
    };
    InternalPlaybackObserver.prototype.onDurationChanged = function (duration) {
        var timestamp = Date.now();
        this.observers.forEach(function (observer) {
            observer.onDurationChanged(duration, timestamp);
        });
    };
    InternalPlaybackObserver.prototype.onSubtitleChanged = function (position, subtitle) {
        var timestamp = Date.now();
        this.observers.forEach(function (observer) {
            observer.onSubtitleChanged(subtitle, position, timestamp);
        });
    };
    InternalPlaybackObserver.prototype.onFullscreenChanged = function (position, fullscreen) {
        var timestamp = Date.now();
        this.observers.forEach(function (observer) {
            observer.onFullscreenChanged(fullscreen, position, timestamp);
        });
    };
    return InternalPlaybackObserver;
}());
export default InternalPlaybackObserver;
//# sourceMappingURL=InternalPlaybackObserver.js.map