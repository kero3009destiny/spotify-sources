var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { PlaybackSession } from '.';
import { InternalPlaybackObserver, PlaybackEventsObserver } from '../events';
import { EndVideoTracker, EndVideoLoggerFactory, PlaybackSessionLoggerFactory, } from '../tracking';
var PlaybackSessionFactory = (function () {
    function PlaybackSessionFactory(playerConfigurationDependencies) {
        this.playerConfigurationDependencies = playerConfigurationDependencies;
    }
    PlaybackSessionFactory.prototype.createPlaybackSession = function (isRoyaltyMedia, playerConfiguration) {
        var factories = this.playerConfigurationDependencies.factories || [];
        if (this.playerConfigurationDependencies.session) {
            factories = __spreadArrays(factories, [
                new PlaybackSessionLoggerFactory(this.playerConfigurationDependencies.session.logger),
            ]);
        }
        var endVideoTracker;
        if (isRoyaltyMedia && this.playerConfigurationDependencies.endVideo) {
            var _a = this.playerConfigurationDependencies.endVideo, endVideo = _a.endVideo, productStateProvider = _a.productStateProvider, logError = _a.logError;
            if (playerConfiguration.newEventApi) {
                factories = __spreadArrays(factories, [
                    new EndVideoLoggerFactory(endVideo, productStateProvider, logError),
                ]);
            }
            else {
                endVideoTracker = new EndVideoTracker(endVideo, productStateProvider, logError);
            }
        }
        if (isRoyaltyMedia && !this.playerConfigurationDependencies.endVideo) {
            throw new Error('Cannot play Royalty media. EndVideo support is not enabled.');
        }
        var internalPlaybackObserver = new InternalPlaybackObserver(factories);
        var initiatePlaybackEventsObserver = function (playbackSession) {
            return new PlaybackEventsObserver(playbackSession, internalPlaybackObserver);
        };
        return new PlaybackSession(playerConfiguration, __assign(__assign({}, this.playerConfigurationDependencies), { endVideoTracker: endVideoTracker,
            initiatePlaybackEventsObserver: initiatePlaybackEventsObserver }));
    };
    return PlaybackSessionFactory;
}());
export default PlaybackSessionFactory;
//# sourceMappingURL=PlaybackSessionFactory.js.map