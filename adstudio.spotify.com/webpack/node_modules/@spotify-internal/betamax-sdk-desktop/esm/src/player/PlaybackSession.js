var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { BufferType, EndReason, EndVideoReasonEnd, InternalEvents, } from '../tracking';
import { EventEmitter } from 'events';
import UUID from 'uuid-js';
import { equals, pathOr, path } from 'ramda';
import _ from '../utils';
import Player from './player';
import shaka from './shaka';
import { FEATURE_IDENTIFIER, IS_ADVERTISMENT, PLAY_TRACK, PLAYBACK_ID, retrieveEndvideoMetadata, } from '../tracking/utils';
import { TimeObservable } from '../events';
var UPDATE_INTERVAL = 15000;
var CC_SUFFIX = '-x-cc';
var sharedBandwidthEstimate = 6000000;
var PlaybackSession = (function (_super) {
    __extends(PlaybackSession, _super);
    function PlaybackSession(playerConfiguration, playbackSessionConfiguration) {
        var _this = _super.call(this) || this;
        _this.transformUrl = function (mediaUrl, mediaExtensions) {
            if (mediaExtensions === void 0) { mediaExtensions = []; }
            return mediaExtensions.reduce(function (url, extension) {
                return extension.isPlayable(mediaUrl)
                    ? extension.createAssetUri(mediaUrl)
                    : url;
            }, mediaUrl);
        };
        _this.handleTimeUpdateWhenPlaying = function (timeUpdateFn) { return function (event) {
            if (_this.state.isLoaded && _this.state.isStarted) {
                timeUpdateFn(event);
            }
        }; };
        _this.configuration = _this.assignDefaultConfiguration(playerConfiguration);
        _this.playbackSessionConfiguration = playbackSessionConfiguration;
        _this.playbackEventsObserver = _this.playbackSessionConfiguration.initiatePlaybackEventsObserver(_this);
        if (playerConfiguration.containerElement) {
            _this.containerElement = playerConfiguration.containerElement;
        }
        if (playerConfiguration.containerElementClass) {
            _this.containerElementClass = playerConfiguration.containerElementClass;
        }
        _this.checkContainerElementByClass = function () {
            if (_this.containerElementClass) {
                var container = document.getElementsByClassName(_this.containerElementClass)[0];
                if (container) {
                    container.appendChild(_this.node);
                    _this.containerElementMutationObserver.disconnect();
                }
            }
        };
        _this.containerElementMutationObserver = new MutationObserver(_this.checkContainerElementByClass);
        var defaultNodeConfig = {
            controls: false,
            style: '',
            width: 640,
        };
        _this.videoElementConfig = __assign(__assign({}, defaultNodeConfig), playerConfiguration.videoElementConfig);
        _this.videoElementEventHandlers = [
            { event: 'ended', handler: _this.handleEnded },
            { event: 'durationchange', handler: _this.handleDurationchange },
            { event: 'timeupdate', handler: _this.handleTimeUpdate },
            { event: 'volumechange', handler: _this.handleVolumechange },
            { event: 'playing', handler: _this.handlePlaying },
            { event: 'pause', handler: _this.handlePause },
            { event: 'canplay', handler: _this.handleCanplay },
            { event: 'seeking', handler: _this.handleSeeking },
            { event: 'seeked', handler: _this.handleSeeked },
            { event: 'loadedmetadata', handler: _this.handleLoadedMetadata },
        ];
        _this.shakaPlayerEventHandlers = [
            { event: 'error', handler: _this.handleShakaError },
            { event: 'adaptation', handler: _this.handleAdaptation },
            { event: 'buffering', handler: _this.onBufferingStateChange },
            { event: 'drmsessionupdate', handler: _this.onEncryptionKeyLoaded },
        ];
        return _this;
    }
    PlaybackSession.prototype.assignDefaultConfiguration = function (playerConfiguration) {
        var defaultConfiguration = {
            manifestUrlTemplate: null,
            widevineLicenseUrl: '',
            subtitlesEnabled: true,
            videoPlaybackSessionLoggingEnabled: true,
        };
        return __assign(__assign({}, defaultConfiguration), playerConfiguration);
    };
    PlaybackSession.prototype.validatePlaybackRequest = function (playbackSessionRequest) {
        if (!playbackSessionRequest) {
            throw new Error('Missing playbackRequest');
        }
        if (!playbackSessionRequest.mediaUrl) {
            throw new Error('mediaUrl must be set');
        }
        if (playbackSessionRequest.initialPosition < 0) {
            throw new Error('initialPosition cannot be negative');
        }
        if (typeof playbackSessionRequest.isRoyaltyMedia !== 'boolean') {
            throw new Error('Missing or wrong isRoyaltyMedia value');
        }
        return playbackSessionRequest;
    };
    PlaybackSession.prototype.playWithOptions = function (playbackSessionRequest, playOptions) {
        var _this = this;
        return new Promise(function (resolve) {
            var validatedPlaybackRequest = _this.validatePlaybackRequest(__assign(__assign({}, playbackSessionRequest), playOptions));
            var sessionId = UUID.create()
                .toString()
                .replace(new RegExp('-', 'g'), '');
            _this.session = __assign({ sessionId: sessionId }, validatedPlaybackRequest);
            _this.node = document.createElement('video');
            if (_this.videoElementConfig.controls !== undefined) {
                _this.node.controls = _this.videoElementConfig.controls;
            }
            if (_this.videoElementConfig.style !== undefined) {
                _this.node.style.cssText = _this.videoElementConfig.style;
            }
            if (_this.videoElementConfig.width !== undefined) {
                _this.node.width = _this.videoElementConfig.width;
            }
            if (_this.videoElementConfig.height !== undefined) {
                _this.node.height = _this.videoElementConfig.height;
            }
            if (_this.containerElement) {
                _this.containerElement.appendChild(_this.node);
            }
            else if (_this.containerElementClass) {
                _this.containerElementMutationObserver.observe(document.documentElement, {
                    childList: true,
                    subtree: true,
                });
                _this.checkContainerElementByClass();
            }
            _this.node.setAttribute('preload', 'auto');
            _this.node.setAttribute('data-sessionId', _this.session.sessionId);
            var timeObservable = new TimeObservable();
            _this.node.addEventListener('timeupdate', _this.handleTimeUpdateWhenPlaying(timeObservable.handleTimeUpdate));
            var featureIdentifier = retrieveEndvideoMetadata(_this.session.metadata || {})[FEATURE_IDENTIFIER];
            _this.playbackEventsObserver.initiateObservers(_this.session, featureIdentifier || '', _this.playbackSessionConfiguration);
            if (_this.playbackSessionConfiguration.endVideoTracker) {
                _this.playbackSessionConfiguration.endVideoTracker.init(_this, __assign(__assign({}, _this.configuration), _this.session));
            }
            _this.playbackEventsObserver.onPlaybackCreated(__assign({}, _this.session), {
                position: playOptions.initialPosition,
                volume: playbackSessionRequest.volume,
            }, timeObservable);
            _this.playerBufferInterval = 0;
            _this.playerTimeUpdateInterval = 0;
            _this.state = _this.getDefaultState(playOptions);
            _this.latencyStartTimes = {};
            _this.setVolume(playbackSessionRequest.volume);
            _this.player = new Player(_this.node);
            _this.player.configure({
                abr: {
                    defaultBandwidthEstimate: sharedBandwidthEstimate,
                },
                drm: _this.configuration.drm,
            });
            _this.player
                .getNetworkingEngine()
                .registerRequestFilter(_this.networkRequestFilter.bind(_this));
            _this.player
                .getNetworkingEngine()
                .registerResponseFilter(_this.networkResponseFilter.bind(_this));
            var url = _this.transformUrl(_this.session.mediaUrl, _this.playbackSessionConfiguration.mediaExtensions);
            _this.playerLoadPromise = _this.player.load(url, playOptions.initialPosition);
            _this.playerLoadPromise
                .then(function () {
                _this.set({
                    isLoaded: true,
                    keySystem: _this.player.keySystem(),
                });
                if (_this.configuration.subtitlesEnabled) {
                    var subtitleCodes = _this.player
                        .getTextTracks()
                        .map(function (track) { return track.language; });
                    if (_this.playbackSessionConfiguration.events) {
                        var _a = _this.playbackSessionConfiguration.events, eventDispatcher = _a.eventDispatcher, Event_1 = _a.Event;
                        eventDispatcher.dispatchEvent(new Event_1(Event_1.TYPES.VIDEO_LOADED, {
                            subtitleCodes: subtitleCodes,
                        }));
                    }
                }
            })
                .catch(function (e) {
                _this.handleError('player-load', { type: 'error', detail: e });
            });
            _this.startListening();
            _this.setPaused(!playOptions.playWhenReady);
            resolve(_this);
        });
    };
    PlaybackSession.prototype.startListening = function () {
        var _this = this;
        document.addEventListener('fullscreenchange', this.onFullScreenChange.bind(this));
        this.videoElementEventHandlers.forEach(function (x) {
            _this.node.addEventListener(x.event, x.handler.bind(_this));
        });
        if (this.player) {
            this.shakaPlayerEventHandlers.forEach(function (x) {
                _this.player.addEventListener(x.event, x.handler.bind(_this));
            });
        }
    };
    PlaybackSession.prototype.stopListening = function () {
        var _this = this;
        document.removeEventListener('fullscreenchange', this.onFullScreenChange);
        this.videoElementEventHandlers.forEach(function (x) {
            _this.node.removeEventListener(x.event, x.handler);
        });
        if (this.player) {
            this.shakaPlayerEventHandlers.forEach(function (x) {
                _this.player.removeEventListener(x.event, x.handler);
            });
        }
    };
    PlaybackSession.prototype.onFullScreenChange = function () {
        this.handleFullScreenChange(document.fullscreenElement);
    };
    PlaybackSession.prototype.handleFullScreenChange = function (fullscreenElement) {
        if (fullscreenElement) {
            var playerMatcher = "[data-sessionId='" + this.session.sessionId + "']";
            var isThisVideoFullscreen = !!(fullscreenElement.matches(playerMatcher) ||
                fullscreenElement.querySelector(playerMatcher));
            if (isThisVideoFullscreen) {
                this.set({ fullscreen: true });
                this.playbackEventsObserver.onFullscreenChanged(this.node.currentTime, true);
            }
        }
        else {
            if (this.state.fullscreen) {
                this.set({ fullscreen: false });
                this.playbackEventsObserver.onFullscreenChanged(this.node.currentTime, false);
            }
        }
    };
    PlaybackSession.prototype.getDefaultState = function (_a) {
        var playWhenReady = _a.playWhenReady, initialPosition = _a.initialPosition;
        return {
            time: new Date().getTime(),
            isAd: path(['metadata', IS_ADVERTISMENT], this.session) === 'true',
            playWhenReady: playWhenReady,
            isStarted: false,
            isPlaying: false,
            isPaused: !playWhenReady,
            isEnded: false,
            isError: false,
            isBuffering: false,
            isLoaded: false,
            canPlay: false,
            isSeeking: false,
            seekingFrom: 0,
            timeBuffering: 0,
            readyTimeBuffering: 0,
            isMuted: this.node.muted || this.node.volume === 0,
            duration: this.node.duration || -1,
            currentTime: this.node.currentTime || initialPosition,
            progress: 0,
            volume: this.node.muted ? 0 : this.node.volume,
            bitrate: 0,
            currentAudioFormat: null,
            currentVideoFormat: null,
            stats: {},
            endReason: EndVideoReasonEnd.END_UNKNOWN,
            hasInitiallySeeked: false,
            hasInitiallyReadied: false,
            currentVariantId: null,
            progressPercentages: [],
        };
    };
    PlaybackSession.prototype.networkRequestFilter = function (type, request) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, webgateHeaders, requestHeaders;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (type !== shaka.net.NetworkingEngine.RequestType.LICENSE &&
                            type !== shaka.net.NetworkingEngine.RequestType.MANIFEST) {
                            return [2];
                        }
                        this.latencyStartTimes[type] = Date.now();
                        if (!this.configuration.getToken) return [3, 2];
                        _a = request.headers;
                        return [4, this.configuration.getToken()];
                    case 1:
                        _a.Authorization = _b.sent();
                        _b.label = 2;
                    case 2:
                        if (type === shaka.net.NetworkingEngine.RequestType.MANIFEST) {
                            if (this.configuration.getToken && this.configuration.getWebgateHeaders) {
                                webgateHeaders = this.configuration.getWebgateHeaders();
                                requestHeaders = webgateHeaders.reduce(function (headers, elem) {
                                    headers[elem[0]] = elem[1];
                                    return headers;
                                }, {});
                                request.headers = __assign(__assign({}, request.headers), requestHeaders);
                            }
                            this.playbackEventsObserver.onManifestLoading();
                        }
                        if (type === shaka.net.NetworkingEngine.RequestType.LICENSE) {
                            this.playbackEventsObserver.onEncryptionKeyLoading();
                        }
                        return [2];
                }
            });
        });
    };
    PlaybackSession.prototype.networkResponseFilter = function (type, response) {
        var _a;
        if (response &&
            response.data &&
            response.data.byteLength &&
            response.timeMs) {
            this.playbackEventsObserver.onBytesTransferred(response.data.byteLength, response.timeMs);
        }
        if (type === shaka.net.NetworkingEngine.RequestType.MANIFEST ||
            type === shaka.net.NetworkingEngine.RequestType.LICENSE) {
            if (this.latencyStartTimes[type]) {
                var latencyKey = type === shaka.net.NetworkingEngine.RequestType.MANIFEST
                    ? 'manifestLatency'
                    : 'keyLatency';
                var latency = Date.now() - this.latencyStartTimes[type];
                this.set((_a = {}, _a[latencyKey] = latency, _a));
            }
        }
    };
    PlaybackSession.prototype.emitEndedEvent = function (reason, endPosition) {
        var droppedFrames = 0;
        var stats = this.getStats();
        if (stats && stats.droppedFrames) {
            droppedFrames = stats.droppedFrames;
        }
        if (droppedFrames > 0) {
            this.playbackEventsObserver.onDroppedVideoFrames(droppedFrames);
        }
        this.playbackEventsObserver.onPlaybackEnded(endPosition, reason, droppedFrames);
    };
    PlaybackSession.prototype.handleEnded = function () {
        this.disablePlayTimers();
        if (!this.state.isEnded) {
            this.emitEndedEvent(EndReason.PLAYED_TO_END, this.node.currentTime);
        }
        this.set({
            isEnded: true,
            endReason: EndVideoReasonEnd.END_TRACK_DONE,
            stats: this.getStats(),
        });
    };
    PlaybackSession.prototype.handleDurationchange = function () {
        var duration = this.node.duration;
        var position = this.node.currentTime;
        this.set({
            duration: duration,
            progress: this.calculateProgress(position, duration),
            stats: this.getStats(),
        });
        this.playbackEventsObserver.onDurationChanged(duration);
    };
    PlaybackSession.prototype.handleLoadedMetadata = function () {
        if (!this.state.isPlaying) {
            this.playbackEventsObserver.onManifestLoaded();
        }
    };
    PlaybackSession.prototype.handleTimeUpdate = function () {
        if (!this.state.isLoaded || !this.state.isStarted) {
            return;
        }
        var position = this.lastSeekTime || this.node.currentTime || 0;
        var previousProgress = this.state.progress;
        var progress = this.calculateProgress(position, this.node.duration);
        this.set({
            currentTime: position,
            stats: this.getStats(),
            progress: progress,
        }, true);
        this.playbackEventsObserver.onTimeUpdate(position);
        this.emitProgress(progress, previousProgress);
        if (this.state.isSeeking) {
            this.set({ isSeeking: false, seekingFrom: null });
            this.lastSeekTime = 0;
        }
    };
    PlaybackSession.prototype.calculateProgress = function (position, duration) {
        var progress = null;
        if (duration > 0 && position >= 0) {
            progress = position / duration;
            progress = Math.min(Math.max(progress, 0), 1);
        }
        return progress;
    };
    PlaybackSession.prototype.emitProgress = function (progress, previousProgress) {
        var _this = this;
        if (progress !== null) {
            if (progress > previousProgress) {
                this.state.progressPercentages.forEach(function (percentage) {
                    if (previousProgress <= percentage && progress > percentage) {
                        _this.playbackEventsObserver.onProgressChanged(percentage);
                    }
                });
            }
        }
    };
    PlaybackSession.prototype.handlePlaying = function () {
        if (!this.state.hasInitiallyReadied) {
            return;
        }
        var isStartingNow = !this.state.isStarted;
        this.set({
            isPlaying: true,
            isStarted: true,
            isEnded: false,
            stats: this.getStats(),
        });
        if (isStartingNow) {
            this.playbackEventsObserver.onStarted(this.node.currentTime);
        }
        else {
            this.playbackEventsObserver.onResumed(this.node.currentTime);
        }
    };
    PlaybackSession.prototype.handlePause = function () {
        if (!this.state.hasInitiallyReadied) {
            return;
        }
        this.set({
            isPlaying: false,
            stats: this.getStats(),
        });
        var position = this.node.currentTime;
        var isPausedOnEndedEvent = this.node.duration && position === this.node.duration;
        if (!isPausedOnEndedEvent) {
            this.playbackEventsObserver.onPaused(position);
        }
    };
    PlaybackSession.prototype.handleVolumechange = function () {
        var volume = this.node.muted ? 0 : this.node.volume;
        var muted = this.node.muted || this.node.volume === 0;
        this.set({ volume: volume, isMuted: muted });
        this.playbackEventsObserver.onVolumeChanged(this.node.currentTime, volume, muted);
    };
    PlaybackSession.prototype.handleShakaError = function (shakaError) {
        this.handleError('shaka-event', shakaError);
    };
    PlaybackSession.prototype.handleError = function (kind, e) {
        if (this.playbackSessionConfiguration.VideoPlayerErrorKM1) {
            this.playbackSessionConfiguration.VideoPlayerErrorKM1.log({
                file_id: pathOr('', ['metadata', 'media.manifest_id'], this.session),
                uri: pathOr('', ['metadata', PLAY_TRACK], this.session),
                playback_id: pathOr('', ['metadata', PLAYBACK_ID], this.session),
                local_time: new Date().getTime(),
                name: kind,
                message: JSON.stringify({
                    kind: kind,
                    type: e.type,
                    detail: e.detail,
                }),
            });
        }
        var oldState = this.get();
        var errorData = { type: "" + e.type };
        if (e.detail && e.detail.code !== undefined) {
            errorData.error_code = e.detail.code;
        }
        if (e.detail && e.detail.category !== undefined) {
            errorData.error_category = e.detail.category;
        }
        var stats = this.getStats();
        errorData.buffering_time = "" + stats.bufferingTime;
        errorData.dropped_frames = "" + stats.droppedFrames;
        errorData.playback_latency = "" + stats.playbackLatency;
        if (e.detail &&
            e.detail.category === shaka.util.Error.Category.NETWORK &&
            e.detail.code === shaka.util.Error.Code.BAD_HTTP_STATUS) {
            errorData.httpStatus = e.detail.data[1];
            errorData.responseText = e.detail.data[2];
            errorData.responseHeaders = e.detail.data[3];
        }
        var canRecover = false;
        if (e.detail &&
            e.detail.data &&
            e.detail.data[0] &&
            e.detail.data[0].includes &&
            e.detail.data[0].includes('subtitle')) {
            canRecover = true;
        }
        errorData.canRecover = canRecover;
        var position = this.node && this.node.currentTime
            ? this.node.currentTime
            : this.state.currentTime;
        var error = {
            kind: kind,
            data: e,
        };
        if (canRecover) {
            this.playbackEventsObserver.onRecoverableError(error, position);
        }
        else {
            this.playbackEventsObserver.onFatalError(error, position);
        }
        if (!this.state.isEnded && !canRecover) {
            this.emitEndedEvent(EndReason.FATAL_ERROR, position);
        }
        this.set({
            isEnded: !canRecover,
            isError: true,
            stats: stats,
            endReason: EndVideoReasonEnd.END_TRACK_ERROR,
        }, true);
        this.emit(InternalEvents.CHANGE, errorData, oldState, this.get());
    };
    PlaybackSession.prototype.handleAdaptation = function (e) {
        if (e.type !== 'adaptation' || !this.player) {
            return;
        }
        var activeVariant = this.player.getVariantTracks().find(function (a) { return a.active; });
        if (!activeVariant) {
            return;
        }
        this.set({ bitrate: activeVariant.bandwidth });
        if (this.state.currentVariantId === activeVariant.id) {
            return;
        }
        var activeAudioFormat = {
            bandwidth: activeVariant.audioBandwidth,
            audioCodec: activeVariant.audioCodec,
        };
        var activeVideoFormat = {
            width: activeVariant.width,
            height: activeVariant.height,
            videoCodec: activeVariant.videoCodec,
            bandwidth: activeVariant.videoBandwidth,
        };
        if (!equals(this.state.currentAudioFormat, activeAudioFormat)) {
            this.playbackEventsObserver.onAudioFormatChanged(activeAudioFormat, this.node.currentTime);
        }
        if (!equals(this.state.currentVideoFormat, activeVideoFormat)) {
            this.playbackEventsObserver.onVideoFormatChanged(activeVideoFormat, this.node.currentTime);
        }
        this.set({
            currentVariantId: activeVariant.id,
            currentAudioFormat: activeAudioFormat,
            currentVideoFormat: activeVideoFormat,
        });
    };
    PlaybackSession.prototype.handleCanplay = function () {
        this.set({
            canPlay: true,
        });
    };
    PlaybackSession.prototype.handleSeeking = function () {
        if (!this.state.hasInitiallySeeked) {
            this.set({ hasInitiallySeeked: true });
        }
        else {
            this.set({ isSeeking: true });
            this.playbackEventsObserver.onSeeking(this.state.seekingFrom, this.node.currentTime);
        }
    };
    PlaybackSession.prototype.handleSeeked = function () {
        if (!this.state.hasInitiallyReadied) {
            this.set({ hasInitiallyReadied: true });
        }
        this.playbackEventsObserver.onReady(this.node.currentTime, this.node.duration, !this.state.isPaused);
        this.set({
            isSeeking: false,
            seekingFrom: null,
            progress: this.calculateProgress(this.state.currentTime, this.node.currentTime),
        });
    };
    PlaybackSession.prototype.onBufferingStateChange = function (event) {
        if (event.buffering) {
            var bufferType = BufferType.INITIAL;
            if (this.state.hasInitiallyReadied) {
                bufferType = this.state.isSeeking ? BufferType.SEEK : BufferType.STALL;
            }
            this.set({
                isBuffering: true,
                bufferType: bufferType,
                lastBufferStart: Date.now(),
                isPlaying: false,
            });
            this.playbackEventsObserver.onBuffering(this.node.currentTime, this.state.playWhenReady, bufferType);
        }
        else {
            if (this.state.isBuffering &&
                this.state.bufferType === BufferType.STALL) {
                this.playbackEventsObserver.onReady(this.node.currentTime, this.node.duration, !this.state.isPaused);
            }
            this.set({
                isBuffering: false,
                bufferType: '',
            });
        }
    };
    PlaybackSession.prototype.onEncryptionKeyLoaded = function () {
        this.playbackEventsObserver.onEncryptionKeyLoaded(this.player.keySystem());
    };
    PlaybackSession.prototype.enablePlayTimers = function () {
        var _this = this;
        if (this.playerBufferInterval) {
            return;
        }
        var timerUpdate = function () {
            _this.set({ timeUpdate: true });
            _this.set({ timeUpdate: false }, true);
        };
        timerUpdate();
        this.playerTimeUpdateInterval = window.setInterval(timerUpdate, UPDATE_INTERVAL);
    };
    PlaybackSession.prototype.disablePlayTimers = function () {
        window.clearInterval(this.playerBufferInterval);
        window.clearInterval(this.playerTimeUpdateInterval);
        this.playerBufferInterval = 0;
        this.playerTimeUpdateInterval = 0;
        this.set({ isBuffering: false });
        this.set({ timeBuffering: 0 });
    };
    PlaybackSession.prototype.getStats = function () {
        return this.player !== undefined && this.state.isLoaded
            ? this.player.getStats()
            : {};
    };
    PlaybackSession.prototype.getCurrentSubtitleCode = function () {
        if (this.player.isTextTrackVisible()) {
            var enabledTextTrack = this.player
                .getTextTracks()
                .find(function (track) { return track.active; });
            return !!enabledTextTrack ? enabledTextTrack : '';
        }
        return '';
    };
    PlaybackSession.prototype.getSubtitleChoice = function (prefSubtitleCode) {
        var finalSubtitleCode = '';
        var prefSubtitleIsCc = prefSubtitleCode.indexOf(CC_SUFFIX) > 0;
        if (!prefSubtitleCode) {
            return '';
        }
        var textList = this.player.getTextTracks();
        for (var i = 0; i < textList.length; i++) {
            var language = textList[i].language;
            if (language === prefSubtitleCode) {
                finalSubtitleCode = language;
                break;
            }
            if (this.sameLanguageTagWithOrWithoutCC(language, prefSubtitleCode, prefSubtitleIsCc)) {
                finalSubtitleCode = language;
            }
            if (finalSubtitleCode === '' &&
                this.hasSameLanguage(language, prefSubtitleCode)) {
                finalSubtitleCode = language;
            }
        }
        return finalSubtitleCode;
    };
    PlaybackSession.prototype.sameLanguageTagWithOrWithoutCC = function (language, perfLanguage, prefSubtitleIsCc) {
        if (language && perfLanguage) {
            var newPrefSubtitleCode = prefSubtitleIsCc
                ? perfLanguage.replace(CC_SUFFIX, '')
                : perfLanguage + CC_SUFFIX;
            return language === newPrefSubtitleCode;
        }
        return false;
    };
    PlaybackSession.prototype.hasSameLanguage = function (language, perfLanguage) {
        if (language &&
            language.length > 1 &&
            perfLanguage &&
            perfLanguage.length > 1) {
            return language.substring(0, 2) === perfLanguage.substring(0, 2);
        }
        return false;
    };
    PlaybackSession.prototype.setPaused = function (pause) {
        if (pause) {
            this.node.pause();
            this.disablePlayTimers();
        }
        else {
            this.node.play();
            this.enablePlayTimers();
        }
        this.node.autoplay = !pause;
        this.set({ isPaused: pause });
        return this;
    };
    PlaybackSession.prototype.get = function (key) {
        return key ? this.state[key] : _.clone(this.state);
    };
    PlaybackSession.prototype.set = function (keyObject, silent) {
        var oldState = this.get();
        _.extend(this.state, keyObject);
        this.state.time = new Date().getTime();
        if (!silent) {
            this.emit(InternalEvents.CHANGE, undefined, oldState, this.get());
        }
        return this;
    };
    PlaybackSession.prototype.resume = function () {
        return this.setPaused(false);
    };
    PlaybackSession.prototype.pause = function () {
        return this.setPaused(true);
    };
    PlaybackSession.prototype.seekTo = function (position) {
        var newPosition = position;
        if (position < 0) {
            newPosition = 0;
        }
        var duration = this.node.duration || 0;
        if (position > duration) {
            newPosition = duration;
        }
        if (position < 0.1) {
            newPosition = 0.1;
        }
        this.lastSeekTime = newPosition;
        this.set({ currentTime: this.node.currentTime }, true);
        this.set({
            isSeeking: true,
            seekingFrom: this.node.currentTime,
            currentTime: newPosition,
            hasInitiallySeeked: true,
        });
        this.node.currentTime = newPosition;
        return this;
    };
    PlaybackSession.prototype.setVolume = function (volume) {
        var adjustedVolume = Math.pow(volume, 3);
        this.set({ volume: adjustedVolume });
        this.node.volume = adjustedVolume;
        return this;
    };
    PlaybackSession.prototype.setAudioDisabled = function (disabled) {
        this.node.muted = disabled;
        return this;
    };
    PlaybackSession.prototype.setPreferredSubtitle = function (prefSubtitleCode) {
        var subtitleCode = this.getSubtitleChoice(prefSubtitleCode);
        var currentSubtitleCode = this.getCurrentSubtitleCode();
        if (this.player !== undefined) {
            if (subtitleCode !== currentSubtitleCode) {
                this.player.selectTextLanguage(subtitleCode);
                this.player.configure({
                    preferredTextLanguage: subtitleCode,
                });
                this.player.setTextTrackVisibility(!!subtitleCode);
                if (this.playbackSessionConfiguration.events) {
                    var _a = this.playbackSessionConfiguration.events, eventDispatcher = _a.eventDispatcher, Event_2 = _a.Event;
                    eventDispatcher.dispatchEvent(new Event_2(Event_2.TYPES.VIDEO_SUBTITLE_CHANGE, {
                        subtitleCode: subtitleCode,
                    }));
                }
                this.playbackEventsObserver.onSubtitleChanged(this.node.currentTime, {
                    languageTag: subtitleCode,
                });
            }
        }
        else if (this.playbackSessionConfiguration.logWarn) {
            this.playbackSessionConfiguration.logWarn('Setting subtitles is only supported when using the ABR player');
        }
        return this;
    };
    PlaybackSession.prototype.newSessionLoaded = function (playbackRequest) {
        if (!this.state.isEnded) {
            this.playbackEventsObserver.onEndingPlayback(__assign({}, playbackRequest));
        }
    };
    PlaybackSession.prototype.stop = function (reason) {
        return __awaiter(this, void 0, void 0, function () {
            var endPosition, stats, _a, eventDispatcher, Event_3, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        endPosition = this.node && this.node.currentTime
                            ? this.node.currentTime
                            : this.state.currentTime;
                        this.disablePlayTimers();
                        if (!this.state.isEnded) {
                            this.emitEndedEvent(EndReason.REQUESTED, endPosition);
                        }
                        stats = this.getStats();
                        this.set({
                            isEnded: true,
                            endReason: reason,
                            stats: stats,
                        });
                        this.stopListening();
                        if (!(this.player !== undefined)) return [3, 5];
                        if (stats && stats.estimatedBandwidth) {
                            sharedBandwidthEstimate = stats.estimatedBandwidth;
                        }
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4, this.playerLoadPromise];
                    case 2:
                        _b.sent();
                        this.player.unload();
                        if (this.playbackSessionConfiguration.events) {
                            _a = this.playbackSessionConfiguration.events, eventDispatcher = _a.eventDispatcher, Event_3 = _a.Event;
                            eventDispatcher.dispatchEvent(new Event_3(Event_3.TYPES.VIDEO_UNLOADED));
                        }
                        return [3, 4];
                    case 3:
                        e_1 = _b.sent();
                        this.handleError('player-unload', { type: 'error', detail: e_1 });
                        return [3, 4];
                    case 4:
                        this.player.getNetworkingEngine().clearAllRequestFilters();
                        this.player.getNetworkingEngine().clearAllResponseFilters();
                        this.containerElementMutationObserver.disconnect();
                        _b.label = 5;
                    case 5: return [2];
                }
            });
        });
    };
    PlaybackSession.prototype.emitForPercentages = function (percentages) {
        this.set({
            progressPercentages: __spreadArrays(Array.from(new Set(__spreadArrays(this.state.progressPercentages, percentages)))).sort(),
        });
    };
    PlaybackSession.prototype.clearEmittedPercentages = function () {
        this.set({ progressPercentages: [] });
    };
    PlaybackSession.prototype.getNode = function () {
        return this.node;
    };
    Object.defineProperty(PlaybackSession.prototype, "muted", {
        get: function () {
            return this.state.isMuted;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlaybackSession.prototype, "volume", {
        get: function () {
            return this.state.volume;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlaybackSession.prototype, "started", {
        get: function () {
            return this.state.isStarted;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlaybackSession.prototype, "duration", {
        get: function () {
            return this.state.duration;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlaybackSession.prototype, "ended", {
        get: function () {
            return this.state && this.state.isEnded;
        },
        enumerable: true,
        configurable: true
    });
    return PlaybackSession;
}(EventEmitter));
export default PlaybackSession;
//# sourceMappingURL=PlaybackSession.js.map