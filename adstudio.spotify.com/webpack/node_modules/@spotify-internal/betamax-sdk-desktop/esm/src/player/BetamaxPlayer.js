var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { EventEmitter } from 'events';
import { VideoPlaybackEvents as PlaybackEvents, InternalEvents, EndReason, EndVideoReasonEnd, } from '../tracking';
import { values, pathOr } from 'ramda';
import { REASON_START, retrieveEndvideoMetadata } from '../tracking/utils';
var defaultPlayOptions = {
    playWhenReady: true,
    initialPosition: 0,
};
var BetamaxPlayer = (function (_super) {
    __extends(BetamaxPlayer, _super);
    function BetamaxPlayer(playerConfiguration, playbackSessionFactory) {
        var _this = _super.call(this) || this;
        _this.handleEmitChange = function (type) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (type === PlaybackEvents.VOLUME_CHANGED && args) {
                _this.playbackVolume = args[0].volume;
            }
        };
        _this.proxy = function (proxyType) { return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            _this.handleEmitChange.apply(_this, __spreadArrays([proxyType], args));
            return _this.emit.apply(_this, __spreadArrays([proxyType], args));
        }; };
        _this.proxyEmit = function (source, sourceType, proxyType) {
            source.on(sourceType, _this.proxy(proxyType));
        };
        _this.playerConfiguration = playerConfiguration;
        _this.playbackVolume = 1;
        _this.playbackSessionFactory = playbackSessionFactory;
        return _this;
    }
    BetamaxPlayer.prototype.play = function (playbackRequest) {
        return this.playWithOptions(playbackRequest, defaultPlayOptions);
    };
    BetamaxPlayer.prototype.playWithOptions = function (playbackRequest, playOptions) {
        var _this = this;
        this.endPreviousPlaybackSession(playbackRequest);
        var optionalPlaybackSession = this.createPlaybackSession(playbackRequest.isRoyaltyMedia);
        if (optionalPlaybackSession) {
            return optionalPlaybackSession
                .playWithOptions(__assign(__assign({}, playbackRequest), { volume: this.playbackVolume }), __assign(__assign({}, defaultPlayOptions), playOptions))
                .then(function () { return _this; });
        }
        return new Promise(function (_, reject) {
            reject('Failed to start playback');
        });
    };
    BetamaxPlayer.prototype.resume = function () {
        if (this.playbackSession) {
            this.playbackSession.resume();
        }
        return this;
    };
    BetamaxPlayer.prototype.pause = function () {
        if (this.playbackSession) {
            this.playbackSession.pause();
        }
        return this;
    };
    BetamaxPlayer.prototype.seekTo = function (position) {
        if (this.playbackSession) {
            this.playbackSession.seekTo(position);
        }
        return this;
    };
    BetamaxPlayer.prototype.setVolume = function (volume) {
        this.playbackVolume = volume;
        if (this.playbackSession) {
            this.playbackSession.setVolume(this.playbackVolume);
        }
        return this;
    };
    BetamaxPlayer.prototype.setAudioDisabled = function (disabled) {
        if (this.playbackSession) {
            this.playbackSession.setAudioDisabled(disabled);
        }
        return this;
    };
    BetamaxPlayer.prototype.setPreferredSubtitle = function (prefSubtitleCode) {
        if (this.playbackSession) {
            this.playbackSession.setPreferredSubtitle(prefSubtitleCode);
        }
        return this;
    };
    BetamaxPlayer.prototype.stop = function () {
        if (this.playbackSession) {
            this.playbackSession.stop(EndReason.REQUESTED);
            this.playbackSession.removeAllListeners();
            this.playbackSession = null;
        }
    };
    BetamaxPlayer.prototype.emitForPercentages = function (percentages) {
        if (this.playbackSession) {
            this.playbackSession.emitForPercentages(percentages);
        }
    };
    BetamaxPlayer.prototype.clearEmittedPercentages = function () {
        if (this.playbackSession) {
            this.playbackSession.clearEmittedPercentages();
        }
    };
    BetamaxPlayer.prototype.getNode = function () {
        if (this.playbackSession) {
            return this.playbackSession.getNode();
        }
        return null;
    };
    Object.defineProperty(BetamaxPlayer.prototype, "muted", {
        get: function () {
            if (this.playbackSession) {
                return this.playbackSession.muted;
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BetamaxPlayer.prototype, "volume", {
        get: function () {
            if (this.playbackSession) {
                return this.playbackSession.volume;
            }
            return this.playbackVolume;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BetamaxPlayer.prototype, "started", {
        get: function () {
            if (this.playbackSession) {
                return this.playbackSession.started;
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    BetamaxPlayer.prototype.getSessionState = function () {
        return this.playbackSession ? this.playbackSession.state : null;
    };
    BetamaxPlayer.prototype.endPreviousPlaybackSession = function (playbackRequest) {
        if (this.playbackSession && !this.playbackSession.ended) {
            var endVideoMetadata = retrieveEndvideoMetadata(pathOr({}, ['metadata'], playbackRequest));
            var reasonEnd = endVideoMetadata[REASON_START] || EndVideoReasonEnd.END_UNKNOWN;
            this.playbackSession.newSessionLoaded(playbackRequest);
            this.releaseWithReason(reasonEnd);
        }
    };
    BetamaxPlayer.prototype.releaseWithReason = function (reasonEnd) {
        if (this.playbackSession) {
            this.playbackSession.stop(reasonEnd);
            this.playbackSession.removeAllListeners();
            this.playbackSession = null;
        }
    };
    BetamaxPlayer.prototype.release = function () {
        this.releaseWithReason(EndVideoReasonEnd.END_PLAY);
    };
    BetamaxPlayer.prototype.createPlaybackSession = function (isRoyaltyMedia) {
        var _this = this;
        var playbackSession;
        try {
            playbackSession = this.playbackSessionFactory.createPlaybackSession(isRoyaltyMedia, this.playerConfiguration);
            if (playbackSession) {
                values(__assign(__assign({}, PlaybackEvents), InternalEvents)).map(function (event) {
                    _this.proxyEmit(playbackSession, event, event);
                });
            }
            this.playbackSession = playbackSession;
            return this.playbackSession;
        }
        catch (e) {
            return null;
        }
    };
    return BetamaxPlayer;
}(EventEmitter));
export default BetamaxPlayer;
//# sourceMappingURL=BetamaxPlayer.js.map