"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Pagination = Pagination;
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _Icons = _interopRequireDefault(require("../Icons"));

var _onEnter = _interopRequireDefault(require("../../utils/helpers/onEnter"));

var _Item = _interopRequireDefault(require("./Item"));

var _Items = _interopRequireDefault(require("./Items"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var IconChevronLeft = _Icons["default"].IconChevronLeft,
    IconChevronRight = _Icons["default"].IconChevronRight;

var PaginationList = _styledComponents["default"].ul.withConfig({
  displayName: "Pagination__PaginationList",
  componentId: "bhz350-0"
})(["font-size:14px;list-style:none;margin:0;padding:0;"]);
/**
 *
 * @param {Number} perpage - the number of items you want to display perpage
 * @param {Number} total - Total number of items
 */


var getNumPages = function getNumPages() {
  var total = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
  var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;
  return Math.ceil(total / limit);
};
/**
 * This component allows a user to page through multiple items
 * @param {Number} param0 the current page
 * @param {Number} param1 number of items per page
 * @param {Number} param2 how many number to display before we display the ellipsis
 * @param {Number} param3 The callback to be called after each action i.e next, prev, a page number
 * @param {Number} param4 the total number of items
 */


function Pagination(_ref) {
  var currentPage = _ref.currentPage,
      limit = _ref.limit,
      numPagesBeforeEllipsis = _ref.numPagesBeforeEllipsis,
      handleSelect = _ref.handleSelect,
      total = _ref.total;
  var numPages = getNumPages(total, limit);

  var handlePrev = function handlePrev() {
    return handleSelect(currentPage - 1);
  };

  var handleNext = function handleNext() {
    return handleSelect(currentPage + 1);
  };

  return /*#__PURE__*/_react["default"].createElement(PaginationList, null, /*#__PURE__*/_react["default"].createElement(_Item["default"], {
    isArrow: true,
    key: "prev",
    "data-disabled": currentPage === 1
  }, /*#__PURE__*/_react["default"].createElement("a", {
    onClick: handlePrev,
    onKeyPress: (0, _onEnter["default"])(handlePrev),
    role: "button",
    "aria-label": "Previous page",
    tabIndex: "0"
  }, /*#__PURE__*/_react["default"].createElement(IconChevronLeft, {
    size: 24
  }))), /*#__PURE__*/_react["default"].createElement(_Items["default"], {
    currentPage: currentPage,
    numPages: numPages,
    handleSelect: handleSelect,
    numPagesBeforeEllipsis: numPagesBeforeEllipsis
  }), /*#__PURE__*/_react["default"].createElement(_Item["default"], {
    isArrow: true,
    "data-disabled": currentPage === numPages,
    key: "next"
  }, /*#__PURE__*/_react["default"].createElement("a", {
    onClick: handleNext,
    onKeyPress: (0, _onEnter["default"])(handleNext),
    role: "button",
    "aria-label": "Next page",
    tabIndex: "0"
  }, /*#__PURE__*/_react["default"].createElement(IconChevronRight, {
    size: 24
  }))));
}

Pagination.propTypes = {
  currentPage: _propTypes["default"].number,
  // the current page
  handleSelect: _propTypes["default"].func,
  // the call back to be called when a user clicks on a button
  limit: _propTypes["default"].number,
  // how many items per page
  numPagesBeforeEllipsis: _propTypes["default"].number,
  // numer of pages before we display the ellipsis
  total: _propTypes["default"].number // number of items

};
var _default = Pagination;
exports["default"] = _default;