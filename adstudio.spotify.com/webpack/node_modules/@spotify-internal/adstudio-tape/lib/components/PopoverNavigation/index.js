"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = PopoverNavigation;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _encoreFoundation = require("@spotify-internal/encore-foundation");

var _encoreWeb = require("@spotify-internal/encore-web");

var _PopoverNavigationLink = _interopRequireDefault(require("../PopoverNavigationLink"));

var _positions = _interopRequireDefault(require("../../utils/const/positions"));

var _onEnter = _interopRequireDefault(require("../../utils/helpers/onEnter"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var propTypes = {
  /** the direction in which the arrow should point */
  arrow: _propTypes["default"].oneOf(_positions["default"]).isRequired,

  /** meant for `<PopoverNavigationLink>` */
  children: _propTypes["default"].node,

  /** An html id attribute, necessary for accessibility */

  /** turns on styles meant for small screens */
  isMobile: _propTypes["default"].bool.isRequired,

  /** functionality to close popover */
  onClose: _propTypes["default"].func.isRequired,
  theme: _propTypes["default"].oneOf(['light', 'dark'])
};
var defaultProps = {
  arrow: 'bottom',
  isMobile: false,
  onClose: function onClose() {},
  theme: _encoreWeb.PopoverNavigation.lightTheme
};
var PopoverNavigationOverrides = (0, _styledComponents["default"])(_encoreWeb.PopoverNavigation).withConfig({
  displayName: "PopoverNavigation__PopoverNavigationOverrides",
  componentId: "sc-1g59iio-0"
})(["border-radius:4px;ol,ul{list-style:none !important;margin-inline-start:0 !important;padding-inline-start:0 !important;}&& a:hover{color:", ";outline:none;background-color:transparent;}", ""], _encoreFoundation.gray30, function (props) {
  return props.theme === PopoverNavigationOverrides.darkTheme && "\n    a {\n      color: white;\n    }\n\n    && a:hover {\n      color:".concat(_encoreFoundation.gray80, ";\n    }\n  ");
});

function PopoverNavigation(_ref) {
  var arrow = _ref.arrow,
      isMobile = _ref.isMobile,
      children = _ref.children,
      onClose = _ref.onClose,
      theme = _ref.theme;
  var themeColor = PopoverNavigationOverrides.lightTheme;

  if (theme === 'dark') {
    themeColor = PopoverNavigationOverrides.darkTheme;
  } // a11y note: click handler on the div serves the purpose of eating click events
  // before they get to escapable backdrop, and serve no other purpose.


  return /*#__PURE__*/_react["default"].createElement(_react.Fragment, null, /*#__PURE__*/_react["default"].createElement(PopoverNavigationOverrides, {
    theme: themeColor,
    arrow: arrow,
    onClick: isMobile ? onClose : undefined,
    onKeyPress: isMobile ? (0, _onEnter["default"])(onClose) : undefined
  }, children));
}

PopoverNavigation.propTypes = propTypes;
PopoverNavigation.defaultProps = defaultProps;