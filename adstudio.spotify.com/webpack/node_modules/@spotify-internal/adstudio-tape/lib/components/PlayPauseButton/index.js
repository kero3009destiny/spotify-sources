"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = PlayPauseButton;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _Icons = _interopRequireDefault(require("../Icons"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var IconPause = _Icons["default"].IconPause,
    IconPauseAlt = _Icons["default"].IconPauseAlt,
    IconPlay = _Icons["default"].IconPlay,
    IconPlayAlt = _Icons["default"].IconPlayAlt;
var pulsing = (0, _styledComponents.keyframes)(["0%{transform:scale(1,1);}50%{transform:scale(1.1,1.1);}100%{transform:scale(1,1);}"]);

var PlayPauseButtonBtn = _styledComponents["default"].button.withConfig({
  displayName: "PlayPauseButton__PlayPauseButtonBtn",
  componentId: "sc-12exrww-0"
})(["width:", "px;align-items:center;background:transparent;border:0;cursor:pointer;display:flex;flex-direction:column;font-size:0;justify-content:center;outline:none;padding:0;animation:", ""], function (props) {
  return props.size;
}, function (props) {
  return props.animated ? (0, _styledComponents.css)(["", " infinite 1s ease-out"], pulsing) : 'none';
});

function PlayPauseButton(_ref) {
  var _ref$circle = _ref.circle,
      circle = _ref$circle === void 0 ? false : _ref$circle,
      className = _ref.className,
      iconSize = _ref.iconSize,
      playing = _ref.playing,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 16 : _ref$size,
      _ref$solid = _ref.solid,
      solid = _ref$solid === void 0 ? false : _ref$solid,
      color = _ref.color,
      props = _objectWithoutProperties(_ref, ["circle", "className", "iconSize", "playing", "size", "solid", "color"]);

  var iconSizeLocal = iconSize || size;
  var Icon;

  if (playing) {
    Icon = circle ? IconPauseAlt : IconPause;
  } else {
    Icon = circle ? IconPlayAlt : IconPlay;
  }

  return /*#__PURE__*/_react["default"].createElement(PlayPauseButtonBtn, _extends({
    className: (0, _classnames["default"])('play-pause-button', className),
    type: "button",
    playing: playing,
    size: size,
    "aria-label": playing ? 'Pause' : 'Play'
  }, props), /*#__PURE__*/_react["default"].createElement(Icon, {
    iconSize: iconSizeLocal,
    solid: solid,
    color: color
  }));
}

PlayPauseButton.propTypes = {
  animated: _propTypes["default"].bool,
  circle: _propTypes["default"].bool,
  color: _propTypes["default"].string,
  className: _propTypes["default"].string,
  iconSize: _propTypes["default"].number,
  onClick: _propTypes["default"].func,
  playing: _propTypes["default"].bool.isRequired,
  size: _propTypes["default"].number,
  solid: _propTypes["default"].bool
};