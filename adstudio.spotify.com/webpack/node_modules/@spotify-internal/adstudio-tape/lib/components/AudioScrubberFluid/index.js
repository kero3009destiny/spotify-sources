"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Scrubber = Scrubber;
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _encoreFoundation = require("@spotify-internal/encore-foundation");

var _PlaybackScrubber = _interopRequireDefault(require("../PlaybackScrubber"));

var _PlaybackTimecode = _interopRequireDefault(require("../PlaybackTimecode"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var PlaybackTimecode = (0, _styledComponents["default"])(_PlaybackTimecode["default"]).withConfig({
  displayName: "AudioScrubberFluid__PlaybackTimecode",
  componentId: "sc-1c6sd2d-0"
})(["padding-top:", ";"], _encoreFoundation.spacer4);

var AudioScrubberFluidContainer = _styledComponents["default"].section.withConfig({
  displayName: "AudioScrubberFluid__AudioScrubberFluidContainer",
  componentId: "sc-1c6sd2d-1"
})(["width:100%;"]);

function Scrubber(_ref) {
  var currentTime = _ref.currentTime,
      duration = _ref.duration,
      onSliderChange = _ref.onSliderChange,
      _ref$playingRatio = _ref.playingRatio,
      playingRatio = _ref$playingRatio === void 0 ? 0 : _ref$playingRatio,
      scrubberProps = _ref.scrubberProps,
      theme = _ref.theme,
      props = _objectWithoutProperties(_ref, ["currentTime", "duration", "onSliderChange", "playingRatio", "scrubberProps", "theme"]);

  return /*#__PURE__*/_react["default"].createElement(AudioScrubberFluidContainer, props, /*#__PURE__*/_react["default"].createElement(_PlaybackScrubber["default"], _extends({
    value: playingRatio,
    onChange: onSliderChange,
    fillColorHover: theme.colors.primaryColor
  }, scrubberProps)), /*#__PURE__*/_react["default"].createElement(PlaybackTimecode, {
    startTime: currentTime,
    endTime: duration,
    fillColorHover: theme.colors.primaryColor,
    hideDivider: true
  }));
}

Scrubber.propTypes = {
  className: _propTypes["default"].string,
  currentTime: _propTypes["default"].number,
  duration: _propTypes["default"].number,
  onSliderChange: _propTypes["default"].func,
  playingRatio: _propTypes["default"].number,
  scrubberProps: _propTypes["default"].shape(_PlaybackScrubber["default"].propTypes),
  theme: _propTypes["default"].object
};

var _default = (0, _styledComponents.withTheme)(Scrubber);

exports["default"] = _default;