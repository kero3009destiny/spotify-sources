"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CopySuccessText = CopySuccessText;
exports["default"] = exports.StyledIconLink = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _encoreFoundation = require("@spotify-internal/encore-foundation");

var _TooltipInfo = _interopRequireDefault(require("../TooltipInfo"));

var _Icons = _interopRequireDefault(require("../Icons"));

var _constants = require("./constants");

var _copyToClipboard = _interopRequireDefault(require("../../utils/helpers/copyToClipboard"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var IconCheckAlt = _Icons["default"].IconCheckAlt,
    IconLink = _Icons["default"].IconLink;

var StyledSpan = _styledComponents["default"].span.withConfig({
  displayName: "CopyToClipboard__StyledSpan",
  componentId: "x65cgt-0"
})(["padding-left:", ";vertical-align:middle;"], _encoreFoundation.spacer8);

var StyledIconCheckAlt = (0, _styledComponents["default"])(IconCheckAlt).withConfig({
  displayName: "CopyToClipboard__StyledIconCheckAlt",
  componentId: "x65cgt-1"
})(["color:", ";margin:0;padding:0;vertical-align:middle;"], _encoreFoundation.success);
var StyledIconLink = (0, _styledComponents["default"])(IconLink).withConfig({
  displayName: "CopyToClipboard__StyledIconLink",
  componentId: "x65cgt-2"
})(["color:", ";&:hover{color:", ";}"], _encoreFoundation.gray30, _encoreFoundation.gray20);
exports.StyledIconLink = StyledIconLink;

function CopySuccessText(_ref) {
  var text = _ref.text;
  return /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(StyledIconCheckAlt, null), /*#__PURE__*/_react["default"].createElement(StyledSpan, null, text));
}

CopySuccessText.propTypes = {
  text: _propTypes["default"].string
};
CopySuccessText.defaultProps = {
  text: _constants.COPY_SUCCESS_TEXT
};

var CopyToClipboard = /*#__PURE__*/function (_Component) {
  _inherits(CopyToClipboard, _Component);

  var _super = _createSuper(CopyToClipboard);

  function CopyToClipboard() {
    var _this;

    _classCallCheck(this, CopyToClipboard);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      showCopySuccessText: false
    });

    _defineProperty(_assertThisInitialized(_this), "copyText", function () {
      var text = _this.props.text;
      (0, _copyToClipboard["default"])(text);

      _this.setState({
        showCopySuccessText: true
      });

      _this.forceUpdate();
    });

    _defineProperty(_assertThisInitialized(_this), "hideTooltip", function () {
      _this.setState({
        showCopySuccessText: false
      });
    });

    return _this;
  }

  _createClass(CopyToClipboard, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          copiedToClipboardText = _this$props.copiedToClipboardText,
          copyTooltipText = _this$props.copyTooltipText,
          tooltipProps = _this$props.tooltipProps;
      var showCopySuccessText = this.state.showCopySuccessText;
      return /*#__PURE__*/_react["default"].createElement(_TooltipInfo["default"], _extends({}, tooltipProps, {
        icon: false,
        tooltipText: showCopySuccessText ? /*#__PURE__*/_react["default"].createElement(CopySuccessText, {
          text: copiedToClipboardText
        }) : copyTooltipText,
        onHide: this.hideTooltip
      }), /*#__PURE__*/_react["default"].createElement(StyledIconLink, {
        onClick: this.copyText
      }));
    }
  }]);

  return CopyToClipboard;
}(_react.Component);

exports["default"] = CopyToClipboard;

_defineProperty(CopyToClipboard, "propTypes", {
  tooltipProps: _propTypes["default"].object,
  // eslint-disable-line react/forbid-prop-types
  copiedToClipboardText: _propTypes["default"].string,
  copyTooltipText: _propTypes["default"].string.isRequired,
  text: _propTypes["default"].string.isRequired
});

_defineProperty(CopyToClipboard, "defaultProps", {
  copiedToClipboardText: _constants.COPY_SUCCESS_TEXT,
  copyTooltipText: _constants.COPY_TEXT
});