"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFormattedCardNumber = exports.getCreditCardConfig = void 0;

var _sum2 = _interopRequireDefault(require("lodash/sum"));

var _memoize2 = _interopRequireDefault(require("lodash/memoize"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var getCreditCardConfig = (0, _memoize2["default"])(function (detail) {
  return (0, _get2["default"])(_constants.CREDIT_CARD_CONFIG, (0, _get2["default"])(detail, 'paymentMethod', '').toLowerCase(), _constants.DEFAULT_CARD_CONFIG);
}, function (detail) {
  return JSON.stringify(detail);
});
exports.getCreditCardConfig = getCreditCardConfig;
var getFormattedCardNumber = (0, _memoize2["default"])(function (detail) {
  var _ref = detail || {},
      _ref$cardNumber = _ref.cardNumber,
      cardNumber = _ref$cardNumber === void 0 ? '' : _ref$cardNumber;

  var _getCreditCardConfig = getCreditCardConfig(detail),
      format = _getCreditCardConfig.format;

  if (!cardNumber) {
    return null;
  }

  var cardLength = (0, _sum2["default"])(format);
  var visibleLength = cardNumber ? cardNumber.length : 0;
  var asterisksLength = cardLength - visibleLength;
  var spaceIndices = format.map(function (charCount, idx) {
    return (0, _sum2["default"])(format.slice(0, idx + 1));
  });
  return _toConsumableArray(Array(cardLength)).reduce(function (str, _, idx) {
    var result = str; // add an asterisk until we reach the card number

    if (idx < asterisksLength) {
      result += '*';
    } else {
      result += cardNumber[idx - asterisksLength];
    } // we've reached the end of a set, add a space


    if (idx + 1 < cardLength && spaceIndices.includes(idx + 1)) {
      result += ' ';
    }

    return result;
  }, '');
}, function (detail) {
  return JSON.stringify(detail);
});
exports.getFormattedCardNumber = getFormattedCardNumber;