"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.STATUS_KEYS_OBJ = exports.STATUS_KEYS = exports.UNSUPPORTED_STATUS_VALUE = exports.STATUS = exports.BADGE_TYPES = exports.ENTITY_TYPES = void 0;

var _dictionary = require("../helpers/dictionary");

var ENTITY_TYPES = {
  Ad: 'Ad',
  Campaign: 'Campaign',
  Flight: 'Flight',
  Creative: 'Creative',
  FlightLink: 'FlightLink'
};
exports.ENTITY_TYPES = ENTITY_TYPES;
var BADGE_TYPES = {
  Success: 'success',
  Failure: 'failure',
  Warning: 'warning',
  NeedsAttention: 'needsattention'
};
exports.BADGE_TYPES = BADGE_TYPES;
var STATUS = [// ADGEN STATUSES
{
  key: 'pending_approval',
  value: 'Pending approval',
  entityType: ENTITY_TYPES.Ad,
  desc: 'Your ad is being reviewed for approval by the Spotify ads team.'
}, {
  key: 'rejected',
  value: 'Rejected',
  entityType: ENTITY_TYPES.Ad,
  badgeType: BADGE_TYPES.Failure,
  desc: 'Your ad has been rejected for reasons detailed in an email sent to you. If you would like to run a rejected ad, please rebuild another compliant ad. Alternatively, if you rejected a voiceover, the ad will also display as a rejected ad.'
}, {
  key: 'stopped',
  value: 'Stopped',
  entityType: ENTITY_TYPES.Ad,
  desc: 'You stopped the ad before its scheduled end date.'
}, {
  key: 'stopping',
  value: 'Stopping',
  entityType: ENTITY_TYPES.Ad,
  desc: 'Ad is in the process of stopping.'
}, {
  key: 'editing',
  value: 'Editing',
  entityType: ENTITY_TYPES.Ad,
  desc: 'Ad is in the process of being edited.'
}, {
  key: 'active',
  value: 'Active',
  entityType: ENTITY_TYPES.Ad,
  badgeType: BADGE_TYPES.Success,
  desc: 'Your ad is live. Our ad server will deliver your ad to your available selected audience.'
}, {
  key: 'ready',
  value: 'Ready',
  entityType: ENTITY_TYPES.Ad,
  desc: 'Your ad has been approved and will go live according to your selected start date.'
}, {
  key: 'review_audio',
  value: 'Awaiting Review',
  entityType: ENTITY_TYPES.Ad,
  desc: 'Your requested voiceover is ready for your review. In the “Review” state, you can approve the voiceover or request revisions. If you uploaded your own audio voiceover, your ad will not pass through this state.'
}, {
  key: 'complete',
  value: 'Complete',
  entityType: ENTITY_TYPES.Ad,
  desc: 'Your ad is no longer delivering. Final metrics may not be updated until the next day.'
}, {
  key: 'processing',
  value: 'Processing',
  entityType: ENTITY_TYPES.Ad,
  desc: 'Your audio ad is being mixed. If you requested a voiceover, it will move into "Review" after it is done processing. If you uploaded your own audio voiceover, it will move into "Pending Approval" after it is done processing.'
}, {
  key: 'pausing',
  value: 'Pausing',
  entityType: ENTITY_TYPES.Ad,
  desc: 'Ad is in the process of pausing.'
}, {
  key: 'paused',
  value: 'Paused',
  entityType: ENTITY_TYPES.Ad,
  desc: 'This ad is paused because you requested to pause it while it was delivering, or before it went live.'
}, {
  key: 'resuming',
  value: 'Resuming',
  entityType: ENTITY_TYPES.Ad,
  desc: 'Ad is in the process of resuming.'
}, // CAMPAIGN STATUSES
{
  key: 'ACTIVE',
  value: 'Active',
  badgeType: BADGE_TYPES.Success,
  entityType: ENTITY_TYPES.Campaign
}, {
  key: 'PAUSED',
  value: 'Paused',
  entityType: ENTITY_TYPES.Campaign
}, {
  key: 'UNSET',
  value: 'Unset',
  entityType: ENTITY_TYPES.Campaign
}, {
  key: 'CANCELLED',
  value: 'Cancelled',
  entityType: ENTITY_TYPES.Campaign
}, {
  key: 'ARCHIVED',
  value: 'Archived',
  entityType: ENTITY_TYPES.Campaign
}, // FLIGHT STATUSES
{
  key: 'ACTIVE',
  value: 'Active',
  badgeType: BADGE_TYPES.Success,
  entityType: ENTITY_TYPES.Flight
}, {
  key: 'APPROVED',
  value: 'Approved',
  badgeType: BADGE_TYPES.Success,
  entityType: ENTITY_TYPES.Flight
}, {
  key: 'READY',
  value: 'Ready',
  entityType: ENTITY_TYPES.Flight
}, {
  key: 'COMPLETED',
  value: 'Completed',
  entityType: ENTITY_TYPES.Flight
}, {
  key: 'CANCELLED',
  value: 'Cancelled',
  entityType: ENTITY_TYPES.Flight
}, {
  key: 'PENDING_APPROVAL',
  value: 'Pending',
  badgeType: BADGE_TYPES.NeedsAttention,
  entityType: ENTITY_TYPES.Flight
}, {
  key: 'REJECTED',
  value: 'Rejected',
  badgeType: BADGE_TYPES.Failure,
  entityType: ENTITY_TYPES.Flight
}, {
  key: 'ARCHIVED',
  value: 'Archived',
  entityType: ENTITY_TYPES.Flight
}, {
  key: 'UNSET_STATUS',
  value: 'Unset',
  entityType: ENTITY_TYPES.Flight
}, // CREATIVE STATUSES
{
  key: 'UNSET_STATUS',
  value: 'Unset',
  entityType: ENTITY_TYPES.Creative
}, {
  key: 'INACTIVE',
  value: 'Inactive',
  entityType: ENTITY_TYPES.Creative
}, {
  key: 'ACTIVE',
  value: 'Active',
  badgeType: BADGE_TYPES.Success,
  entityType: ENTITY_TYPES.Creative
}, {
  key: 'APPROVED',
  value: 'Approved',
  badgeType: BADGE_TYPES.Success,
  entityType: ENTITY_TYPES.Creative
}, {
  key: 'ARCHIVED',
  value: 'Archived',
  entityType: ENTITY_TYPES.Creative
}, {
  key: 'PENDING',
  value: 'Processing',
  entityType: ENTITY_TYPES.Creative
}, {
  key: 'PENDING_APPROVAL',
  value: 'Pending',
  badgeType: BADGE_TYPES.NeedsAttention,
  entityType: ENTITY_TYPES.Creative
}, {
  key: 'REJECTED',
  value: 'Rejected',
  badgeType: BADGE_TYPES.Failure,
  entityType: ENTITY_TYPES.Creative
}, {
  key: 'UNSET_STATUS',
  value: 'Unset',
  entityType: ENTITY_TYPES.FlightLink
}, {
  key: 'ACTIVE',
  value: 'Active',
  badgeType: BADGE_TYPES.Success,
  entityType: ENTITY_TYPES.FlightLink
}, {
  key: 'REJECTED',
  value: 'Rejected',
  badgeType: BADGE_TYPES.Failure,
  entityType: ENTITY_TYPES.FlightLink
}, {
  key: 'APPROVED',
  value: 'Approved',
  badgeType: BADGE_TYPES.Success,
  entityType: ENTITY_TYPES.FlightLink
}, {
  key: 'PENDING_APPROVAL',
  value: 'Pending',
  badgeType: BADGE_TYPES.NeedsAttention,
  entityType: ENTITY_TYPES.FlightLink
}, {
  key: 'REQUIRES_REAPPROVAL',
  value: 'Pending',
  badgeType: BADGE_TYPES.NeedsAttention,
  entityType: ENTITY_TYPES.FlightLink
}];
exports.STATUS = STATUS;
var UNSUPPORTED_STATUS_VALUE = 'Unknown';
exports.UNSUPPORTED_STATUS_VALUE = UNSUPPORTED_STATUS_VALUE;
var STATUS_KEYS = (0, _dictionary.getAllKeys)(STATUS);
exports.STATUS_KEYS = STATUS_KEYS;
var STATUS_KEYS_OBJ = (0, _dictionary.getAllKeysAsObject)(STATUS);
exports.STATUS_KEYS_OBJ = STATUS_KEYS_OBJ;