import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React from 'react';
import { black, gray10, gray15, gray20, gray30, gray50, gray70, gray90, gray95, spacer4, spacer8, white } from '@spotify-internal/encore-foundation';
import styled, { css } from 'styled-components';
import { focusBorderUsingProp, focusGapBorder, rootStyle, typeStyleCta4 } from "../../styles/mixins";
import { getActiveColor, getActiveTextColor, getHoverColor, getSelectedColor, getTextColor } from "../../styles/theme";

var isDarkTheme = function isDarkTheme(theme) {
  return theme.tag === 'dark';
};

var defaultBgColor = function defaultBgColor(theme) {
  return isDarkTheme(theme) ? gray20 : gray90;
};

var defaultColor = function defaultColor(theme) {
  return isDarkTheme(theme) ? white : black;
};

var defaultHoverBgColor = function defaultHoverBgColor(theme) {
  return isDarkTheme(theme) ? gray30 : gray95;
};

var hoverBgColor = function hoverBgColor(theme, color) {
  return color ? getHoverColor(color) : defaultHoverBgColor(theme);
};

var activeStyles = function activeStyles(theme, color) {
  var defaultActiveBgColor = isDarkTheme(theme) ? gray15 : gray50;
  var defaultActiveColor = isDarkTheme(theme) ? gray70 : gray15;
  var defaultActiveHoverColor = isDarkTheme(theme) ? white : black;
  return "\n    background-color: ".concat(color ? getActiveColor(color) : defaultActiveBgColor, ";\n    color: ").concat(color ? getActiveTextColor(color) : defaultActiveColor, ";\n    &:hover {\n      color: ").concat(color ? getTextColor(color) : defaultActiveHoverColor, ";\n    }\n  ");
};

var selectedStyles = function selectedStyles(theme, color) {
  var defaultSelectedBgColor = isDarkTheme(theme) ? gray10 : gray30;
  var defaultSelectedColor = isDarkTheme(theme) ? white : gray90;
  var defaultSelectedHoverColor = isDarkTheme(theme) ? white : black;
  return "\n    background-color: ".concat(color ? getSelectedColor(color) : defaultSelectedBgColor, ";\n    color: ").concat(color ? white : defaultSelectedColor, ";\n    &:hover {\n      color: ").concat(color ? getTextColor(color) : defaultSelectedHoverColor, ";\n    }\n  ");
};

export var TagElement = styled(function (_ref) {
  var _ref$component = _ref.component,
      Component = _ref$component === void 0 ? 'span' : _ref$component,
      active = _ref.active,
      focus = _ref.focus,
      hover = _ref.hover,
      isUsingKeyboard = _ref.isUsingKeyboard,
      props = _objectWithoutProperties(_ref, ["component", "active", "focus", "hover", "isUsingKeyboard"]);

  return /*#__PURE__*/React.createElement(Component, props);
}).withConfig({
  displayName: "Tag__TagElement",
  componentId: "sc-181p4zo-0"
})(["", ";", ";background-color:", ";color:", ";border-radius:", ";padding-right:", ";padding-bottom:", ";padding-top:", ";padding-left:", ";transition:box-shadow 0.2s,transform 0.2s;cursor:", ";&:not(:last-child){margin-right:", ";}&&&{display:inline-block;&[href]{text-decoration:none;color:", ";}&[href]:focus,&[href]:hover:not([disabled]):not(:focus){color:", ";", ";}}&[disabled]{opacity:0.5;}&:active{", ";}&:hover:not(:focus):not([disabled]):not(:active){", ";}", ";", ";", ";", ";", ";"], rootStyle(), typeStyleCta4(), function (_ref2) {
  var color = _ref2.color,
      theme = _ref2.theme;
  return color || defaultBgColor(theme);
}, function (_ref3) {
  var color = _ref3.color,
      theme = _ref3.theme;
  return color ? getTextColor(color) : defaultColor(theme);
}, spacer4, spacer8, spacer4, spacer4, spacer8, function (_ref4) {
  var href = _ref4.href,
      onClick = _ref4.onClick;
  return (href || onClick) && 'default';
}, spacer8, black, black, function (_ref5) {
  var focus = _ref5.focus;
  return !focus && css(["text-decoration:none;box-shadow:none;"]);
}, function (_ref6) {
  var color = _ref6.color,
      theme = _ref6.theme;
  return activeStyles(theme, color);
}, function (_ref7) {
  var focus = _ref7.focus,
      color = _ref7.color,
      theme = _ref7.theme;
  return !focus && css(["background-color:", ";"], hoverBgColor(theme, color));
}, function (_ref8) {
  var hover = _ref8.hover,
      color = _ref8.color,
      theme = _ref8.theme;
  return hover && css(["background-color:", ";"], hoverBgColor(theme, color));
}, function (_ref9) {
  var selected = _ref9.selected,
      color = _ref9.color,
      theme = _ref9.theme;
  return selected && css(["", ";"], selectedStyles(theme, color));
}, function (_ref10) {
  var active = _ref10.active,
      color = _ref10.color,
      theme = _ref10.theme;
  return active && css(["", ";"], activeStyles(theme, color));
}, function (_ref11) {
  var isUsingKeyboard = _ref11.isUsingKeyboard,
      theme = _ref11.theme;
  return isUsingKeyboard && focusGapBorder(isDarkTheme(theme), spacer8);
}, function (_ref12) {
  var isUsingKeyboard = _ref12.isUsingKeyboard,
      focus = _ref12.focus,
      theme = _ref12.theme;
  return isUsingKeyboard && focus && focusBorderUsingProp(isDarkTheme(theme));
});