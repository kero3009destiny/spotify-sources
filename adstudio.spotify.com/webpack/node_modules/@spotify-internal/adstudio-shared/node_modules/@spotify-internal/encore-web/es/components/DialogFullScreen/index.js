import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React, { useEffect } from 'react';
import { ThemeProvider } from 'styled-components';
import { IconX } from "../Icon/IconX";
import { Body } from "./Body";
import { BodyTitle } from "./BodyTitle";
import { CloseButton } from "./CloseButton";
import { Container } from "./Container";
import { Footer } from "./Footer";
import { FooterNav } from "./FooterNav";
import { Header } from "./Header";
import { HeaderNav } from "./HeaderNav";
import { HeaderTitle } from "./HeaderTitle";
var DialogFullScreenComponent = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var banner = _ref.banner,
      body = _ref.body,
      bodyProps = _ref.bodyProps,
      bodyStyle = _ref.bodyStyle,
      bodyTitle = _ref.bodyTitle,
      dialogTitle = _ref.dialogTitle,
      footer = _ref.footer,
      navStepper = _ref.navStepper,
      onClose = _ref.onClose,
      onEscape = _ref.onEscape,
      _ref$theme = _ref.theme,
      theme = _ref$theme === void 0 ? {} : _ref$theme,
      props = _objectWithoutProperties(_ref, ["banner", "body", "bodyProps", "bodyStyle", "bodyTitle", "dialogTitle", "footer", "navStepper", "onClose", "onEscape", "theme"]);

  useEffect(function () {
    var onKeydown = function onKeydown(event) {
      if (event.keyCode === 27 && onEscape) {
        onEscape(event);
      }
    };

    window.addEventListener('keydown', onKeydown, true);
    return function cleanup() {
      window.removeEventListener('keydown', onKeydown, true);
    };
  });
  return /*#__PURE__*/React.createElement(ThemeProvider, {
    theme: theme
  }, /*#__PURE__*/React.createElement(Container, Object.assign({
    ref: ref
  }, props), banner, dialogTitle && /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(HeaderTitle, null, dialogTitle), navStepper && /*#__PURE__*/React.createElement(HeaderNav, null, navStepper), onClose && /*#__PURE__*/React.createElement(CloseButton, {
    onClick: onClose,
    "aria-label": "Close"
  }, /*#__PURE__*/React.createElement(IconX, {
    "aria-hidden": "true"
  }))), /*#__PURE__*/React.createElement(Body, Object.assign({
    style: bodyStyle
  }, bodyProps), bodyTitle && /*#__PURE__*/React.createElement(BodyTitle, null, bodyTitle), body), /*#__PURE__*/React.createElement(Footer, null, navStepper && /*#__PURE__*/React.createElement(FooterNav, null, navStepper), footer)));
});
var dialogFullScreenHelpers = {
  darkTheme: {
    dialogFullScreen: 'dark'
  }
};
/**
* **DialogFullScreen** ![Status: Production](https://img.shields.io/badge/PRODUCTION-%2357B560|height=14)
*
* [GitHub](https://ghe.spotify.net/encore/web/tree/master/src/components/DialogFullScreen) | [Storybook](https://encore-web.spotify.net/?path=/story/components-dialog-dialogfullscreen--default) | [Encore](https://encore.spotify.net/web/components/dialog?format=figma-figma#dialogfullscreen) | [Figma](https://www.figma.com/file/bnQXqGkLeiTlbk8JXGDcsX/Encore-Web---Light-Theme-Toolkit?node-id=0:1223) |
*
* DialogFullScreen is a fullscreen view and is used when there's a lot of information or several steps within one Dialog.
*
* @example
* export const Default = () => (
*  <DialogFullScreen
*    onClose={() => {}}
*    dialogTitle="Dialog Title"
*    bodyTitle="Body Title"
*    body={
*      <Type as="p" style={{ textAlign: 'center' }}>
*        Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.
*      </Type>
*    }
*    footer={
*      <div>
*        <ButtonTertiary buttonSize={ButtonTertiary.sm} condensed>
*          Button
*        </ButtonTertiary>
*        <ButtonPrimary buttonSize={ButtonTertiary.sm}>Button</ButtonPrimary>
*      </div>
*    }
*  />
*);
*
*/

export var DialogFullScreen = Object.assign(DialogFullScreenComponent, dialogFullScreenHelpers);
export default DialogFullScreen;