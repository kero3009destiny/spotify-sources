import { breakpoint, type } from '@spotify-internal/encore-foundation';
import { type as desktopType } from '@spotify-internal/encore-foundation/desktop';
import { type as mobileType } from '@spotify-internal/encore-foundation/mobile';
import { css } from 'styled-components';
export var typeStyleDisplay1 = function typeStyleDisplay1() {
  return css(["font-size:", ";font-weight:", ";letter-spacing:", ";line-height:", ";padding-bottom:", ";@media (min-width:", "){font-size:", ";line-height:", ";letter-spacing:", ";}@media (min-width:", "){font-size:", ";line-height:", ";}"], type.display1FontSizeXSmall, type.display1FontWeightXSmall, type.display1LetterSpacingXSmall, type.display1LineHeightXSmall, type.display1PaddingBottomXSmall, breakpoint.screenSmMin, type.display1FontSizeSmall, type.display1LineHeightSmall, type.display1LetterSpacingSmall, breakpoint.screenMdMin, type.display1FontSize, type.display1LineHeight);
};
export var typeStyleDisplay2 = function typeStyleDisplay2() {
  return css(["font-size:", ";font-weight:", ";letter-spacing:", ";line-height:", ";padding-bottom:", ";@media (min-width:", "){font-size:", ";line-height:", ";letter-spacing:", ";}@media (min-width:", "){font-size:", ";line-height:", ";}"], type.display2FontSizeXSmall, type.display2FontWeightXSmall, type.display2LetterSpacingXSmall, type.display2LineHeightXSmall, type.display2PaddingBottomXSmall, breakpoint.screenSmMin, type.display2FontSizeSmall, type.display2LineHeightSmall, type.display2LetterSpacingSmall, breakpoint.screenMdMin, type.display2FontSize, type.display2LineHeight);
};
export var typeStyleH1 = function typeStyleH1() {
  return css(["font-size:", ";font-weight:", ";letter-spacing:", ";line-height:", ";padding-bottom:", ";@media (min-width:", "){font-size:", ";line-height:", ";}@media (min-width:", "){font-size:", ";line-height:", ";}"], type.heading1FontSizeXSmall, type.heading1FontWeightXSmall, type.heading1LetterSpacingXSmall, type.heading1LineHeightXSmall, type.heading1PaddingBottomXSmall, breakpoint.screenSmMin, type.heading1FontSizeSmall, type.heading1LineHeightSmall, breakpoint.screenMdMin, type.heading1FontSize, type.heading1LineHeight);
};
export var typeStyleH2 = function typeStyleH2() {
  return css(["font-size:", ";font-weight:", ";letter-spacing:", ";line-height:", ";padding-bottom:", ";@media (min-width:", "){font-size:", ";line-height:", ";letter-spacing:", ";}"], type.heading2FontSizeSmall, type.heading2FontWeightSmall, type.heading2LetterSpacingSmall, type.heading2LineHeightSmall, type.heading2PaddingBottomSmall, breakpoint.screenSmMin, type.heading2FontSize, type.heading2LineHeight, type.heading2LetterSpacing);
};
export var typeStyleH3 = function typeStyleH3() {
  return css(["font-size:", ";font-weight:", ";line-height:", ";letter-spacing:", ";@media (min-width:", "){font-size:", ";line-height:", ";}"], type.heading3FontSizeSmall, type.heading3FontWeightSmall, type.heading3LineHeightSmall, type.heading3LetterSpacingSmall, breakpoint.screenSmMin, type.heading3FontSize, type.heading3LineHeight);
};
export var typeStyleH4 = function typeStyleH4() {
  return css(["font-size:", ";font-weight:", ";line-height:", ";letter-spacing:", ";"], type.heading4FontSize, type.heading4FontWeight, type.heading4LineHeight, type.heading4LetterSpacing);
};
export var typeStyleBody1 = function typeStyleBody1() {
  return css(["font-size:", ";font-weight:", ";line-height:", ";letter-spacing:", ";"], type.body1FontSize, type.body1FontWeight, type.body1LineHeight, type.body1LetterSpacing);
};
export var typeStyleBody2 = function typeStyleBody2() {
  return css(["font-size:", ";font-weight:", ";line-height:", ";letter-spacing:", ";"], type.body2FontSize, type.body2FontWeight, type.body2LineHeight, type.body2LetterSpacing);
};
export var typeStyleBody3 = function typeStyleBody3() {
  return css(["font-size:", ";font-weight:", ";line-height:", ";letter-spacing:", ";"], type.body3FontSize, type.body3FontWeight, type.body3LineHeight, type.body3LetterSpacing);
};
export var typeStyleBody4 = function typeStyleBody4() {
  return css(["font-size:", ";font-weight:", ";line-height:", ";letter-spacing:", ";"], type.body4FontSize, type.body4FontWeight, type.body4LineHeight, type.body4LetterSpacing);
};
export var typeStyleCta1 = function typeStyleCta1() {
  return css(["font-size:", ";font-weight:", ";letter-spacing:", ";line-height:", ";text-transform:", ";"], type.cta1FontSize, type.cta1FontWeight, type.cta1LetterSpacing, type.cta1LineHeight, type.cta1Uppercase);
};
export var typeStyleCta2 = function typeStyleCta2() {
  return css(["font-size:", ";font-weight:", ";letter-spacing:", ";line-height:", ";text-transform:", ";"], type.cta2FontSize, type.cta2FontWeight, type.cta2LetterSpacing, type.cta2LineHeight, type.cta2Uppercase);
};
export var typeStyleCta3 = function typeStyleCta3() {
  return css(["font-size:", ";font-weight:", ";letter-spacing:", ";line-height:", ";text-transform:", ";"], type.cta3FontSize, type.cta3FontWeight, type.cta3LetterSpacing, type.cta3LineHeight, type.cta3Uppercase);
};
export var typeStyleCta4 = function typeStyleCta4() {
  return css(["font-size:", ";font-weight:", ";letter-spacing:", ";line-height:", ";text-transform:", ";"], type.cta4FontSize, type.cta4FontWeight, type.cta4LetterSpacing, type.cta4LineHeight, type.cta4Uppercase);
}; //
// Experimental Type
// --------------------------------------------------------------

var sharedFontMixin = function sharedFontMixin() {
  return css(["[lang='ar'] &{letter-spacing:initial;line-height:$line-height * 1.5;}"]);
};

var pxToRem = function pxToRem(value) {
  var BASE_FONT_SIZE = 16;
  return "".concat(parseFloat(value) / BASE_FONT_SIZE, "rem");
};

export var bass = function bass() {
  var pxLegacy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return css(["", ";@media (max-width:", "){font-size:", ";font-weight:", ";line-height:", ";letter-spacing:", ";}@media (min-width:", "){font-size:", ";font-weight:", ";line-height:", ";letter-spacing:", ";text-transform:", ";}"], sharedFontMixin(), breakpoint.screenXsMax, pxLegacy ? mobileType.bassFontSize : pxToRem(mobileType.bassFontSize), mobileType.bassWeight, pxLegacy ? mobileType.bassLineHeight : pxToRem(mobileType.bassLineHeight), mobileType.bassTracking, breakpoint.screenSmMin, pxLegacy ? desktopType.bassFontSize : pxToRem(desktopType.bassFontSize), desktopType.bassWeight, pxLegacy ? desktopType.bassLineHeight : pxToRem(desktopType.bassLineHeight), desktopType.bassTracking, desktopType.bassUppercase);
};
export var forte = function forte() {
  var pxLegacy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return css(["", ";@media (max-width:", "){font-size:", ";font-weight:", ";line-height:", ";letter-spacing:", ";}@media (min-width:", "){font-size:", ";font-weight:", ";line-height:", ";letter-spacing:", ";text-transform:", ";}"], sharedFontMixin(), breakpoint.screenXsMax, pxLegacy ? mobileType.forteFontSize : pxToRem(mobileType.forteFontSize), mobileType.forteWeight, pxLegacy ? mobileType.forteLineHeight : pxToRem(mobileType.forteLineHeight), mobileType.forteTracking, breakpoint.screenSmMin, pxLegacy ? desktopType.forteFontSize : pxToRem(desktopType.forteFontSize), desktopType.forteWeight, pxLegacy ? desktopType.forteLineHeight : pxToRem(desktopType.forteLineHeight), desktopType.forteTracking, desktopType.forteUppercase);
};
export var brio = function brio() {
  var pxLegacy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return css(["", ";@media (max-width:", "){font-size:", ";font-weight:", ";line-height:", ";letter-spacing:", ";}@media (min-width:", "){font-size:", ";font-weight:", ";line-height:", ";letter-spacing:", ";text-transform:", ";}"], sharedFontMixin(), breakpoint.screenXsMax, pxLegacy ? mobileType.brioFontSize : pxToRem(mobileType.brioFontSize), mobileType.brioWeight, pxLegacy ? mobileType.brioLineHeight : pxToRem(mobileType.brioLineHeight), mobileType.brioTracking, breakpoint.screenSmMin, pxLegacy ? desktopType.brioFontSize : pxToRem(desktopType.brioFontSize), desktopType.brioWeight, pxLegacy ? desktopType.brioLineHeight : pxToRem(desktopType.brioLineHeight), desktopType.brioTracking, desktopType.brioUppercase);
};
export var alto = function alto() {
  var pxLegacy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return css(["", ";@media (max-width:", "){font-size:", ";font-weight:", ";line-height:", ";letter-spacing:", ";}@media (min-width:", "){font-size:", ";font-weight:", ";line-height:", ";letter-spacing:", ";text-transform:", ";}"], sharedFontMixin(), breakpoint.screenXsMax, pxLegacy ? mobileType.altoFontSize : pxToRem(mobileType.altoFontSize), mobileType.altoWeight, pxLegacy ? mobileType.altoLineHeight : pxToRem(mobileType.altoLineHeight), mobileType.altoTracking, breakpoint.screenSmMin, pxLegacy ? desktopType.altoFontSize : pxToRem(desktopType.altoFontSize), desktopType.altoWeight, pxLegacy ? desktopType.altoLineHeight : pxToRem(desktopType.altoLineHeight), desktopType.altoTracking, desktopType.altoUppercase);
};
export var canon = function canon() {
  var pxLegacy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return css(["", ";@media (max-width:", "){font-size:", ";font-weight:", ";line-height:", ";letter-spacing:", ";}@media (min-width:", "){font-size:", ";font-weight:", ";line-height:", ";letter-spacing:", ";text-transform:", ";}"], sharedFontMixin(), breakpoint.screenXsMax, pxLegacy ? mobileType.canonFontSize : pxToRem(mobileType.canonFontSize), mobileType.canonWeight, pxLegacy ? mobileType.canonLineHeight : pxToRem(mobileType.canonLineHeight), mobileType.canonTracking, breakpoint.screenSmMin, pxLegacy ? desktopType.canonFontSize : pxToRem(desktopType.canonFontSize), desktopType.canonWeight, pxLegacy ? desktopType.canonLineHeight : pxToRem(desktopType.canonLineHeight), desktopType.canonTracking, desktopType.canonUppercase);
};
export var cello = function cello() {
  var pxLegacy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return css(["", ";@media (max-width:", "){font-size:", ";font-weight:", ";line-height:", ";}@media (min-width:", "){font-size:", ";font-weight:", ";line-height:", ";letter-spacing:", ";text-transform:", ";}"], sharedFontMixin(), breakpoint.screenXsMax, pxLegacy ? mobileType.celloFontSize : pxToRem(mobileType.celloFontSize), mobileType.celloWeight, pxLegacy ? mobileType.celloLineHeight : pxToRem(mobileType.celloLineHeight), breakpoint.screenSmMin, pxLegacy ? desktopType.celloFontSize : pxToRem(desktopType.celloFontSize), desktopType.celloWeight, pxLegacy ? desktopType.celloLineHeight : pxToRem(desktopType.celloLineHeight), desktopType.celloTracking, desktopType.celloUppercase);
};
export var ballad = function ballad() {
  var pxLegacy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return css(["", ";@media (max-width:", "){font-size:", ";font-weight:", ";line-height:", ";}@media (min-width:", "){font-size:", ";font-weight:", ";line-height:", ";letter-spacing:", ";text-transform:", ";}"], sharedFontMixin(), breakpoint.screenXsMax, pxLegacy ? mobileType.balladFontSize : pxToRem(mobileType.balladFontSize), mobileType.balladWeight, pxLegacy ? mobileType.balladLineHeight : pxToRem(mobileType.balladLineHeight), breakpoint.screenSmMin, pxLegacy ? desktopType.balladFontSize : pxToRem(desktopType.balladFontSize), desktopType.balladWeight, pxLegacy ? desktopType.balladLineHeight : pxToRem(desktopType.balladLineHeight), desktopType.balladTracking, desktopType.balladUppercase);
};
export var balladBold = function balladBold() {
  var pxLegacy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return css(["", ";@media (max-width:", "){font-size:", ";font-weight:", ";line-height:", ";}@media (min-width:", "){font-size:", ";font-weight:", ";line-height:", ";letter-spacing:", ";text-transform:", ";}"], sharedFontMixin(), breakpoint.screenXsMax, pxLegacy ? mobileType.balladBoldFontSize : pxToRem(mobileType.balladBoldFontSize), mobileType.balladBoldWeight, pxLegacy ? mobileType.balladBoldLineHeight : pxToRem(mobileType.balladBoldLineHeight), breakpoint.screenSmMin, pxLegacy ? desktopType.balladBoldFontSize : pxToRem(desktopType.balladBoldFontSize), desktopType.balladBoldWeight, pxLegacy ? desktopType.balladBoldLineHeight : pxToRem(desktopType.balladBoldLineHeight), desktopType.balladBoldTracking, desktopType.balladBoldUppercase);
};
export var mesto = function mesto() {
  var pxLegacy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return css(["", ";@media (max-width:", "){font-size:", ";font-weight:", ";line-height:", ";}@media (min-width:", "){font-size:", ";font-weight:", ";line-height:", ";letter-spacing:", ";text-transform:", ";}"], sharedFontMixin(), breakpoint.screenXsMax, pxLegacy ? mobileType.mestoFontSize : pxToRem(mobileType.mestoFontSize), mobileType.mestoWeight, pxLegacy ? mobileType.mestoLineHeight : pxToRem(mobileType.mestoLineHeight), breakpoint.screenSmMin, pxLegacy ? desktopType.mestoFontSize : pxToRem(desktopType.mestoFontSize), desktopType.mestoWeight, pxLegacy ? desktopType.mestoLineHeight : pxToRem(desktopType.mestoLineHeight), desktopType.mestoTracking, desktopType.mestoUppercase);
};
export var mestoBold = function mestoBold() {
  var pxLegacy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return css(["", ";@media (max-width:", "){font-size:", ";font-weight:", ";line-height:", ";}@media (min-width:", "){font-size:", ";font-weight:", ";line-height:", ";letter-spacing:", ";text-transform:", ";}"], sharedFontMixin(), breakpoint.screenXsMax, pxLegacy ? mobileType.mestoBoldFontSize : pxToRem(mobileType.mestoBoldFontSize), mobileType.mestoBoldWeight, pxLegacy ? mobileType.mestoBoldLineHeight : pxToRem(mobileType.mestoBoldLineHeight), breakpoint.screenSmMin, pxLegacy ? desktopType.mestoBoldFontSize : pxToRem(desktopType.mestoBoldFontSize), desktopType.mestoBoldWeight, pxLegacy ? desktopType.mestoBoldLineHeight : pxToRem(desktopType.mestoBoldLineHeight), desktopType.mestoBoldTracking, desktopType.mestoBoldUppercase);
};
export var metronome = function metronome() {
  var pxLegacy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return css(["", ";@media (max-width:", "){font-size:", ";font-weight:", ";line-height:", ";letter-spacing:", ";text-transform:", ";}@media (min-width:", "){font-size:", ";font-weight:", ";line-height:", ";letter-spacing:", ";text-transform:", ";}"], sharedFontMixin(), breakpoint.screenXsMax, pxLegacy ? mobileType.metronomeFontSize : pxToRem(mobileType.metronomeFontSize), mobileType.metronomeWeight, pxLegacy ? mobileType.metronomeLineHeight : pxToRem(mobileType.metronomeLineHeight), mobileType.metronomeTracking, mobileType.metronomeUppercase, breakpoint.screenSmMin, pxLegacy ? desktopType.metronomeFontSize : pxToRem(desktopType.metronomeFontSize), desktopType.metronomeWeight, pxLegacy ? desktopType.metronomeLineHeight : pxToRem(desktopType.metronomeLineHeight), desktopType.metronomeTracking, desktopType.metronomeUppercase);
};
export var finale = function finale() {
  var pxLegacy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return css(["", ";@media (max-width:", "){font-size:", ";font-weight:", ";line-height:", ";}@media (min-width:", "){font-size:", ";font-weight:", ";line-height:", ";letter-spacing:", ";text-transform:", ";}"], sharedFontMixin(), breakpoint.screenXsMax, pxLegacy ? mobileType.finaleFontSize : pxToRem(mobileType.finaleFontSize), mobileType.finaleWeight, pxLegacy ? mobileType.finaleLineHeight : pxToRem(mobileType.finaleLineHeight), breakpoint.screenSmMin, pxLegacy ? desktopType.finaleFontSize : pxToRem(desktopType.finaleFontSize), desktopType.finaleWeight, pxLegacy ? desktopType.finaleLineHeight : pxToRem(desktopType.finaleLineHeight), desktopType.finaleTracking, desktopType.finaleUppercase);
};
export var finaleBold = function finaleBold() {
  var pxLegacy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return css(["", ";@media (max-width:", "){font-size:", ";font-weight:", ";line-height:", ";}@media (min-width:", "){font-size:", ";font-weight:", ";line-height:", ";letter-spacing:", ";text-transform:", ";}"], sharedFontMixin(), breakpoint.screenXsMax, pxLegacy ? mobileType.finaleFontSize : pxToRem(mobileType.finaleFontSize), mobileType.finaleWeight, pxLegacy ? mobileType.finaleLineHeight : pxToRem(mobileType.finaleLineHeight), breakpoint.screenSmMin, pxLegacy ? desktopType.finaleBoldFontSize : pxToRem(desktopType.finaleBoldFontSize), desktopType.finaleBoldWeight, pxLegacy ? desktopType.finaleBoldLineHeight : pxToRem(desktopType.finaleBoldLineHeight), desktopType.finaleBoldTracking, desktopType.finaleBoldUppercase);
};
export var minuet = function minuet() {
  var pxLegacy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return css(["", ";@media (max-width:", "){font-size:", ";font-weight:", ";line-height:", ";letter-spacing:", ";text-transform:", ";}@media (min-width:", "){font-size:", ";font-weight:", ";line-height:", ";letter-spacing:", ";text-transform:", ";}"], sharedFontMixin(), breakpoint.screenXsMax, pxLegacy ? mobileType.minuetFontSize : pxToRem(mobileType.minuetFontSize), mobileType.minuetWeight, pxLegacy ? mobileType.minuetLineHeight : pxToRem(mobileType.minuetLineHeight), mobileType.minuetTracking, mobileType.minuetUppercase, breakpoint.screenSmMin, pxLegacy ? desktopType.minuetFontSize : pxToRem(desktopType.minuetFontSize), desktopType.minuetWeight, pxLegacy ? desktopType.minuetLineHeight : pxToRem(desktopType.minuetLineHeight), desktopType.minuetTracking, desktopType.minuetUppercase);
};
export var minuetBold = function minuetBold() {
  var pxLegacy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return css(["", ";@media (max-width:", "){font-size:", ";font-weight:", ";line-height:", ";letter-spacing:", ";text-transform:", ";}@media (min-width:", "){font-size:", ";font-weight:", ";line-height:", ";letter-spacing:", ";text-transform:", ";}"], sharedFontMixin(), breakpoint.screenXsMax, pxLegacy ? mobileType.minuetBoldFontSize : pxToRem(mobileType.minuetBoldFontSize), mobileType.minuetBoldWeight, pxLegacy ? mobileType.minuetBoldLineHeight : pxToRem(mobileType.minuetBoldLineHeight), mobileType.minuetBoldTracking, desktopType.minuetBoldUppercase, breakpoint.screenSmMin, pxLegacy ? desktopType.minuetBoldFontSize : pxToRem(desktopType.minuetBoldFontSize), desktopType.minuetBoldWeight, pxLegacy ? desktopType.minuetBoldLineHeight : pxToRem(desktopType.minuetBoldLineHeight), desktopType.minuetBoldTracking, desktopType.minuetBoldUppercase);
};