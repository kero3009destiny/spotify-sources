import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React from 'react';
import { announcement, black, failure, info, success, warning, white } from '@spotify-internal/encore-foundation';
import { ThemeProvider } from 'styled-components';
import { CloseButton } from "./CloseButton";
import { Icon } from "./Icon";
import { Message } from "./Message";
import { Wrapper } from "./Wrapper";
var variants = {
  announcement: {
    color: white,
    backgroundColor: announcement
  },
  error: {
    color: white,
    backgroundColor: failure
  },
  informational: {
    color: black,
    backgroundColor: info
  },
  success: {
    color: white,
    backgroundColor: success
  },
  warning: {
    color: white,
    backgroundColor: warning
  }
};
var bannerVariantNames = {
  announcement: 'announcement',
  error: 'error',
  informational: 'informational',
  success: 'success',
  warning: 'warning'
};

var defaultIconRender = function defaultIconRender(props) {
  return /*#__PURE__*/React.createElement(Icon, props);
};

var defaultMessageRender = function defaultMessageRender(props) {
  return /*#__PURE__*/React.createElement(Message, props);
};

var defaultCloseButtonRender = function defaultCloseButtonRender(props) {
  return /*#__PURE__*/React.createElement(CloseButton, props);
};

function BannerComponent(_ref) {
  var _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'informational' : _ref$variant,
      align = _ref.align,
      _ref$contextual = _ref.contextual,
      contextual = _ref$contextual === void 0 ? false : _ref$contextual,
      children = _ref.children,
      onClose = _ref.onClose,
      _ref$renderIcon = _ref.renderIcon,
      renderIcon = _ref$renderIcon === void 0 ? defaultIconRender : _ref$renderIcon,
      _ref$renderMessage = _ref.renderMessage,
      renderMessage = _ref$renderMessage === void 0 ? defaultMessageRender : _ref$renderMessage,
      _ref$renderCloseButto = _ref.renderCloseButton,
      renderCloseButton = _ref$renderCloseButto === void 0 ? defaultCloseButtonRender : _ref$renderCloseButto,
      props = _objectWithoutProperties(_ref, ["variant", "align", "contextual", "children", "onClose", "renderIcon", "renderMessage", "renderCloseButton"]);

  var _variants$variant = variants[variant],
      color = _variants$variant.color,
      backgroundColor = _variants$variant.backgroundColor;
  return /*#__PURE__*/React.createElement(ThemeProvider, {
    theme: {
      banner: {
        color: color,
        backgroundColor: backgroundColor,
        align: align,
        contextual: contextual
      }
    }
  }, /*#__PURE__*/React.createElement(Wrapper, Object.assign({
    showClose: onClose ? true : undefined
  }, props), renderIcon({
    variant: variant
  }), renderMessage({
    children: children
  }), onClose && renderCloseButton({
    onClose: onClose
  })));
}

var bannerHelpers = _objectSpread(_objectSpread({}, bannerVariantNames), {}, {
  Icon: Icon,
  Message: Message,
  CloseButton: CloseButton
});
/**
* **Banner** ![Status: Production](https://img.shields.io/badge/PRODUCTION-%2357B560|height=14)
*
* [GitHub](https://ghe.spotify.net/encore/web/tree/master/src/components/Banner) | [Storybook](https://encore-web.spotify.net/?path=/story/components-banner--informational) | [Encore](https://encore.spotify.net/web/components/banner) | [Figma](https://www.figma.com/file/bnQXqGkLeiTlbk8JXGDcsX/Encore-Web---Light-Theme-Toolkit?node-id=239:69) |
*
* Banners bring attention to important information, errors or warnings. They use a combination of icons, copy, and color to indicate the type of message, and some variants are dismissible.
*
* @example
* export const Informational = () => (
*  <Banner variant={Banner.informational}>This is an informational banner message</Banner>
*);
*
*/


export var Banner = Object.assign(BannerComponent, bannerHelpers);
export default Banner;