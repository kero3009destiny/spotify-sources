import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React from 'react';
import { black, gray30, gray90, spacer8, spacer16, white } from '@spotify-internal/encore-foundation';
import styled, { css } from 'styled-components';
import { typeStyleCta3 } from "../../styles";
var transitionColor = '0.2s';
var transitionBg = '0.3s';
/** Opacity themes for Toggled items */

var theme = {
  lightDefault: function lightDefault(props) {
    return props.isActive ? black : 'rgba(0, 0, 0, 0.54)';
  },
  lightSelectedBg: gray90,
  lightHover: 'rgba(0, 0, 0, 0.93)',
  lightActive: 'rgba(0, 0, 0, 0.75)',
  lightFocus: 'rgba(0, 0, 0, 0.62)',
  lightDisabled: 'rgba(0, 0, 0, 0.40)',
  darkDefault: function darkDefault(props) {
    return props.isActive ? white : 'rgba(255, 255, 255, 0.54)';
  },
  darkSelectedBg: gray30,
  darkHover: 'rgba(255, 255, 255, 0.93)',
  darkActive: 'rgba(255, 255, 255, 0.75)',
  darkFocus: 'rgba(255, 255, 255, 0.62)',
  darkDisabled: 'rgba(255, 255, 255, 0.40)'
};

var isDarkTheme = function isDarkTheme(props) {
  return props.theme.navPillListItem === 'dark';
};

var NavPillListItemLink = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var Component = _ref.component,
      isActive = _ref.isActive,
      isUsingKeyboard = _ref.isUsingKeyboard,
      props = _objectWithoutProperties(_ref, ["component", "isActive", "isUsingKeyboard"]);

  return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {
    ref: ref
  }));
}); // eslint-disable-next-line prefer-arrow-callback

export var Link = styled(NavPillListItemLink).withConfig({
  displayName: "Link",
  componentId: "sc-1ry51js-0"
})(["", ";color:", ";border-radius:16px;display:block;padding:", " ", ";transition:", " color linear;text-decoration:none;", " &:hover{color:", ";}&:active{color:", ";}&[disabled]{color:", ";cursor:not-allowed;pointer-events:none;}", ""], typeStyleCta3(), function (props) {
  return isDarkTheme(props) ? theme.darkDefault : theme.lightDefault;
}, spacer8, spacer16, transitionColor, function (props) {
  return !props.isUsingKeyboard && css(["&:focus{color:", ";outline:none;}"], isDarkTheme(props) ? theme.darkFocus : theme.lightFocus);
}, function (props) {
  return isDarkTheme(props) ? theme.darkHover : theme.lightHover;
}, function (props) {
  return isDarkTheme(props) ? theme.darkActive : theme.lightActive;
}, function (props) {
  return isDarkTheme(props) ? theme.darkDisabled : theme.lightDisabled;
}, function (props) {
  return props.isActive && css(["&,&:hover,&:focus{background-color:", ";color:", ";transition:background-color ", ";}"], isDarkTheme(props) ? theme.darkSelectedBg : theme.lightSelectedBg, isDarkTheme(props) ? theme.darkDefault : theme.lightDefault, transitionBg);
});