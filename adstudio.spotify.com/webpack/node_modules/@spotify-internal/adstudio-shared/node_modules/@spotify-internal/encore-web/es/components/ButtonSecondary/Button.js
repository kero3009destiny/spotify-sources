import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

/* stylelint-disable no-descending-specificity */
import React from 'react';
import { black70, gray10, gray50, gray70, white, white30 } from '@spotify-internal/encore-foundation';
import styled, { css } from 'styled-components';
import { baseButtonStyles, buttonBorderRadius, buttonHover, focusBorderUsingProp, focusGapBorder, getButtonPadding } from "../../styles";

var isDarkTheme = function isDarkTheme(theme) {
  return (theme == null ? void 0 : theme.button) === 'dark';
};

var borderStyle = '1px solid';

var color = function color(theme) {
  return isDarkTheme(theme) ? white : gray10;
};

var border = function border(theme) {
  return isDarkTheme(theme) ? gray70 : gray70;
};

var background = function background(theme) {
  return isDarkTheme(theme) ? black70 : white30;
};

var colorHover = function colorHover(theme) {
  return isDarkTheme(theme) ? white : gray10;
};

var borderHover = function borderHover(theme) {
  return isDarkTheme(theme) ? white : gray10;
};

var colorActive = function colorActive(theme) {
  return isDarkTheme(theme) ? gray70 : gray10;
};

var borderActive = function borderActive(theme) {
  return isDarkTheme(theme) ? gray50 : gray70;
};

var hoverStyles = css(["", ";border:", " ", ";color:", ";"], buttonHover(), borderStyle, function (_ref) {
  var theme = _ref.theme;
  return borderHover(theme);
}, function (_ref2) {
  var theme = _ref2.theme;
  return colorHover(theme);
});
var activeStyles = css(["transform:scale(1);border:", " ", ";color:", ";"], borderStyle, function (_ref3) {
  var theme = _ref3.theme;
  return borderActive(theme);
}, function (_ref4) {
  var theme = _ref4.theme;
  return colorActive(theme);
});
var buttonStroked = css(["background-color:", ";border:", " ", ";color:", ";position:relative;line-height:0.8;&:hover:not(:focus):not(:disabled){", ";}", ";&:active{&,&:hover{", ";}}", ";&[disabled],fieldset[disabled] &{background-color:transparent;box-shadow:", " ", ";color:", ";cursor:not-allowed;opacity:0.4;}"], function (_ref5) {
  var theme = _ref5.theme;
  return background(theme);
}, borderStyle, function (_ref6) {
  var theme = _ref6.theme;
  return border(theme);
}, function (_ref7) {
  var theme = _ref7.theme;
  return color(theme);
}, hoverStyles, function (_ref8) {
  var hover = _ref8.hover;
  return hover && css(["", ";"], hoverStyles);
}, activeStyles, function (_ref9) {
  var active = _ref9.active;
  return active && css(["", ";"], activeStyles);
}, borderStyle, function (_ref10) {
  var theme = _ref10.theme;
  return borderActive(theme);
}, function (_ref11) {
  var theme = _ref11.theme;
  return color(theme);
});
export var Button = styled( /*#__PURE__*/React.forwardRef(function (_ref12, ref) {
  var _ref12$component = _ref12.component,
      Component = _ref12$component === void 0 ? 'button' : _ref12$component,
      buttonSize = _ref12.buttonSize,
      hover = _ref12.hover,
      active = _ref12.active,
      focus = _ref12.focus,
      isUsingKeyboard = _ref12.isUsingKeyboard,
      props = _objectWithoutProperties(_ref12, ["component", "buttonSize", "hover", "active", "focus", "isUsingKeyboard"]);

  return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {
    ref: ref
  }));
})).withConfig({
  displayName: "Button",
  componentId: "sc-1hfconm-0"
})(["", ""], function (_ref13) {
  var _ref13$buttonSize = _ref13.buttonSize,
      buttonSize = _ref13$buttonSize === void 0 ? 'md' : _ref13$buttonSize,
      _ref13$theme = _ref13.theme,
      theme = _ref13$theme === void 0 ? {} : _ref13$theme,
      focus = _ref13.focus,
      isUsingKeyboard = _ref13.isUsingKeyboard;

  var _getButtonPadding = getButtonPadding(buttonSize),
      paddingTopBottom = _getButtonPadding.paddingTopBottom,
      paddingLeftRight = _getButtonPadding.paddingLeftRight;

  return css(["", ";padding:", "px ", "px;", ";", " ", ";"], baseButtonStyles(buttonSize), paddingTopBottom, paddingLeftRight, focusGapBorder(isDarkTheme(theme), buttonBorderRadius, isUsingKeyboard), function () {
    return focus && focusBorderUsingProp(isDarkTheme(theme), isUsingKeyboard);
  }, buttonStroked);
});