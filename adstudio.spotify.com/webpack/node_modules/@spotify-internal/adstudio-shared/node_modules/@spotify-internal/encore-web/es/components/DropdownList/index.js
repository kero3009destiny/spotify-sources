import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React, { useContext } from 'react';
import { black, spacer8, white } from '@spotify-internal/encore-foundation';
import styled, { css, ThemeProvider } from 'styled-components';
import { KeyboardDetectionContext } from "../../contexts/KeyboardDetectionContext";
import { overlay } from "../../styles";
import { List as ListComponent } from "../List";

/* Show up to 5.5 items, then resort to scrolling the rest.
 * We show a "half" item so that it is obvious to the user that there is more below the fold.
 * 48px (item height) * 5.5 + 8px (padding height) + 1px (border height) = 273px
 * */
var List = styled(ListComponent).withConfig({
  displayName: "DropdownList__List",
  componentId: "xiy7nh-0"
})(["", ";display:block;pointer-events:all;width:100%;padding-top:", ";padding-bottom:", ";max-height:273px;overflow:auto;&:focus{outline:none;border:1px solid ", ";", "}"], function (_ref) {
  var theme = _ref.theme;
  return overlay({
    maxWidth: 'none',
    isDarkTheme: theme.dropdownList === 'dark'
  });
}, spacer8, spacer8, function (_ref2) {
  var theme = _ref2.theme;
  return theme.dropdownList === 'dark' ? white : black;
}, function (_ref3) {
  var isUsingKeyboard = _ref3.isUsingKeyboard;
  return isUsingKeyboard && css(["border-width:3px;"]);
});
var DropdownListComponent = /*#__PURE__*/React.forwardRef(function (_ref4, ref) {
  var _ref4$theme = _ref4.theme,
      theme = _ref4$theme === void 0 ? {} : _ref4$theme,
      props = _objectWithoutProperties(_ref4, ["theme"]);

  var _useContext = useContext(KeyboardDetectionContext),
      isUsingKeyboard = _useContext.isUsingKeyboard;

  return /*#__PURE__*/React.createElement(ThemeProvider, {
    theme: theme
  }, /*#__PURE__*/React.createElement(List, Object.assign({
    ref: ref,
    isUsingKeyboard: isUsingKeyboard,
    role: "listbox",
    tabIndex: -1
  }, props)));
});
var dropdownListHelpers = {
  darkTheme: {
    dropdownList: 'dark'
  }
};
/**
* **DropdownList** ![Status: Production](https://img.shields.io/badge/PRODUCTION-%2357B560|height=14)
*
* [GitHub](https://ghe.spotify.net/encore/web/tree/master/src/components/DropdownList) | [Storybook](https://encore-web.spotify.net/?path=/story/components-dropdown-dropdownlist--default) | [Encore](https://encore.spotify.net/web/components/dropdown) | [Figma](https://www.figma.com/file/bnQXqGkLeiTlbk8JXGDcsX/Encore-Web---Light-Theme-Toolkit?node-id=423:1324) |
*
* DropdownList is a list in the dropdown.
*
* @example
* export const Default = () => (
*  <DropdownList>
*    <DropdownItem>
*      <DropdownLink href="#">List item 1 (default)</DropdownLink>
*    </DropdownItem>
*    <DropdownItem>
*      <DropdownLink href="#" selected>
*        List item 2 (selected)
*      </DropdownLink>
*    </DropdownItem>
*    <DropdownItem>
*      <DropdownLink href="#" disabled>
*        List item 3 (disabled)
*      </DropdownLink>
*    </DropdownItem>
*    <DropdownItem>
*      <DropdownLink href="#" divider>
*        List item 4 (with divider)
*      </DropdownLink>
*    </DropdownItem>
*  </DropdownList>
*);
*
*/

export var DropdownList = Object.assign(DropdownListComponent, dropdownListHelpers);
export default DropdownList;