"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.required = required;
exports.checkboxValidator = checkboxValidator;
exports.numericString = numericString;
exports.validateClickthrough = validateClickthrough;
exports.validateUnsafeChars = validateUnsafeChars;
exports.VALID_MACRO_SEQUENCES = exports.email = exports.url = exports.regex = exports._memoizeCacheKey = void 0;

var _lodash = require("lodash");

var _commonsValidatorJs = require("commons-validator-js");

var _currency = require("../utils/currency");

/**
 * this can be used to create a memoize cache key that just
 * converts the full arg list to strings and join them.
 * helpful if you just want to memoize a function that
 * has multiple args.
 */
var _memoizeCacheKey = function _memoizeCacheKey() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return args.join('|');
};

exports._memoizeCacheKey = _memoizeCacheKey;

function required(value) {
  // ANYTHING false-y. this includes 0
  if (!value) {
    return 'This field is required.';
  } // for empty arrays


  if ((Array.isArray(value) || (0, _lodash.isObject)(value)) && (0, _lodash.isEmpty)(value)) {
    return 'Please select at least one value.';
  }
}

function checkboxValidator() {
  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var atLeastOneSelected = Object.values(value).some(function (v) {
    return v;
  });

  if (!atLeastOneSelected) {
    return 'Choose at least one value.';
  }
}

function numericString(value) {
  var number = (0, _currency.getNumberFromCurrencyString)(value);

  if (typeof number !== 'number' || isNaN(number)) {
    return 'Must be a numeric value.';
  }
}

function _regex(regexToTest, message) {
  return function (value) {
    if (value && typeof value === 'string' && !regexToTest.test(value)) {
      return message;
    }
  };
}

var regex = (0, _lodash.memoize)(_regex, _memoizeCacheKey);
exports.regex = regex;
var URL_RE = /^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-z]{2,63}\b([-a-zA-Z0-9@:%_\+.~#?!&;\[\]//=]*)$/;
var url = regex(URL_RE, 'Please enter a valid URL.');
exports.url = url;
var EMAIL_RE = /^(([^<>()\[\]\.,;:\s@\"]+(\.[^<>()\[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i;
var email = regex(EMAIL_RE, 'Please enter a valid email address.'); // Check for valid clickthrough URLs

exports.email = email;
var VALID_MACRO_SEQUENCES = ['CAMPAIGN_ID', 'FLIGHT_ID', 'CREATIVE_ID', 'DEVICE_ID', 'CACHEBUSTER', 'CLICK_URL'];
exports.VALID_MACRO_SEQUENCES = VALID_MACRO_SEQUENCES;
var MACRO_MATCHER = /%%([a-zA-Z0-9:@%._\+~#=]+)%%/;

var _validateMacroParams = function _validateMacroParams(params) {
  return params.every(function (param) {
    var macroParam = MACRO_MATCHER.exec(param)[1].replace(/(_ESC|_UNESC)/g, '');
    return VALID_MACRO_SEQUENCES.includes(macroParam);
  });
};

var _validateNormalParams = function _validateNormalParams(params) {
  for (var i = 0; i < params.length; i++) {
    try {
      decodeURI(params[i]);
    } catch (e) {
      return false;
    }
  }

  return true;
};

var _validateDomain = function _validateDomain(domain) {
  var domainValidator = new _commonsValidatorJs.DomainValidator();
  return domainValidator.isValid(domain);
};

var _validateClickthroughUrl = function _validateClickthroughUrl(value, errorMessage) {
  var urlPattern = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var url; // validate properly formed url.

  try {
    // validate url against pattern if available
    if (urlPattern && !value.match(urlPattern)) {
      return errorMessage;
    }

    url = new URL(value);
  } catch (e) {
    return errorMessage;
  }

  var params = url.search.split('&');
  var filteredParams = params.reduce(function (acc, param) {
    if (MACRO_MATCHER.test(param)) acc.macroParams.push(param);else acc.normalParams.push(param);
    return acc;
  }, {
    macroParams: [],
    normalParams: []
  }); // validate macro query parameters

  if (!_validateMacroParams(filteredParams.macroParams)) return errorMessage; // validate normal query parameters

  if (!_validateNormalParams(filteredParams.normalParams)) return errorMessage; // validate TLD

  if (!_validateDomain(url.host)) return errorMessage;
};

var _validateUnsafeChars = function _validateUnsafeChars(value, errorMessage) {
  var unsafeChars = /[\s\{\}\|\\\~\^\[\]\`]/g;

  if (value.match(unsafeChars)) {
    return errorMessage;
  }
};

function validateClickthrough(value) {
  var ERROR_MESSAGE = 'Please enter a valid URL.';
  return _validateClickthroughUrl(value, ERROR_MESSAGE);
}

function validateUnsafeChars(value) {
  var ERROR_MESSAGE = "URL can't include unsafe characters like spaces, ~, or |. Visit our FAQ for help.";
  return _validateUnsafeChars(value, ERROR_MESSAGE);
}
//# sourceMappingURL=index.js.map