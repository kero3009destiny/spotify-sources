"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = fetchWebgateToken;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _global = require("global");

var _debug = _interopRequireDefault(require("debug"));

var _constants = require("./constants");

var _authUrl = require("./authUrl");

var log = (0, _debug["default"])('webgateToken:fetchToken'); // this needs to be separated out so that there's a nice interface that either
// returns the accessToken or throws an error

function doFetch() {
  return _doFetch.apply(this, arguments);
}

function _doFetch() {
  _doFetch = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee() {
    var options,
        res,
        _ref,
        accessToken,
        _args = arguments;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {
              credentials: 'include'
            };
            _context.next = 3;
            return (0, _global.fetch)((0, _authUrl.getAuthUrl)(), options);

          case 3:
            res = _context.sent;

            if (!(res.status > 401)) {
              _context.next = 7;
              break;
            }

            log('webgate token was inaccessible due to unexpected auth error');
            throw new _constants.AuthSystemError(res.statusText);

          case 7:
            if (!(res.status === 400 || res.status === 401)) {
              _context.next = 10;
              break;
            }

            log('webgate token was inaccessible due to logged out user');
            throw new _constants.LoggedOutError();

          case 10:
            // 200 - 399 status codes pass through here
            log('retrieved webgate token for user');
            _context.next = 13;
            return res.json();

          case 13:
            _ref = _context.sent;
            accessToken = _ref.accessToken;
            return _context.abrupt("return", accessToken);

          case 16:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _doFetch.apply(this, arguments);
}

var currentWebgateFetch;

function fetchWebgateToken(_x) {
  return _fetchWebgateToken.apply(this, arguments);
}

function _fetchWebgateToken() {
  _fetchWebgateToken = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2(options) {
    var result;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!currentWebgateFetch) {
              _context2.next = 5;
              break;
            }

            log('fetch was already in progress');
            _context2.next = 4;
            return currentWebgateFetch;

          case 4:
            return _context2.abrupt("return", _context2.sent);

          case 5:
            _context2.prev = 5;
            currentWebgateFetch = doFetch(options);
            _context2.next = 9;
            return currentWebgateFetch;

          case 9:
            result = _context2.sent;
            currentWebgateFetch = null;
            return _context2.abrupt("return", result);

          case 14:
            _context2.prev = 14;
            _context2.t0 = _context2["catch"](5);
            // clear the cached fetch even if the request failed
            currentWebgateFetch = null;
            throw _context2.t0;

          case 18:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[5, 14]]);
  }));
  return _fetchWebgateToken.apply(this, arguments);
}
//# sourceMappingURL=fetchToken.js.map