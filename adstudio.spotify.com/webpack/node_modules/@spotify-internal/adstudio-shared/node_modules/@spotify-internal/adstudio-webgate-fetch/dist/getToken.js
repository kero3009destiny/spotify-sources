"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = getWebgateToken;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _debug = _interopRequireDefault(require("debug"));

var _tokenCache = require("./tokenCache");

var _fetchToken = _interopRequireDefault(require("./fetchToken"));

var log = (0, _debug["default"])('webgateToken:getWebgateToken');

function getWebgateToken(_x) {
  return _getWebgateToken.apply(this, arguments);
}

function _getWebgateToken() {
  _getWebgateToken = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(options) {
    var cachedWebgateToken, result;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            // return the cached token if it exists
            cachedWebgateToken = (0, _tokenCache.getCachedWebgateToken)();

            if (!cachedWebgateToken) {
              _context.next = 4;
              break;
            }

            log('cached token found in storage. using cached token to attempt fetch');
            return _context.abrupt("return", cachedWebgateToken);

          case 4:
            _context.prev = 4;
            _context.next = 7;
            return (0, _fetchToken["default"])(options);

          case 7:
            result = _context.sent;
            (0, _tokenCache.setCachedWebgateToken)(result);
            return _context.abrupt("return", result);

          case 12:
            _context.prev = 12;
            _context.t0 = _context["catch"](4);
            throw _context.t0;

          case 15:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[4, 12]]);
  }));
  return _getWebgateToken.apply(this, arguments);
}
//# sourceMappingURL=getToken.js.map