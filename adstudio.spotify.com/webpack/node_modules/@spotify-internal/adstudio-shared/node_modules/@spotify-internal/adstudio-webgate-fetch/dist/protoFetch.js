"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = protoFetch;
exports.CONTENT_SPECIFIER_PARAM = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _global = require("global");

var _fetch = _interopRequireDefault(require("./fetch"));

var _constants = require("./constants");

// Required to indicate that we're supplying json, not a proto payload
var CONTENT_SPECIFIER_PARAM = 'json=true';
exports.CONTENT_SPECIFIER_PARAM = CONTENT_SPECIFIER_PARAM;

function protoFetch(_x) {
  return _protoFetch.apply(this, arguments);
}

function _protoFetch() {
  _protoFetch = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(url) {
    var options,
        adjustedUrl,
        resp,
        errorJson,
        statusCode,
        errorBody,
        errorIsAValidationError,
        statusText,
        firstError,
        errorResponse,
        _args = arguments;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
            adjustedUrl = url; // Check if json param is supplied, if not add it

            if (url.indexOf(CONTENT_SPECIFIER_PARAM) === -1) {
              adjustedUrl = url.indexOf('?') === -1 ? "".concat(url, "?").concat(CONTENT_SPECIFIER_PARAM) : "".concat(url, "&").concat(CONTENT_SPECIFIER_PARAM);
            } // All of the bff RPC methods are POST-based by default


            if (!options.method) {
              options.method = 'POST';
            } // POSTs must have a body


            if (!options.body) {
              options.body = JSON.stringify({});
            }

            _context.prev = 5;
            _context.next = 8;
            return (0, _fetch["default"])(adjustedUrl, options);

          case 8:
            resp = _context.sent;

            if (!resp.ok) {
              _context.next = 11;
              break;
            }

            return _context.abrupt("return", resp);

          case 11:
            throw resp;

          case 14:
            _context.prev = 14;
            _context.t0 = _context["catch"](5);

            if (!(_context.t0 instanceof _global.Response)) {
              _context.next = 29;
              break;
            }

            _context.next = 19;
            return _context.t0.json();

          case 19:
            errorJson = _context.sent;
            statusCode = _context.t0.status;
            errorBody = {
              message: ''
            };
            errorIsAValidationError = errorJson.custom && errorJson.custom.validationErrors;

            if (errorIsAValidationError) {
              firstError = errorJson.custom.validationErrors.errors[0];
              errorBody.message = firstError.message || '';
              statusText = errorBody.message;
            } else {
              statusText = _context.t0.statusText;
            } // Need to clear out any linebreak in the status text or it will cause global's Response method to throw


            statusText = statusText.replace(/\r?\n|\r/g, ' '); // todo: figure out some way to forward the original error body here

            errorResponse = new _global.Response(Buffer.from(JSON.stringify(errorBody)), {
              status: statusCode,
              statusText: statusText,
              headers: new _global.Headers()
            });

            if (!(errorResponse.status >= _constants.THROW_ABOVE_STATUS_CODE)) {
              _context.next = 28;
              break;
            }

            throw errorResponse;

          case 28:
            return _context.abrupt("return", errorResponse);

          case 29:
            throw _context.t0;

          case 30:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[5, 14]]);
  }));
  return _protoFetch.apply(this, arguments);
}
//# sourceMappingURL=protoFetch.js.map