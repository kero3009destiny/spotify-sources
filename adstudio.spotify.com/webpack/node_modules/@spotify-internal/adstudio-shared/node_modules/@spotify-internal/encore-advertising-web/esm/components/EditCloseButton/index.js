var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { ButtonTertiary, gray50, IconEdit, IconWithText, IconX, spacer12, Type, } from '@spotify-internal/encore-web';
import React from 'react';
import styled, { css } from 'styled-components';
import { plum } from '../../styles/colors';
const StyledButton = styled(ButtonTertiary) `
  padding: 0;
  color: ${props => { var _a, _b, _c; return (_c = (_a = props.color) !== null && _a !== void 0 ? _a : (_b = props.theme) === null || _b === void 0 ? void 0 : _b.primaryColor) !== null && _c !== void 0 ? _c : plum; }};
  text-transform: none;
  cursor: pointer;
  svg {
    ${props => props.$editMode &&
    css `
        color: ${gray50};
      `}
  }
  &:hover:enabled {
    opacity: 0.7;
  }
`;
export const EditCloseButton = styled((_a) => {
    var { isEditing, editText = 'Edit', closeText = 'Close', onEdit, onClose, onClick } = _a, buttonTertiaryProps = __rest(_a, ["isEditing", "editText", "closeText", "onEdit", "onClose", "onClick"]);
    return (React.createElement(StyledButton, Object.assign({}, buttonTertiaryProps, { onClick: (e) => {
            if (isEditing)
                onClose === null || onClose === void 0 ? void 0 : onClose(e);
            else
                onEdit === null || onEdit === void 0 ? void 0 : onEdit(e);
            onClick === null || onClick === void 0 ? void 0 : onClick(e);
        }, "$editMode": !!isEditing }),
        React.createElement(IconWithText, { icon: isEditing ? IconX : IconEdit, iconSize: 16, spacer: spacer12, rightAlign: true },
            React.createElement(Type, { weight: Type.bold, variant: Type.body3 }, isEditing ? closeText : editText))));
}) ``;
//# sourceMappingURL=index.js.map