import React, { PureComponent } from 'react';
import styled, { css, withTheme } from 'styled-components';
import { gray40, gray95, gray90, spacer16, spacer32, Type, ButtonSecondary, IconArrowUp, } from '@spotify-internal/encore-web';
import { UPLOAD_FILE_TEXT, DRAG_AND_DROP_TEXT } from './constants';
const InvalidFileTypeErrorMessage = 'File type not accepted.';
const ICON_CONTAINER_HEIGHT = '64px';
const UPLOAD_ICON_HEIGHT = '35px';
const videoUploadIconStyles = css `
  top: 40%;
  left: 0;
`;
const UploadInstructions = styled.div `
  margin: ${spacer32} 0;
  display: grid;
  justify-content: center;
  align-items: center;
  grid-template-rows: 64px 30px 30px minmax(30px, min-content);
  grid-gap: ${spacer16};
`;
const IconContainer = styled.div `
  backface-visibility: hidden;
  height: ${props => props.$iconContainerHeight};
  margin: 0 auto;
  position: relative;
  width: ${ICON_CONTAINER_HEIGHT};
  transition: border-color 0.1s;
`;
const StyledUploadIcon = styled(IconArrowUp) `
  left: 35%;
  opacity: 0;
  position: absolute;
  top: 40%;
  transition: top 0.25s, opacity 0.25s;
`;
const FileUploadContainer = styled.div `
  background-color: ${gray95};
  border: 1.5px dashed ${gray90};
  border-radius: 5px;
  text-align: center;
  transition: border-color 0.1s;
  width: 100%;
  ${props => props.$showDragOver &&
    css `
      background-color: rgba(80, 155, 245, 0.05);
      border-color: ${props.theme.colors.primaryColor};
      ${IconContainer} {
        border-color: ${props.theme.colors.primaryColor};
      }
      ${StyledUploadIcon} {
        opacity: 1;
        top: calc((${ICON_CONTAINER_HEIGHT} - ${UPLOAD_ICON_HEIGHT}) / 2);
      }
      ${props.$DisplayIcon} {
        left: 25%;
        opacity: 0;
        top: 10%;
      }
    `}
`;
const HiddenInput = styled.input `
  height: 0.1px;
  opacity: 0;
  overflow: hidden;
  position: absolute;
  width: 0.1px;
  z-index: -1;
`;
export class FileUpload extends PureComponent {
    constructor(props) {
        super(props);
        this.handleFileUploadFromDialog = (e) => {
            this.validateFileAndUpload(e.currentTarget.files[0]);
        };
        this.handleFileDrop = (e) => {
            e.preventDefault();
            this.handleFileDragLeave();
            const file = e.dataTransfer.files[0];
            this.validateFileAndUpload(file);
        };
        this.handleClickUpload = (e) => {
            var _a;
            e.preventDefault();
            return (_a = document.getElementById(this.props.id)) === null || _a === void 0 ? void 0 : _a.click();
        };
        this.handleFileDragOver = (e) => {
            e.preventDefault();
            this.setState({
                showDragOver: true,
            });
        };
        this.handleFileDragLeave = () => this.setState({
            showDragOver: false,
        });
        this.validateFileAndUpload = (file) => {
            const { accept, skipValidation, onError, onUpload } = this.props;
            if (skipValidation ||
                this.state.acceptAnyFileType ||
                accept[file.type]) {
                onUpload(file);
            }
            else {
                onError(InvalidFileTypeErrorMessage);
            }
        };
        this.maybeRenderUploadInstructions = () => {
            var _a;
            const { uploadFileText = UPLOAD_FILE_TEXT, uploadText, dragAndDropText = DRAG_AND_DROP_TEXT, isVideoUploader = false, iconContainerHeight = ICON_CONTAINER_HEIGHT, theme, } = this.props;
            const { DisplayIcon } = this;
            return (React.createElement(UploadInstructions, null,
                React.createElement(IconContainer, { "$iconContainerHeight": iconContainerHeight },
                    React.createElement(StyledUploadIcon, { color: (_a = theme === null || theme === void 0 ? void 0 : theme.colors) === null || _a === void 0 ? void 0 : _a.primaryColor }),
                    React.createElement(DisplayIcon, { color: gray40, "$isVideoUploader": isVideoUploader })),
                React.createElement(Type.p, { color: gray40, variant: Type.body1, weight: Type.bold, condensed: true }, dragAndDropText),
                React.createElement("div", null,
                    React.createElement(ButtonSecondary, { buttonSize: ButtonSecondary.sm, onClick: this.handleClickUpload }, uploadFileText)),
                React.createElement(Type.p, { color: gray40, variant: Type.body4, weight: Type.book, condensed: true }, uploadText)));
        };
        this.state = {
            showDragOver: false,
            acceptAnyFileType: !Object.keys(props.accept).length,
        };
        this.handleFileUploadFromDialog = this.handleFileUploadFromDialog.bind(this);
    }
    get DisplayIcon() {
        const DisplayIcon = styled(this.props.displayIcon) `
      opacity: 1;
      transition: top 0.25s, opacity 0.25s;
      ${props => props.$isVideoUploader && videoUploadIconStyles}
    `;
        return DisplayIcon;
    }
    render() {
        const { accept, id } = this.props;
        const { showDragOver } = this.state;
        return (React.createElement(FileUploadContainer, { "$showDragOver": showDragOver, "$DisplayIcon": this.DisplayIcon, onDragEnd: this.handleFileDragLeave, onDragEnter: this.handleFileDragOver, onDragLeave: this.handleFileDragLeave, onDragOver: this.handleFileDragOver, onDrop: this.handleFileDrop },
            this.maybeRenderUploadInstructions(),
            React.createElement(HiddenInput, { accept: Object.keys(accept).join(','), id: id, onChange: this.handleFileUploadFromDialog, type: "file" })));
    }
}
export default withTheme(FileUpload);
//# sourceMappingURL=FileUpload.js.map