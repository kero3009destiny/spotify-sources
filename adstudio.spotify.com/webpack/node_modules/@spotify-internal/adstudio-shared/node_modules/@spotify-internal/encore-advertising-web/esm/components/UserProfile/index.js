import React from 'react';
import styled, { css } from 'styled-components';
import { ButtonIcon, IconChevronDownAlt, IconChevronUpAlt, PopoverNavigation, PopoverNavigationLink, PopoverTrigger, Type, spacer8, spacer32, gray60, white, } from '@spotify-internal/encore-web';
const UserProfileContainer = styled.div `
  max-width: 250px;
  padding-right: ${spacer32};
  position: relative;
`;
const ProfileImage = styled.img `
  border-radius: 50%;
  box-shadow: 0 0 5px 2px rgba(0, 0, 0, 0.1);
  display: inline-block;
  height: 34px;
  margin-right: ${spacer8};
  vertical-align: middle;
  width: 34px;
`;
const Username = styled.div `
  display: inline-block;
  max-width: 60%;
  p {
    max-width: 100%;
    display: inline-block;
    overflow: hidden;
    text-overflow: ellipsis;
    vertical-align: middle;
    white-space: nowrap;
  }
  span {
    &::before {
      content: '\\A';
      white-space: pre;
    }
  }
`;
const Menu = styled.div `
  display: inline-block;
  font-size: 0;
  position: absolute;
  right: 0;
  top: 50%;
  transform: translateY(-50%);
  vertical-align: middle;
`;
const Chevron = styled(IconChevronDownAlt) `
  ${({ theme }) => theme === 'dark' &&
    css `
      color: ${gray60};
      &:hover {
        color: ${white};
      }
    `}
`;
const OpenChevron = styled(IconChevronUpAlt) `
  ${({ theme }) => theme === 'dark' &&
    css `
      color: ${gray60};
      &:hover {
        color: ${white};
      }
    `}
`;
export class UserProfile extends React.Component {
    constructor() {
        super(...arguments);
        this.state = { show: false };
    }
    render() {
        const { links, username, description, img, theme } = this.props;
        return (React.createElement(UserProfileContainer, null,
            img && React.createElement(ProfileImage, { src: img, alt: "profile" }),
            React.createElement(Username, null,
                React.createElement(Type.p, { condensed: true, title: username, variant: Type.body3, weight: Type.book },
                    username,
                    description && (React.createElement(Type.span, { condensed: true, title: username, variant: Type.body4, weight: Type.book }, description)))),
            React.createElement(Menu, null,
                React.createElement(PopoverTrigger, { onShow: () => this.setState({ show: true }), onHide: () => this.setState({ show: false }), overlay: this.state.show && (React.createElement(PopoverNavigation, { arrow: "bottom", theme: PopoverNavigation.darkTheme }, links.map(navItem => (React.createElement(PopoverNavigationLink, { href: navItem.href, key: `pop-nav-${navItem.title}`, onClick: navItem.onClick, theme: PopoverNavigation.darkTheme, target: navItem.target }, navItem.title))))), placement: "top" },
                    React.createElement(ButtonIcon, { "data-testid": "popover-button" }, this.state.show ? (React.createElement(OpenChevron, { iconSize: 24, theme: theme })) : (React.createElement(Chevron, { iconSize: 24, theme: theme })))))));
    }
}
UserProfile.defaultProps = {
    links: [],
    theme: 'light',
};
//# sourceMappingURL=index.js.map