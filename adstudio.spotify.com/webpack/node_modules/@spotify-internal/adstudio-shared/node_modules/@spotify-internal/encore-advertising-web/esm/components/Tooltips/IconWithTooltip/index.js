var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { ButtonIcon, gray10, IconHelpAlt, spacer8, black50, } from '@spotify-internal/encore-web';
import { WithTooltip, withTooltipHelpers, } from '../WithTooltip';
import styled from 'styled-components';
import { marginOverrides, } from '../../../utils/helpers/styleOverrides';
const StyledWithTooltip = styled(WithTooltip) `
  margin-left: ${spacer8};
  && button:hover svg > * {
    stroke: ${gray10}; // TODO: Remove since ButtonIcon handles this in v4 using semantic colors
  }

  ${marginOverrides}
`;
const CenteredButton = styled(ButtonIcon) `
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
`;
const HiddenButton = styled(ButtonIcon) `
  visibility: hidden;
`;
const IconWithTooltipComponent = (_a) => {
    var { icon: IconComponent = IconHelpAlt, color = black50, iconSize = 16 } = _a, withTooltipProps = __rest(_a, ["icon", "color", "iconSize"]);
    const icon = React.createElement(IconComponent, { iconSize: iconSize, color: color });
    return (React.createElement(StyledWithTooltip, Object.assign({}, withTooltipProps),
        React.createElement(CenteredButton, null, icon),
        React.createElement(HiddenButton, null, icon)));
};
export const IconWithTooltip = Object.assign(IconWithTooltipComponent, withTooltipHelpers);
//# sourceMappingURL=index.js.map