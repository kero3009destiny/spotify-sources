import React from 'react';
import { body2FontSize, body2LetterSpacing, body2LineHeight, gray10, gray50, gray70, spacer4, spacer8, TextLink, } from '@spotify-internal/encore-web';
import styled, { css } from 'styled-components';
export const StyledLabelGroup = styled.div `
  display: inline-grid;
  grid-gap: ${spacer4};
  grid-template-columns: 1fr auto;
  align-items: baseline;
  padding: 0;
  width: 100%;
  && * {
    ${props => props.disabled &&
    css `
        cursor: not-allowed;
        color: ${gray70};
      `}
  }
  ${props => props.isHidden &&
    css `
      display: none;
    `}
  ${props => props.clickable &&
    css `
      user-select: none;
    `}
`;
const LabelWithIcon = styled.div `
  grid-column: 1;
  display: flex;
  gap: ${spacer8};
  align-items: normal;
`;
const Label = styled.label `
  font-size: ${body2FontSize};
  letter-spacing: ${body2LetterSpacing};
  line-height: ${body2LineHeight};
  color: ${gray10}; //TODO: Replace with semanticColors.textBase
  max-width: 600px;
  &:empty {
    display: none;
  }
`;
const Extra = styled.div `
  grid-column: 3;
  grid-row-start: 1;
  grid-row-end: ${props => (props.$hasDescription ? 3 : 2)};
`;
const Description = styled.div `
  font-size: ${body2FontSize};
  letter-spacing: ${body2LetterSpacing};
  line-height: ${body2LineHeight};
  font-weight: 400; // TODO: Replace with variable
  color: ${gray50};
  grid-row: 2;
  grid-column: -1 / 1;
  max-width: 800px;
`;
const Suffix = styled.span `
  margin-left: ${spacer8};
`;
const StyledLabel = styled(TextLink) `
  &:hover {
    text-decoration: none !important;
  }
`;
const Icon = styled.div `
  position: relative;
  display: flex;
  align-items: center;
`;
export const LabelGroup = ({ className, label, labelFor, description, popover, prefix, suffix, extra, icon, isHidden, disabled, onLabelClick, }) => {
    const nonDisabledOnLabelClick = !disabled ? onLabelClick : undefined;
    return (React.createElement(StyledLabelGroup, { isHidden: isHidden, disabled: disabled, className: className, clickable: !!nonDisabledOnLabelClick },
        React.createElement(LabelWithIcon, null,
            icon && React.createElement(Icon, null, icon),
            React.createElement(Label, { htmlFor: labelFor },
                React.createElement(StyledLabel, { onClick: nonDisabledOnLabelClick },
                    prefix && `${prefix}: `,
                    React.createElement("b", null, label)),
                popover,
                suffix && React.createElement(Suffix, null, suffix))),
        extra && React.createElement(Extra, { "$hasDescription": !!description }, extra),
        description && React.createElement(Description, null, description)));
};
//# sourceMappingURL=index.js.map