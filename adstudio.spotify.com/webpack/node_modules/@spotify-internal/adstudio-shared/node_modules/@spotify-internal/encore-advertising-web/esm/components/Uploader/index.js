import React, { PureComponent } from 'react';
import { failure } from '@spotify-internal/encore-foundation';
import { Type } from '@spotify-internal/encore-web';
import FileUpload from './FileUpload';
import LoadingDisplay from './LoadingDisplay';
export class Uploader extends PureComponent {
    constructor() {
        super(...arguments);
        this.maybeRenderError = () => {
            const { errorMessage } = this.props;
            return errorMessage ? (React.createElement(Type.p, { color: failure, variant: Type.body1, weight: Type.book }, errorMessage)) : null;
        };
    }
    maybeRenderUploadingProgress() {
        const { displayComponentProps, isUploading, processingText, previewName, uploadingProgress, uploadingText, } = this.props;
        return isUploading ? (React.createElement(LoadingDisplay, { name: previewName || displayComponentProps.name, processingText: processingText, progress: uploadingProgress ? uploadingProgress : 0, uploadingText: uploadingText })) : null;
    }
    maybeRenderDisplayComponent() {
        const { deleteLabel, displayComponent: DisplayComponent, displayComponentProps, isUploading, onClickDelete, previewName, previewSrc, shouldShowDownload, shouldShowUploader, } = this.props;
        return !shouldShowUploader && !isUploading ? (React.createElement(DisplayComponent, Object.assign({ deleteLabel: deleteLabel, onClickDelete: onClickDelete, shouldShowDownload: shouldShowDownload }, displayComponentProps, { name: previewName || displayComponentProps.name, src: previewSrc || displayComponentProps.src, panelBorder: true }))) : null;
    }
    maybeRenderUploadComponent() {
        const { accept, id, isUploading, onError, onUpload, shouldShowUploader, displayIcon, dragAndDropText, uploadFileText, uploadText, skipValidation, iconContainerHeight, isVideoUploader, } = this.props;
        return shouldShowUploader && !isUploading ? (React.createElement(FileUpload, { accept: accept, skipValidation: skipValidation, id: id, onError: onError, onUpload: onUpload, displayIcon: displayIcon, dragAndDropText: dragAndDropText, uploadFileText: uploadFileText, uploadText: uploadText, iconContainerHeight: iconContainerHeight, isVideoUploader: isVideoUploader })) : null;
    }
    render() {
        return (React.createElement("div", { className: this.props.className },
            this.maybeRenderDisplayComponent(),
            this.maybeRenderUploadComponent(),
            this.maybeRenderUploadingProgress(),
            this.maybeRenderError()));
    }
}
//# sourceMappingURL=index.js.map