var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { FormGroup, spacer16, spacer8 } from '@spotify-internal/encore-web';
import styled, { css } from 'styled-components';
import { LabelGroup } from '../../LabelGroup';
const VisuallyHidden = styled.div `
  ${props => !!props.inline &&
    css `
      display: flex;
      flex-wrap: wrap;
    `}
  ${props => !props.visible &&
    css `
      display: none;
    `};
`;
const StyledLabelGroup = styled(LabelGroup) ``;
const StyledFormGroup = styled(FormGroup) `
  ${props => !!props.condensed &&
    css `
      padding: 0;
    `}
  ${props => !props.$hideChildren &&
    css `
      ${StyledLabelGroup} {
        margin-bottom: ${props.$hasDescription ? spacer16 : spacer8};
      }
    `}
`;
export const EnhancedFormGroup = (_a) => {
    var { className, condensed, children, hideChildren, disabled, withFieldset, inline, hideLabel, helpText, icon, label, labelFor, description, popover, prefix, suffix, extra, onLabelClick } = _a, props = __rest(_a, ["className", "condensed", "children", "hideChildren", "disabled", "withFieldset", "inline", "hideLabel", "helpText", "icon", "label", "labelFor", "description", "popover", "prefix", "suffix", "extra", "onLabelClick"]);
    return (React.createElement(StyledFormGroup, Object.assign({ className: className, condensed: condensed, withFieldset: withFieldset, inline: inline, disabled: disabled, "aria-disabled": disabled, "$hasDescription": !!description, "$hideChildren": !!hideChildren }, props),
        React.createElement(StyledLabelGroup, { icon: icon, label: label, labelFor: labelFor, description: description, popover: popover, prefix: prefix, suffix: suffix, extra: extra, isHidden: hideLabel, disabled: disabled, onLabelClick: onLabelClick }),
        children && (React.createElement(VisuallyHidden, { visible: !hideChildren, inline: inline }, children)),
        helpText));
};
//# sourceMappingURL=index.js.map