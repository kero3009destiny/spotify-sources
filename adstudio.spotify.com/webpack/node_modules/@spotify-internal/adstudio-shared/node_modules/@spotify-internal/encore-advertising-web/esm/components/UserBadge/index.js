import React from 'react';
import styled from 'styled-components';
import { Panel } from '../Panel';
import { Type, ButtonTertiary, gray75, spacer8, spacer16, IconUser, } from '@spotify-internal/encore-web';
import { ellipsisStyles, renderTruncatedEmail, } from '../../utils/helpers/truncate';
const IconUserElement = styled(IconUser) `
  margin-bottom: 2px;
  position: relative;
  stroke: ${gray75};
`;
const Image = styled.img `
  border-radius: 50%;
  height: 66px;
  width: 66px;
`;
const Avatar = styled.div `
  align-items: center;
  align-self: center;
  background-color: #404040;
  border-radius: 50%;
  display: flex;
  flex-shrink: 0;
  height: 66px;
  justify-content: center;
  margin-right: ${spacer16};
  width: 66px;
`;
const UserBadgeContent = styled.div `
  align-items: center;
  display: flex;
  flex-grow: 1;
  flex-wrap: wrap;
  justify-content: flex-start;
  min-width: 0;
`;
const UserInfo = styled.div `
  display: flex;
  flex-basis: auto;
  flex-direction: column;
  flex-grow: 1;
  margin-right: ${spacer8};
  overflow-x: hidden;
`;
const UserInfoText = styled(Type.p) `
  ${ellipsisStyles}
`;
export function UserBadge({ className, ctaName = 'Change', showCTA, email = '', imgSrc, onChange, truncateEmail, userName, }) {
    const displayImage = imgSrc ? (React.createElement(Image, { alt: "user-avatar", src: imgSrc })) : (React.createElement(IconUserElement, { color: "gray60", iconSize: 32 }));
    const ctaList = showCTA
        ? [
            {
                buttonSize: ButtonTertiary.sm,
                condensed: true,
                label: ctaName,
                onClick: onChange,
            },
        ]
        : [];
    return (React.createElement("div", { className: className },
        React.createElement(Panel, { ctaList: ctaList, shadow: true },
            React.createElement(Avatar, null, displayImage),
            React.createElement(UserBadgeContent, null,
                React.createElement(UserInfo, null,
                    React.createElement(Type.p, { variant: Type.body1, weight: Type.bold, condensed: true }, userName),
                    React.createElement(UserInfoText, { variant: Type.body3, weight: Type.book, condensed: true }, truncateEmail ? renderTruncatedEmail(email, '@') : email))))));
}
//# sourceMappingURL=index.js.map