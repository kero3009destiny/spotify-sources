var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { EditCloseButton } from '../../EditCloseButton';
import { CollapsibleFormGroupHelper, } from '../CollapsibleFormGroupHelper';
export const EditableFormGroup = (_a) => {
    var { isEditing: isEditingProp, defaultIsEditing, editText, closeText, disabled, children, hideClose, onChange, onEdit, onClose } = _a, formGroupProps = __rest(_a, ["isEditing", "defaultIsEditing", "editText", "closeText", "disabled", "children", "hideClose", "onChange", "onEdit", "onClose"]);
    const [isEditing, setIsEditing] = React.useState(isEditingProp || !!defaultIsEditing);
    React.useEffect(() => {
        if (isEditingProp !== undefined)
            setIsEditing(isEditingProp);
    }, [isEditingProp]);
    return (React.createElement(CollapsibleFormGroupHelper, Object.assign({}, formGroupProps, { isExpanded: !!isEditing, disabled: disabled, extra: ((isEditing && !hideClose) || !isEditing) && (React.createElement(EditCloseButton, { isEditing: isEditing, editText: editText, closeText: closeText, disabled: disabled, "data-testid": "button", onEdit: e => {
                onChange === null || onChange === void 0 ? void 0 : onChange(true);
                onEdit === null || onEdit === void 0 ? void 0 : onEdit(e);
                setIsEditing(isEditingProp !== null && isEditingProp !== void 0 ? isEditingProp : true);
            }, onClose: e => {
                onChange === null || onChange === void 0 ? void 0 : onChange(false);
                onClose === null || onClose === void 0 ? void 0 : onClose(e);
                setIsEditing(isEditingProp !== null && isEditingProp !== void 0 ? isEditingProp : false);
            } })) }), children));
};
//# sourceMappingURL=index.js.map