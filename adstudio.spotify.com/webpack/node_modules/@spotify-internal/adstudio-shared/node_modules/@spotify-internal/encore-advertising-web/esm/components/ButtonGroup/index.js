var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import styled, { css } from 'styled-components';
import { Button } from './Button';
const StyledButtonGroup = styled.div `
  display: inline-flex;
  ${props => props.fullWidth &&
    css `
      flex: 1;
      width: 100%;
      ${Button} {
        flex: 1;
      }
    `}
`;
export const ButtonGroup = (_a) => {
    var _b;
    var { options, value, defaultValue, fullWidth, onChange, onClick } = _a, buttonProps = __rest(_a, ["options", "value", "defaultValue", "fullWidth", "onChange", "onClick"]);
    const [current, setCurrent] = React.useState((_b = value !== null && value !== void 0 ? value : defaultValue) !== null && _b !== void 0 ? _b : []);
    React.useEffect(() => {
        if (value !== undefined) {
            setCurrent(value);
        }
    }, [value]);
    const onButtonClick = (buttonValue, e) => {
        const newArray = addIfMissingRemoveIfPresent(buttonValue, current);
        onClick === null || onClick === void 0 ? void 0 : onClick(buttonValue, e);
        onChange === null || onChange === void 0 ? void 0 : onChange(newArray, current);
        if (value === undefined)
            setCurrent(newArray);
    };
    return (React.createElement(StyledButtonGroup, { fullWidth: fullWidth }, options.map((_a) => {
        var { value: optionValue } = _a, optionProps = __rest(_a, ["value"]);
        const isSelected = current.includes(optionValue);
        return (React.createElement(Button, Object.assign({ key: optionValue }, buttonProps, optionProps, { "data-selected": isSelected, "$isSelected": isSelected, onClick: (e) => {
                var _a;
                (_a = optionProps.onClick) === null || _a === void 0 ? void 0 : _a.call(optionProps, e);
                onButtonClick(optionValue, e);
            } })));
    })));
};
function addIfMissingRemoveIfPresent(v, array) {
    return array.includes(v) ? array.filter(v2 => v2 !== v) : array.concat([v]);
}
ButtonGroup.Button = Button;
//# sourceMappingURL=index.js.map