import React from 'react';
import styled, { css } from 'styled-components';
import { Tooltip, TooltipTrigger, Type, spacer16, } from '@spotify-internal/encore-web';
const GRAY_TITLE = '#919496';
const GRAY_FILLER = '#efefef';
const ItemContainer = styled.div `
  flex: 1;
  margin-right: ${spacer16};
`;
const FillerRectangle = styled.div `
  background-color: ${GRAY_FILLER};

  ${(props) => props.small
    ? css `
          display: inline-block;
          height: 12px;
          margin-top: 5px;
          width: 40px;
        `
    : css `
          height: 36px;
          margin-right: 36px;
          margin-top: 5px;
          width: 128px;
        `}
`;
const DescriptionTerm = styled.dt `
  color: ${GRAY_TITLE};
  font-size: 12px;
  font-weight: 300;
  letter-spacing: 1.1px;
  text-transform: uppercase;
  ${(props) => props.stylesTerm}
`;
const DescriptionTermLabel = styled(Type.h2) `
  ${(props) => props.performanceItem &&
    css `
      padding-bottom: 4px;
    `}
`;
const LeftSideLabel = styled(Type) `
  ${(props) => props.empty && `color: ${GRAY_TITLE};`}
  margin-right: 10px;
  padding-bottom: 0;
`;
const DescriptionDetails = styled.dd `
  margin-left: 0;
  padding-bottom: 16px;

  ${(props) => props.leftSideLabel &&
    css `
      span[role='button'] {
        padding-right: 4px;
      }
      button {
        margin-left: 0;
      }

      align-items: baseline;
      display: flex;
      line-height: 24px;
      padding-bottom: 0;
    `}

  ${(props) => props.performanceItem &&
    css `
      white-space: nowrap;
      padding-bottom: 0;

      h2 {
        padding-bottom: 0;
      }

      h3 {
        margin-top: 0;
        padding-bottom: 0;
      }

      small {
        font-size: 14px;
      }
    `}

  ${(props) => props.stylesDescription}
`;
export const DetailViewerListItem = ({ children, empty, label, leftSideLabel, onShowTooltip, performanceItem, stylesDescription, stylesTerm, tooltip, tooltipPlacement, }) => {
    const descProps = { stylesDescription };
    const termProps = { stylesTerm };
    return (React.createElement(ItemContainer, null,
        children && label && (React.createElement(DescriptionTerm, Object.assign({}, termProps),
            tooltip && (React.createElement(TooltipTrigger, { onShow: onShowTooltip, placement: tooltipPlacement, overlay: React.createElement(Tooltip, null, tooltip) },
                React.createElement(DescriptionTermLabel, { performanceItem: performanceItem, variant: Type.body3, weight: Type.bold },
                    React.createElement(React.Fragment, null, label)))),
            !tooltip && (React.createElement(DescriptionTermLabel, { performanceItem: performanceItem, variant: Type.body3, weight: Type.bold },
                React.createElement(React.Fragment, null, label))))),
        children && (React.createElement(DescriptionDetails, Object.assign({}, descProps, { leftSideLabel: !!leftSideLabel, performanceItem: performanceItem }),
            tooltip && leftSideLabel && (React.createElement(TooltipTrigger, { onShow: onShowTooltip, overlay: React.createElement(Tooltip, null, tooltip) },
                React.createElement(LeftSideLabel, { empty: empty, condensed: true, variant: Type.body2, weight: Type.book },
                    React.createElement(React.Fragment, null, leftSideLabel)))),
            !tooltip && leftSideLabel && (React.createElement(LeftSideLabel, { empty: empty, condensed: true, variant: Type.body2, weight: Type.book },
                React.createElement(React.Fragment, null, leftSideLabel))),
            empty && leftSideLabel && React.createElement(FillerRectangle, { small: true }),
            empty && !leftSideLabel && React.createElement(FillerRectangle, null),
            !empty && children))));
};
DetailViewerListItem.defaultProps = {
    performanceItem: false,
};
//# sourceMappingURL=index.js.map