var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useEffect, useState } from 'react';
import { IconHelpAlt, TooltipTrigger as EncoreTooltipTrigger, Tooltip, FormRadio as EncoreFormRadio, Type, gray50, white, black, gray90, gray70, IconChevronUp, IconChevronDown, spacer16, aquamarine, spacer24, spacer4, gray85, } from '@spotify-internal/encore-web';
import styled, { css } from 'styled-components';
import { plum } from '../../styles/colors';
import { Box, BoxGroup } from '../Box';
export var FormattedFormRadioAlignment;
(function (FormattedFormRadioAlignment) {
    FormattedFormRadioAlignment["CENTERED"] = "CENTERED";
    FormattedFormRadioAlignment["INLINE"] = "INLINE";
})(FormattedFormRadioAlignment || (FormattedFormRadioAlignment = {}));
const includeBaseTypeActiveColor = css `
  color: ${({ isActive, disabled }) => isActive ? white : disabled ? gray70 : black};
`;
const includeBaseIconActiveColor = css `
  color: ${({ isActive, disabled }) => isActive ? white : disabled ? gray70 : plum};
`;
export const ButtonIconContainer = styled.div `
  ${includeBaseIconActiveColor};
`;
export const ChevronContainer = styled.div `
  ${includeBaseIconActiveColor};
  justify-self: end;
`;
export const Description = styled(Type.p) `
  ${includeBaseTypeActiveColor};
  hyphens: auto;
  display: flex;
  align-items: center;
  & span {
    margin-left: ${spacer4};
  }
`;
export const Subdescription = styled(Type.p) `
  color: ${({ isActive, disabled }) => isActive ? gray90 : disabled ? gray70 : gray50};
  hyphens: auto;
`;
export const Heading = styled(Type.h4) `
  ${includeBaseTypeActiveColor};
`;
export const ChildContainer = styled.div `
  ${includeBaseTypeActiveColor};
  padding-top: ${spacer16};
`;
const Main = styled.div `
  display: flex;
  align-items: center;
  ${({ centerAlign }) => centerAlign
    ? css `
          flex-direction: column;
        `
    : css `
          flex-direction: row;
        `}

  & div:first-child {
    align-self: ${props => (props.centerAlign ? 'start' : 'center')};
    ${({ isActive }) => isActive
    ? css `
            & label > span {
              background: ${aquamarine};
              &:before {
                background: ${plum};
              }
            }
          `
    : ''}
  }
`;
const CenterAlignmentComponent = styled.div `
  flex: 1;
  display: grid;
  align-items: center;
  grid-gap: ${spacer24};
  ${props => props.centerAlign
    ? css `
          grid-template-rows: minmax(auto, max-content) 1fr;
          justify-items: center;
          text-align: center;
          ${Description} {
            justify-content: center;
          }
        `
    : css `
          grid-template-columns: minmax(auto, max-content) 1fr;
          margin-left: ${spacer24};
        `}
`;
const TooltipTrigger = styled(EncoreTooltipTrigger) `
  ${({ isActive }) => isActive
    ? css `
          color: ${white};
          & :hover {
            color: ${gray70};
          }
        `
    : css `
          color: ${gray70};
          & :hover {
            color: ${black};
          }
        `}
`;
const WithTooltip = ({ tooltip, isActive }) => {
    const [showTooltip, toggleTooltip] = React.useState(false);
    return (React.createElement(TooltipTrigger, { overlay: showTooltip && React.createElement(Tooltip, null, tooltip), placement: TooltipTrigger.right, onShow: () => toggleTooltip(true), onHide: () => toggleTooltip(false), isActive: isActive },
        React.createElement(IconHelpAlt, { iconSize: 16 })));
};
export const FormattedFormRadioGroup = BoxGroup;
export const FormattedFormRadio = (_a) => {
    var { withDropdown = false, defaultChecked = false, disabled = false, heading, tooltip, id, name, icon, description, subdescription, checked, alignment = FormattedFormRadioAlignment.INLINE, value, children, onChange } = _a, inputProps = __rest(_a, ["withDropdown", "defaultChecked", "disabled", "heading", "tooltip", "id", "name", "icon", "description", "subdescription", "checked", "alignment", "value", "children", "onChange"]);
    const [isActive, setActive] = useState(checked || defaultChecked || false);
    useEffect(() => {
        if (checked !== undefined) {
            setActive(checked);
        }
    }, [checked]);
    const Chevron = isActive ? IconChevronUp : IconChevronDown;
    const centerAlign = alignment === FormattedFormRadioAlignment.CENTERED;
    return (React.createElement(Box, { as: "button", elevated: !disabled && !isActive, cursor: !disabled ? 'pointer' : 'not-allowed', borderColor: !disabled ? 'transparent' : gray85, textAlign: "left", bgColor: isActive ? plum : white, onClick: () => {
            if (disabled)
                return;
            setActive(prevChecked => {
                const nextValue = prevChecked ? '' : value;
                onChange === null || onChange === void 0 ? void 0 : onChange(nextValue);
                return checked !== undefined ? checked : !prevChecked;
            });
        } },
        heading && (React.createElement(Heading, { weight: Type.bold, variant: Type.heading4, isActive: isActive, disabled: disabled }, heading)),
        React.createElement(Main, { centerAlign: centerAlign, isActive: isActive, withDropdown: withDropdown, disabled: disabled },
            React.createElement(EncoreFormRadio, Object.assign({ id: id, name: name, disabled: disabled, value: value, checked: isActive, onClick: e => e.stopPropagation() }, inputProps)),
            React.createElement(CenterAlignmentComponent, { centerAlign: alignment === FormattedFormRadioAlignment.CENTERED },
                icon && (React.createElement(ButtonIconContainer, { disabled: disabled, isActive: isActive }, icon)),
                React.createElement("div", null,
                    description && (React.createElement(Description, { disabled: disabled, isActive: isActive, weight: Type.bold, condensed: true },
                        description,
                        ' ',
                        tooltip && (React.createElement(WithTooltip, { tooltip: tooltip, isActive: isActive })))),
                    subdescription && (React.createElement(Subdescription, { disabled: disabled, isActive: isActive, weight: Type.book, condensed: true }, subdescription)),
                    children && (React.createElement(ChildContainer, { isActive: isActive, disabled: disabled }, children)))),
            withDropdown && (React.createElement(ChevronContainer, { disabled: disabled, isActive: isActive },
                React.createElement(Chevron, { iconSize: 32 }))))));
};
export default FormattedFormRadio;
//# sourceMappingURL=index.js.map