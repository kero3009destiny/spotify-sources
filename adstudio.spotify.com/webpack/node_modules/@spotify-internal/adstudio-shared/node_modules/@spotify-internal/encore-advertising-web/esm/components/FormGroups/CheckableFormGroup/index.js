var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { FormCheckbox, spacer16, spacer12, spacer4, } from '@spotify-internal/encore-web';
import { uniqueId } from 'lodash';
import { CollapsibleFormGroupHelper, } from '../CollapsibleFormGroupHelper';
import styled from 'styled-components';
const Description = styled.div `
  margin-left: calc(
    ${spacer16} + ${spacer12}
  ); //checkbox width + gap between checkbox and label
`;
const CheckboxContainer = styled.div `
  display: flex;
  & > div {
    padding: 0;
    min-height: auto;
    margin-right: ${spacer4};
    label {
      display: flex;
      > span {
        top: 0;
      }
    }
  }
`;
export const CheckableFormGroup = (_a) => {
    var { checked, defaultChecked, indeterminate, 'aria-checked': ariaChecked, disabled, onChange, description, children } = _a, formGroupProps = __rest(_a, ["checked", "defaultChecked", "indeterminate", 'aria-checked', "disabled", "onChange", "description", "children"]);
    const id = React.useMemo(() => uniqueId('checkable-form-group'), []);
    const [isChecked, setIsChecked] = React.useState(checked || !!defaultChecked);
    React.useEffect(() => {
        if (checked !== undefined)
            setIsChecked(checked);
    }, [checked]);
    const onCheck = React.useCallback(() => {
        if (checked !== undefined) {
            onChange === null || onChange === void 0 ? void 0 : onChange(!checked);
            return;
        }
        setIsChecked(prevChecked => {
            onChange === null || onChange === void 0 ? void 0 : onChange(!prevChecked);
            return !prevChecked;
        });
    }, [checked, onChange]);
    return (React.createElement(CollapsibleFormGroupHelper, Object.assign({}, formGroupProps, { isExpanded: isChecked, disabled: disabled, onLabelClick: onCheck, description: description && React.createElement(Description, null, description), icon: React.createElement(CheckboxContainer, null,
            React.createElement(FormCheckbox, { "data-testid": "checkbox", id: id, checked: isChecked, indeterminate: indeterminate, disabled: disabled, "aria-checked": ariaChecked, onChange: onCheck })) }), children));
};
//# sourceMappingURL=index.js.map