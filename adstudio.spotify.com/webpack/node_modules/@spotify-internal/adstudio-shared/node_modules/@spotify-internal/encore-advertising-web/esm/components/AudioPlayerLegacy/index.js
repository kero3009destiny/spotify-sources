import React from 'react';
import styled from 'styled-components';
import { Type, spacer16, gray30, spacer4, IconDownloadAlt, } from '@spotify-internal/encore-web';
import { downloadFile } from '../../utils/helpers/downloadFile';
import withAudioPlayerHOC from './AudioHOC';
import Scrubber from './AudioScrubberFluid';
import { Panel } from '../Panel';
import { DELETE_LABEL, DOWNLOAD_LABEL } from './constants';
import { plum } from '../../styles/colors';
import { PlayPauseButton } from '../PlayPauseButton';
const SIZE = 64;
const StyledPlayPauseButton = styled(PlayPauseButton) `
  margin-right: ${spacer16};
`;
const TrackDisplayContainer = styled.div `
  display: flex;
  flex: 1;
  flex-direction: column;
  height: ${SIZE + 8}px;
  justify-content: flex-end;
  min-width: 0;
  padding: 0;
`;
const EllipsisType = styled(Type.p) `
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
`;
const StyledLink = styled.a `
  text-decoration: none;
  &:active,
  &:hover {
    text-decoration: underline;
  }
`;
const Download = styled(Type.p) ``;
const NameAndDownloadDisplay = styled.div `
  display: grid;
  grid-template-columns: 1fr 120px;
  ${Download} {
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-gap: ${spacer4};
    align-items: center;
    justify-items: end;
    color: ${props => {
    var _a, _b;
    return ((_b = (_a = props.theme) === null || _a === void 0 ? void 0 : _a.colors) === null || _b === void 0 ? void 0 : _b.primaryColor)
        ? props.theme.colors.primaryColor
        : plum;
}};
    &:hover {
      color: ${gray30};
      cursor: pointer;
    }
  }
`;
function UnwrappedAudioPlayer({ deleteLabel = DELETE_LABEL, downloadLabel = DOWNLOAD_LABEL, name, nameUrl, onClickDelete, onClickDownload, onClickPlay, panelBorder = false, shouldShowDownload, sound, src, }) {
    const ctaList = [];
    if (onClickDelete) {
        ctaList.push({
            label: deleteLabel,
            onClick: onClickDelete,
        });
    }
    return (React.createElement(Panel, { border: false, ctaList: ctaList, ctaListStacked: true, shadow: panelBorder },
        React.createElement(StyledPlayPauseButton, { iconSize: SIZE, onClick: () => {
                sound.play();
                return onClickPlay && onClickPlay();
            }, paused: !(sound === null || sound === void 0 ? void 0 : sound.playing) }),
        React.createElement(TrackDisplayContainer, null,
            React.createElement(NameAndDownloadDisplay, null,
                React.createElement(EllipsisType, { variant: Type.body1, weight: Type.book, condensed: true }, nameUrl ? React.createElement(StyledLink, { href: nameUrl }, name) : name),
                shouldShowDownload && src && (React.createElement(Download, { "data-test": "download", condensed: true, onClick: () => {
                        downloadFile(name, src);
                        return onClickDownload && onClickDownload(src);
                    } },
                    React.createElement(React.Fragment, null,
                        React.createElement(IconDownloadAlt, { iconSize: 16 }),
                        React.createElement("span", null, downloadLabel))))),
            React.createElement(Scrubber, { playingRatio: sound.playingRatio, currentTime: sound.currentTime, duration: sound.duration, onSliderChange: sound.seek }))));
}
export const AudioPlayerLegacy = withAudioPlayerHOC(UnwrappedAudioPlayer);
//# sourceMappingURL=index.js.map