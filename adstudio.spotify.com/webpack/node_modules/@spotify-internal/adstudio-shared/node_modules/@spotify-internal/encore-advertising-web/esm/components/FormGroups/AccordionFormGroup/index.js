var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { Experimental__IconChartDown as IconChartDown } from '@spotify-internal/encore-web';
import styled, { css } from 'styled-components';
import { CollapsibleFormGroupHelper, } from '../CollapsibleFormGroupHelper';
const ArrowIcon = styled(IconChartDown) `
  display: flex;
  transform: rotate(-90deg);
  transition: transform 150ms;
  ${props => props.isExpanded &&
    css `
      transform: rotate(0deg);
    `};
`;
export const AccordionFormGroup = (_a) => {
    var { isExpanded: isExpandedProp, defaultIsExpanded, children, onChange } = _a, formGroupProps = __rest(_a, ["isExpanded", "defaultIsExpanded", "children", "onChange"]);
    const [isExpanded, setIsExpanded] = React.useState(isExpandedProp || !!defaultIsExpanded);
    React.useEffect(() => {
        if (isExpandedProp !== undefined)
            setIsExpanded(isExpandedProp);
    }, [isExpandedProp]);
    const onLabelClick = React.useCallback(() => {
        if (isExpandedProp !== undefined) {
            onChange === null || onChange === void 0 ? void 0 : onChange(!isExpandedProp);
            return;
        }
        setIsExpanded(prevIsExpanded => {
            onChange === null || onChange === void 0 ? void 0 : onChange(!prevIsExpanded);
            return !prevIsExpanded;
        });
    }, [isExpandedProp, onChange]);
    return (React.createElement(CollapsibleFormGroupHelper, Object.assign({}, formGroupProps, { isExpanded: isExpanded, icon: React.createElement(ArrowIcon, { iconSize: 16, isExpanded: isExpanded, onClick: onLabelClick }), onLabelClick: onLabelClick }), children));
};
//# sourceMappingURL=index.js.map