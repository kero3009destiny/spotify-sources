import React, { Fragment } from 'react';
import styled from 'styled-components';
import { spacer4, spacer12, spacer16, gray90, gray75, gray40, azure, warning, failure, success, Type, } from '@spotify-internal/encore-web';
const STATUS_COLORS = {
    success,
    warning,
    failure,
    budget: azure,
};
const INLINE_PERCENTAGE_TEXT_WIDTH = 60;
const Container = styled.div `
  width: 100%;
`;
const PacingMeterContainer = styled.div `
  border-radius: ${spacer12};
  height: ${spacer12};
  overflow: hidden;
  position: relative;
  ${props => props.showPercentageInline && 'display: inline-block;'}
  ${props => props.showPercentageInline
    ? `width: calc(100% - ${INLINE_PERCENTAGE_TEXT_WIDTH}px);`
    : 'width: 100%;'}
`;
const PacingMeterWrapper = styled.div `
  background: ${gray90};
  border-radius: ${spacer12};
  height: ${spacer12};
  overflow: hidden;
`;
const Meter = styled.div `
  background-color: ${props => STATUS_COLORS[props.status]};
  height: ${spacer12};
  width: ${props => props.progressPercentage}%;
`;
const ExpectedProgress = styled.div `
  background-color: ${gray40};
  height: ${spacer12}};
  position: relative;
  top: -${spacer12}};
  width: ${spacer4};
  left: ${props => props.expectedProgressPercentage}%;
`;
const Budget = styled(Type) `
  padding-bottom: ${spacer16};
`;
const BudgetTotal = styled.small `
  color: ${gray75};
  display: inline-block;
  font-size: 14px;
`;
const PacingPercentage = styled.div `
  ${props => props.showPercentageInline && 'display: inline-block;'}
  ${props => props.showPercentageInline && `padding: 0 ${spacer12};`}
  ${props => !props.showPercentageInline && 'position: relative;'}
  vertical-align: middle;
  box-sizing: content-box;
  width: 34px;
  white-space: nowrap;
  overflow: visible;
  text-overflow: clip;
  left: calc(
    ${props => props.progressPercentage}% -
      ${props => props.percentageTextPixelAdjustment}px
  );
`;
export function PacingMeter({ budgetMode = false, budgetConsumed, expectedProgressPercentage = budgetMode ? 100 : 0, progressPercentage = 0, showPercentageInline = false, status = 'success', totalBudget, }) {
    const percentageTextPixelAdjustment = Math.min(progressPercentage, 36);
    const pacingPercentage = expectedProgressPercentage === 0
        ? 0
        : Math.floor((progressPercentage / expectedProgressPercentage) * 100);
    return (React.createElement(Container, null,
        budgetMode && (React.createElement(Fragment, null,
            React.createElement(Budget, { as: "h3", variant: Type.heading3 },
                budgetConsumed,
                React.createElement(BudgetTotal, null,
                    "/",
                    totalBudget)))),
        React.createElement(PacingMeterContainer, { showPercentageInline: showPercentageInline },
            React.createElement(PacingMeterWrapper, null,
                React.createElement(Meter, { status: status, progressPercentage: progressPercentage })),
            React.createElement(ExpectedProgress, { expectedProgressPercentage: expectedProgressPercentage })),
        React.createElement(PacingPercentage, { progressPercentage: progressPercentage, percentageTextPixelAdjustment: percentageTextPixelAdjustment, showPercentageInline: showPercentageInline },
            React.createElement(Type.p, { condensed: true, variant: Type.body2 }, !budgetMode && `${pacingPercentage}%`))));
}
//# sourceMappingURL=index.js.map