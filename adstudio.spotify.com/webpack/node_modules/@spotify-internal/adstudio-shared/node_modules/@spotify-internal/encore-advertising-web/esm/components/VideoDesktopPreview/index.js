import React from 'react';
import styled from 'styled-components';
import { ButtonIcon, gray50, gray75, gray90, IconHelpAlt, spacer4, Tooltip, TooltipTrigger, white, } from '@spotify-internal/encore-web';
import { VideoPlayer } from '../VideoPlayer';
const PreviewBody = styled.div `
  display: flex;
  position: relative;
  margin-right: 1.5em;
  width: 100%;
  border-radius: 4px;
  box-shadow: 0 3px 9px 0 ${gray90};
`;
const Panel = styled.div `
  border-radius: 4px;
  box-shadow: 0 3px 9px 0 ${gray90};
  padding: 20px 15px;
  width: 100%;
`;
const DesktopImagePreview = styled.img `
  top: 0;
  left: -1px;
  width: 100%;
  max-width: initial;
`;
const ImageWapper = styled.div `
  width: 24.3%;
  position: absolute;
  z-index: 1000;
  top: 52%;
  left: 0;
`;
const VideoWrapper = styled.div `
  position: absolute;
  top: 28%;
  left: 35%;
  width: 50.2%;
`;
const ImageTooltip = styled(TooltipTrigger) `
  position: absolute;
  margin-left: ${spacer4};
  margin-top: ${spacer4};
`;
const ImageTooltipButton = styled(ButtonIcon) `
  color: ${gray50};

  &:hover {
    color: ${white};
  }
  &:after {
    display: none;
  }
`;
const HeaderWrapper = styled.div `
  width: 24.3%;
  position: absolute;
  z-index: 1000;
  top: 89.8%;
  padding-left: 4px;
`;
const HeaderText = styled.div `
  padding-bottom: 0;
  color: ${props => (props.color ? props.color : white)};
  font-size: ${props => (props.fontSize ? props.fontSize : '6px')};
  min-height: 1.4em;
  line-height: 1.4;
  font-weight: bold;
  white-space: nowrap;
  overflow: hidden;
`;
export const VideoDesktopPreview = ({ imageUrl, videoUrl, showPanel = true, title, headline, headerFontSize, imageTooltipMessage, }) => {
    const [showTooltip, setShowTooltip] = React.useState(false);
    const body = (React.createElement(PreviewBody, null,
        React.createElement(DesktopImagePreview, { alt: "desktop-preview", src: !title && !headline
                ? 'https://adstudio.scdn.co/assets/desktop-preview.png'
                : 'https://adstudio.scdn.co/assets/video-desktop-preview.png' }),
        React.createElement(ImageWapper, { "data-test": "ta-image-preview" },
            imageTooltipMessage && (React.createElement(ImageTooltip, { onShow: () => setShowTooltip(true), onHide: () => setShowTooltip(false), placement: TooltipTrigger.right, overlay: showTooltip && React.createElement(Tooltip, { id: "help" }, imageTooltipMessage) },
                React.createElement(ImageTooltipButton, { "data-testid": "tooltip-btn", "aria-label": "help" },
                    React.createElement(IconHelpAlt, { iconSize: 16 })))),
            imageUrl && React.createElement("img", { alt: "Upload Preview", src: imageUrl, width: "100%" })),
        React.createElement(VideoWrapper, null, videoUrl && React.createElement(VideoPlayer, { videoProps: { src: videoUrl } })),
        React.createElement(HeaderWrapper, null,
            title && React.createElement(HeaderText, { fontSize: headerFontSize }, title),
            headline && (React.createElement(HeaderText, { color: gray75, fontSize: headerFontSize }, headline)))));
    if (showPanel)
        return React.createElement(Panel, null, body);
    return body;
};
//# sourceMappingURL=index.js.map