"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = FormGroup;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _StyledType = require("./StyledType");

var _Container = _interopRequireDefault(require("./Container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var StyledSubDescription = (0, _styledComponents["default"])(_StyledType.SubDescription).withConfig({
  displayName: "FormGroup__StyledSubDescription",
  componentId: "jo233u-0"
})(["padding-top:", ";padding-bottom:", ";"], function (props) {
  return props.invertPadding && '0';
}, function (props) {
  return props.invertPadding && '4px';
});

var maybeRenderLabel = function maybeRenderLabel(label, disabled, isOptional, optionalLabelText, forLabel, theme) {
  return label ? /*#__PURE__*/_react["default"].createElement(_StyledType.Label, {
    element: "label",
    variant: "body-2-bold",
    disabled: disabled,
    htmlFor: forLabel,
    theme: theme
  }, label, isOptional && /*#__PURE__*/_react["default"].createElement(_StyledType.OptionalLabel, {
    element: "label",
    variant: "body-2-book",
    htmlFor: forLabel,
    theme: theme
  }, optionalLabelText)) : null;
};

var maybeRenderDescription = function maybeRenderDescription(description) {
  return description ? /*#__PURE__*/_react["default"].createElement(_StyledType.Description, {
    element: "p",
    variant: "body-2-book"
  }, description) : null;
};

var renderChildren = function renderChildren(children, inline) {
  return /*#__PURE__*/_react["default"].createElement(_StyledType.Span, {
    element: "span",
    variant: "body-1-book",
    inline: inline
  }, children);
};

var maybeRenderSubDescription = function maybeRenderSubDescription(showError, subDescription, error, warning, invertPadding) {
  var content;
  if (error) content = showError && error;else if (warning) content = showError && warning;else if (subDescription) content = subDescription;
  if (!content) return null;
  return /*#__PURE__*/_react["default"].createElement(StyledSubDescription, {
    element: "p",
    variant: "body-2-book",
    flush: true,
    invertPadding: invertPadding,
    subDescription: subDescription,
    error: error,
    warning: warning
  }, content);
};

function FormGroup(_ref) {
  var _ref$allowSubDescript = _ref.allowSubDescriptionClearance,
      allowSubDescriptionClearance = _ref$allowSubDescript === void 0 ? false : _ref$allowSubDescript,
      children = _ref.children,
      description = _ref.description,
      disabled = _ref.disabled,
      error = _ref.error,
      flush = _ref.flush,
      forLabel = _ref.forLabel,
      inline = _ref.inline,
      isOptional = _ref.isOptional,
      _ref$optionalLabelTex = _ref.optionalLabelText,
      optionalLabelText = _ref$optionalLabelTex === void 0 ? 'Optional' : _ref$optionalLabelTex,
      label = _ref.label,
      showErrorOnTop = _ref.showErrorOnTop,
      subDescription = _ref.subDescription,
      _ref$theme = _ref.theme,
      theme = _ref$theme === void 0 ? 'light' : _ref$theme,
      warning = _ref.warning,
      props = _objectWithoutProperties(_ref, ["allowSubDescriptionClearance", "children", "description", "disabled", "error", "flush", "forLabel", "inline", "isOptional", "optionalLabelText", "label", "showErrorOnTop", "subDescription", "theme", "warning"]);

  return /*#__PURE__*/_react["default"].createElement(_Container["default"], _extends({}, props, {
    flush: flush,
    theme: theme,
    applyClearance: allowSubDescriptionClearance && !(subDescription || error || warning)
  }), maybeRenderLabel(label, disabled, isOptional, optionalLabelText, forLabel, theme), maybeRenderDescription(description), showErrorOnTop && maybeRenderSubDescription(showErrorOnTop, null, error, warning, true), renderChildren(children, inline), maybeRenderSubDescription(!showErrorOnTop, subDescription, error, warning));
}

FormGroup.propTypes = {
  allowSubDescriptionClearance: _propTypes["default"].bool,
  children: _propTypes["default"].node,
  description: _propTypes["default"].node,
  disabled: _propTypes["default"].bool,
  error: _propTypes["default"].node,
  flush: _propTypes["default"].bool,
  forLabel: _propTypes["default"].string,
  inline: _propTypes["default"].bool,
  isOptional: _propTypes["default"].bool,
  optionalLabelText: _propTypes["default"].string,
  label: _propTypes["default"].node,
  showErrorOnTop: _propTypes["default"].bool,
  subDescription: _propTypes["default"].node,
  theme: _propTypes["default"].string,
  warning: _propTypes["default"].node
};