"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _uniqueId2 = _interopRequireDefault(require("lodash/uniqueId"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactPortalTooltip = _interopRequireDefault(require("react-portal-tooltip"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _encoreFoundation = require("@spotify-internal/encore-foundation");

var _encoreWeb = require("@spotify-internal/encore-web");

var _Icons = _interopRequireDefault(require("../Icons"));

var _positions = _interopRequireDefault(require("./positions"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ButtonIcon = _Icons["default"].ButtonIcon,
    IconHelpAlt = _Icons["default"].IconHelpAlt;

var TooltipWrapper = _styledComponents["default"].div.withConfig({
  displayName: "TooltipInfo__TooltipWrapper",
  componentId: "sc-1q4yebt-0"
})(["align-items:center;display:flex;"]);

var CTAButton = _styledComponents["default"].button.withConfig({
  displayName: "TooltipInfo__CTAButton",
  componentId: "sc-1q4yebt-1"
})(["background-color:transparent;border:0;cursor:", ";display:flex;padding:0;text-transform:inherit;", " &:focus{outline:0;}&:hover{color:", ";}&icon{color:", ";}"], function (props) {
  return props.onClick ? 'pointer' : 'default';
}, function (props) {
  return props.alignRight ? "\n    margin-left: auto;\n    text-align: right;\n  " : '';
}, _encoreFoundation.black, _encoreFoundation.gray45);
/* eslint-disable react/prop-types */


function InteractiveInfo(_ref) {
  var RenderIcon = _ref.icon,
      iconSize = _ref.iconSize,
      marginTop = _ref.marginTop;
  var StyledIcon = (0, _styledComponents["default"])(RenderIcon).withConfig({
    displayName: "TooltipInfo__StyledIcon",
    componentId: "sc-1q4yebt-2"
  })(["margin-left:", ";margin-top:", ";"], _encoreFoundation.spacer8, marginTop);
  return /*#__PURE__*/_react["default"].createElement(ButtonIcon, {
    component: "span"
  }, /*#__PURE__*/_react["default"].createElement(StyledIcon, {
    iconSize: iconSize || 16
  }));
}
/* eslint-enable react/prop-types */


var TooltipInfo = /*#__PURE__*/function (_Component) {
  _inherits(TooltipInfo, _Component);

  var _super = _createSuper(TooltipInfo);

  function TooltipInfo() {
    var _this;

    _classCallCheck(this, TooltipInfo);

    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(_args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      isTooltipActive: false,
      targetId: (0, _uniqueId2["default"])('example-tooltip-')
    });

    _defineProperty(_assertThisInitialized(_this), "showTooltip", function () {
      if (typeof _this.props.onShow === 'function') {
        var _this$props;

        (_this$props = _this.props).onShow.apply(_this$props, arguments);
      }

      _this.setState({
        isTooltipActive: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "hideTooltip", function () {
      if (typeof _this.props.onHide === 'function') {
        var _this$props2;

        (_this$props2 = _this.props).onHide.apply(_this$props2, arguments);
      }

      _this.setState({
        isTooltipActive: false
      });
    });

    _defineProperty(_assertThisInitialized(_this), "showOnClick", function () {
      if (_this.state.isTooltipActive) {
        var _this2;

        (_this2 = _this).hideTooltip.apply(_this2, arguments);
      } else {
        var _this3;

        (_this3 = _this).showTooltip.apply(_this3, arguments);
      }
    });

    return _this;
  }

  _createClass(TooltipInfo, [{
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          className = _this$props3.className,
          children = _this$props3.children,
          icon = _this$props3.icon,
          iconSize = _this$props3.iconSize,
          tooltipText = _this$props3.tooltipText,
          placement = _this$props3.placement,
          targetId = _this$props3.targetId,
          tooltipTimeout = _this$props3.tooltipTimeout,
          triggerOnMouse = _this$props3.triggerOnMouse,
          triggerOnClick = _this$props3.triggerOnClick,
          arrow = _this$props3.arrow,
          styleOverrides = _this$props3.styleOverrides,
          arrowStyleOverrides = _this$props3.arrowStyleOverrides,
          wrapperAlignRight = _this$props3.wrapperAlignRight,
          iconMarginTop = _this$props3.iconMarginTop;
      /* Styles must be inline to customize. You can provide a style prop to
      customize some part of the tooltip. You can give it an object with two
      properties: style, that will be applied to the tooltip itself, and
      arrowStyle which will be applied to the arrows. */

      var overrideStyles = {
        style: _objectSpread({
          background: _encoreFoundation.white,
          borderRadius: '4px',
          boxShadow: '0 4px 12px 0 rgba(0,0,0,0.2)',
          color: _encoreFoundation.gray10,
          fontWeight: '400',
          textAlign: 'left',
          border: '1px solid rgba(0,0,0,0.1)',
          display: 'inline-block',
          maxWidth: '240px',
          position: 'relative',
          fontSize: '14px',
          padding: '8px 12px',
          zIndex: '1060'
        }, styleOverrides),
        arrowStyle: _objectSpread({
          color: arrow === null ? false : _encoreFoundation.white,
          // these were set to false since we dont need the arrow.
          borderColor: arrow === null ? false : 'rgba(0,0,0,0.1)'
        }, arrowStyleOverrides)
      };
      /* Set for backwards compatability. Checks if the placement prop
         has been set to an non supported position and will default
         to right position. */

      var isUnsupportedPosition = !_positions["default"].includes(placement);
      var id = targetId || this.state.targetId;
      var contentTooltipEnabled = children && !icon;
      var fullTreatmentEnabled = children && icon;
      return /*#__PURE__*/_react["default"].createElement(_react.Fragment, null, /*#__PURE__*/_react["default"].createElement(TooltipWrapper, {
        className: className
      }, (icon || children) && /*#__PURE__*/_react["default"].createElement(_react.Fragment, null, fullTreatmentEnabled && /*#__PURE__*/_react["default"].createElement("span", null, children), /*#__PURE__*/_react["default"].createElement(CTAButton, {
        id: id,
        onMouseEnter: triggerOnMouse && this.showTooltip,
        onMouseLeave: triggerOnMouse && this.hideTooltip,
        onClick: triggerOnClick ? this.showOnClick : undefined,
        alignRight: wrapperAlignRight
      }, contentTooltipEnabled && /*#__PURE__*/_react["default"].createElement("span", null, children), icon && /*#__PURE__*/_react["default"].createElement(InteractiveInfo, {
        icon: icon,
        iconSize: iconSize,
        marginTop: iconMarginTop
      })))), /*#__PURE__*/_react["default"].createElement(_reactPortalTooltip["default"], {
        active: this.state.isTooltipActive,
        position: isUnsupportedPosition ? 'right' : placement,
        arrow: arrow // set to remove arrow from tooltip
        ,
        parent: "#".concat(id),
        style: overrideStyles,
        tooltipTimeout: tooltipTimeout
      }, /*#__PURE__*/_react["default"].createElement(_encoreWeb.Type.p, {
        // target this class to beat sp-bootstrap's styles
        className: "tooltip-info-tooltip-text",
        variant: _encoreWeb.Type.body2,
        weight: _encoreWeb.Type.book,
        condensed: true
      }, tooltipText)));
    }
  }], [{
    key: "defaultProps",
    get: function get() {
      return {
        tooltipTimeout: 50,
        icon: IconHelpAlt,
        triggerOnMouse: true,
        triggerOnClick: false,
        targetId: (0, _uniqueId2["default"])('example-tooltip-'),
        arrow: null,
        styleOverrides: {},
        arrowStyleOverrides: {},
        iconMarginTop: 0
      };
    }
  }]);

  return TooltipInfo;
}(_react.Component);

_defineProperty(TooltipInfo, "propTypes", {
  className: _propTypes["default"].string,
  children: _propTypes["default"].node,
  icon: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].func]),
  iconSize: _propTypes["default"].number,
  tooltipText: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),
  placement: _propTypes["default"].oneOf(_positions["default"]),
  onShow: _propTypes["default"].func,
  onHide: _propTypes["default"].func,
  targetId: _propTypes["default"].string,
  tooltipTimeout: _propTypes["default"].number,
  triggerOnMouse: _propTypes["default"].bool,
  triggerOnClick: _propTypes["default"].bool,
  arrow: _propTypes["default"].string,
  styleOverrides: _propTypes["default"].objectOf(_propTypes["default"].string),
  arrowStyleOverrides: _propTypes["default"].objectOf(_propTypes["default"].string),
  wrapperAlignRight: _propTypes["default"].bool,
  iconMarginTop: _propTypes["default"].string
});

var _default = TooltipInfo;
exports["default"] = _default;