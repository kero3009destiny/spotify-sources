"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatDate = formatDate;
exports.formatDateWithZeros = formatDateWithZeros;
exports.formatDateFullMonth = formatDateFullMonth;
exports.formatDateWithTime = formatDateWithTime;
exports.daysBetweenDates = daysBetweenDates;
exports.daysFromToday = daysFromToday;
exports.endOfDay = endOfDay;
exports.timeFromNow = timeFromNow;
exports.formatDateInternational = exports.millisToMinutes = void 0;

var _memoize2 = _interopRequireDefault(require("lodash/memoize"));

var _moment = _interopRequireDefault(require("moment"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * Format date strings
 * @param {String} isoDate
 */
var millisToMinutes = function millisToMinutes(millis) {
  return millis / 1000 / 60;
};

exports.millisToMinutes = millisToMinutes;

function formatDate(date) {
  var timezoneOffsetMillis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return (0, _moment["default"])(date).utcOffset(millisToMinutes(timezoneOffsetMillis)).format('LLL');
}

function formatDateWithZeros(isoDate) {
  return (0, _moment["default"])(isoDate).utcOffset(millisToMinutes(0)).format('MMM DD, YYYY');
}
/* eslint-disable no-underscore-dangle */


var _formatDateInternational = function _formatDateInternational(isoDate) {
  return (0, _moment["default"])(isoDate).format('DD MMM YYYY');
};
/* eslint-enable no-underscore-dangle */


var formatDateInternational = (0, _memoize2["default"])(_formatDateInternational);
exports.formatDateInternational = formatDateInternational;

function formatDateFullMonth(isoDate) {
  return (0, _moment["default"])(isoDate).utcOffset(millisToMinutes(0)).format('MMMM DD, YYYY');
}

function formatDateWithTime(isoDate) {
  return (0, _moment["default"])(isoDate).utcOffset(millisToMinutes(0)).format('LLL');
}
/**
 * Format date strings
 * @param {String} isoDateStart
 * @param {String} isoDateEnd
 */


function daysBetweenDates(isoDateStart, isoDateEnd) {
  var end = (0, _moment["default"])(isoDateEnd);
  var start = (0, _moment["default"])(isoDateStart);
  return Math.ceil(end.diff(start, 'days', true));
}
/**
 * @param  {Number} days
 * @return {Date}
 */


function daysFromToday(days) {
  var today = new Date();
  today.setDate(today.getDate() + days);
  today.setHours(0, 1, 0, 0);
  return today;
}
/**
 * Set inputted date time to be 11:59PM
 * @param  {Date} date
 * @return {Date}
 */


function endOfDay(date) {
  var newDate = new Date(date);
  newDate.setHours(23, 59, 0, 0);
  return newDate;
}

function timeFromNow(date) {
  return (0, _moment["default"])(date).utcOffset(millisToMinutes(0)).fromNow();
}