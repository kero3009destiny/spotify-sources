"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = UserBadge;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Icons = _interopRequireDefault(require("../Icons"));

var _Panel = _interopRequireDefault(require("../Panel"));

var _encoreWeb = require("@spotify-internal/encore-web");

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _encoreFoundation = require("@spotify-internal/encore-foundation");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var IconUser = _Icons["default"].IconUser;
var ellipsisSharableStyles = (0, _styledComponents.css)(["color:", ";overflow-x:hidden;text-overflow:ellipsis;white-space:nowrap;"], _encoreFoundation.gray45);
var IconUserElement = (0, _styledComponents["default"])(IconUser).withConfig({
  displayName: "UserBadge__IconUserElement",
  componentId: "sc-12rl1x6-0"
})(["margin-bottom:2px;position:relative;stroke:", ";"], _encoreFoundation.gray75);

var TruncateContainer = _styledComponents["default"].div.withConfig({
  displayName: "UserBadge__TruncateContainer",
  componentId: "sc-12rl1x6-1"
})(["display:flex;min-width:200px;"]);

var Ellipses = _styledComponents["default"].div.withConfig({
  displayName: "UserBadge__Ellipses",
  componentId: "sc-12rl1x6-2"
})(["", ""], ellipsisSharableStyles);

var Image = _styledComponents["default"].img.withConfig({
  displayName: "UserBadge__Image",
  componentId: "sc-12rl1x6-3"
})(["border-radius:50%;height:66px;width:66px;"]);

var Avatar = _styledComponents["default"].div.withConfig({
  displayName: "UserBadge__Avatar",
  componentId: "sc-12rl1x6-4"
})(["align-items:center;align-self:center;background-color:#404040;border-radius:50%;display:flex;flex-shrink:0;height:66px;justify-content:center;margin-right:", ";width:66px;"], _encoreFoundation.spacer16);

var UserBadgeContent = _styledComponents["default"].div.withConfig({
  displayName: "UserBadge__UserBadgeContent",
  componentId: "sc-12rl1x6-5"
})(["align-items:center;display:flex;flex-grow:1;flex-wrap:wrap;justify-content:flex-start;min-width:0;"]);

var UserInfo = _styledComponents["default"].div.withConfig({
  displayName: "UserBadge__UserInfo",
  componentId: "sc-12rl1x6-6"
})(["display:flex;flex-basis:auto;flex-direction:column;flex-grow:1;margin-right:", ";overflow-x:hidden;"], _encoreFoundation.spacer8);

var CTAWrapper = _styledComponents["default"].div.withConfig({
  displayName: "UserBadge__CTAWrapper",
  componentId: "sc-12rl1x6-7"
})(["flex-shrink:0;"]);

var UserInfoText = (0, _styledComponents["default"])(_encoreWeb.Type.p).withConfig({
  displayName: "UserBadge__UserInfoText",
  componentId: "sc-12rl1x6-8"
})(["", ""], ellipsisSharableStyles);
var CTAButton = (0, _styledComponents["default"])(_encoreWeb.ButtonTertiary).withConfig({
  displayName: "UserBadge__CTAButton",
  componentId: "sc-12rl1x6-9"
})(["padding:0;"]); // TODO: Move this to utils

var truncate = function truncate(email, delim) {
  var parts = email.split(delim);
  var delimIndex = email.indexOf(delim);

  if (email.indexOf(delim) === -1) {
    return email;
  }

  return /*#__PURE__*/_react["default"].createElement(TruncateContainer, null, /*#__PURE__*/_react["default"].createElement(Ellipses, null, "".concat(parts[0].slice(0, delimIndex))), /*#__PURE__*/_react["default"].createElement("div", null, " ", "".concat(delim).concat(parts[1]), " "));
};

function UserBadge(_ref) {
  var className = _ref.className,
      ctaName = _ref.ctaName,
      showCTA = _ref.showCTA,
      _ref$email = _ref.email,
      email = _ref$email === void 0 ? '' : _ref$email,
      imgSrc = _ref.imgSrc,
      onChange = _ref.onChange,
      truncateEmail = _ref.truncateEmail,
      userName = _ref.userName;
  var displayImage = imgSrc ? /*#__PURE__*/_react["default"].createElement(Image, {
    alt: "user-avatar",
    src: imgSrc
  }) : /*#__PURE__*/_react["default"].createElement(IconUserElement, {
    color: "gray60",
    iconSize: 32
  });
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: className
  }, /*#__PURE__*/_react["default"].createElement(_Panel["default"], {
    shadow: true
  }, /*#__PURE__*/_react["default"].createElement(Avatar, null, displayImage), /*#__PURE__*/_react["default"].createElement(UserBadgeContent, null, /*#__PURE__*/_react["default"].createElement(UserInfo, null, /*#__PURE__*/_react["default"].createElement(_encoreWeb.Type.p, {
    variant: _encoreWeb.Type.body1,
    weight: _encoreWeb.Type.bold,
    condensed: true
  }, userName), /*#__PURE__*/_react["default"].createElement(UserInfoText, {
    variant: _encoreWeb.Type.body3,
    weight: _encoreWeb.Type.book,
    condensed: true
  }, truncateEmail ? truncate(email, '@') : email)), showCTA && /*#__PURE__*/_react["default"].createElement(CTAWrapper, null, /*#__PURE__*/_react["default"].createElement(CTAButton, {
    buttonSize: _encoreWeb.ButtonTertiary.sm,
    color: "blue",
    onClick: onChange
  }, ctaName)))));
}

UserBadge.defaultProps = {
  ctaName: 'Change'
};
UserBadge.propTypes = {
  className: _propTypes["default"].string,
  ctaName: _propTypes["default"].string,
  email: _propTypes["default"].string,
  imgSrc: _propTypes["default"].string,
  onChange: _propTypes["default"].func.isRequired,
  showCTA: _propTypes["default"].bool,
  truncateEmail: _propTypes["default"].bool,
  userName: _propTypes["default"].string
};