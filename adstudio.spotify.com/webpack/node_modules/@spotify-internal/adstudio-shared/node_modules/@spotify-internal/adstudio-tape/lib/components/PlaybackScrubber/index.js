"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = PlaybackScrubber;
exports.constants = exports.PlaybackScrubberDisplayFill = exports.PlaybackScrubberDisplay = exports.PlaybackScrubberControl = exports.PlaybackScrubberContainer = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _encoreFoundation = require("@spotify-internal/encore-foundation");

var constants = _interopRequireWildcard(require("./constants"));

exports.constants = constants;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var PlaybackScrubberContainer = _styledComponents["default"].div.withConfig({
  displayName: "PlaybackScrubber__PlaybackScrubberContainer",
  componentId: "sc-15t15c2-0"
})(["{position:relative;height:", "px;cursor:pointer;}"], constants.thumbDiameter * 2);

exports.PlaybackScrubberContainer = PlaybackScrubberContainer;
var thumb = (0, _styledComponents.css)(["background:", ";border:", "px solid ", ";border-radius:", "px;box-shadow:0 0 ", "px 0 rgba(0,0,0,15);cursor:pointer;height:", "px;margin-left:1px;margin-top:1px;width:", "px;"], _encoreFoundation.white, constants.thumbBorderWidth, constants.thumbColor, constants.thumbRadius, constants.thumbRadius, constants.thumbDiameter, constants.thumbDiameter);

var PlaybackScrubberControl = _styledComponents["default"].input.withConfig({
  displayName: "PlaybackScrubber__PlaybackScrubberControl",
  componentId: "sc-15t15c2-1"
})(["width:100%;-webkit-appearance:none;background:transparent;border:0 solid transparent;outline:none;position:absolute;top:0;bottom:0;left:0;right:0;z-index:1;margin:auto;", " &::-webkit-slider-runnable-track{background:transparent;color:transparent;}&::-moz-range-track{background:transparent;color:transparent;}&::-ms-fill-lower{background:transparent;color:transparent;}&::-ms-track{background:transparent;color:transparent;}&:hover{-webkit-appearance:none;}", ":hover &::-webkit-slider-thumb{display:block;}", ":hover &::-moz-range-thumb{display:block;}", ":hover &::-ms-thumb{display:block;}&::-webkit-slider-thumb{", ";-webkit-appearance:none;display:none;}&::-moz-range-thumb{", ";display:none;}&::-ms-thumb{", ";box-sizing:border-box;display:none;}&::-ms-ticks-after,&::-ms-ticks-before,&::-ms-tooltip{display:none;}"], function (props) {
  return props.hideControl ? (0, _styledComponents.css)(["display:none;"]) : null;
}, PlaybackScrubberContainer, PlaybackScrubberContainer, PlaybackScrubberContainer, thumb, thumb, thumb);

exports.PlaybackScrubberControl = PlaybackScrubberControl;

var PlaybackScrubberDisplay = _styledComponents["default"].div.withConfig({
  displayName: "PlaybackScrubber__PlaybackScrubberDisplay",
  componentId: "sc-15t15c2-2"
})(["background:", ";border-radius:", "px;height:", ";overflow:hidden;position:absolute;top:", ";left:0;right:0;z-index:0;"], function (props) {
  return props.fillColor;
}, function (props) {
  return props.borderRadius;
}, function (props) {
  if (props.hideControl) return (0, _styledComponents.css)(["100%"]);
  if (props.thinTrack) return (0, _styledComponents.css)(["2px"]);
  var amount = constants.trackHeight;
  return (0, _styledComponents.css)(["", "px"], amount);
}, function (props) {
  if (props.hideControl) return 0;
  if (props.thinTrack) return (0, _styledComponents.css)(["12px"]);
  var amount = constants.trackHeight * 2 + constants.trackBorderWidth * 2;
  return (0, _styledComponents.css)(["", "px"], amount);
});

exports.PlaybackScrubberDisplay = PlaybackScrubberDisplay;

var PlaybackScrubberDisplayFill = _styledComponents["default"].div.withConfig({
  displayName: "PlaybackScrubber__PlaybackScrubberDisplayFill",
  componentId: "sc-15t15c2-3"
})(["background:", ";height:100%;width:", ";z-index:0;", ":hover &{background:", ";}"], function (props) {
  return props.fillColor;
}, function (props) {
  return (0, _styledComponents.css)(["", "%"], 100 * (props.value || 0));
}, PlaybackScrubberContainer, function (props) {
  return props.fillColorHover;
});

exports.PlaybackScrubberDisplayFill = PlaybackScrubberDisplayFill;

function PlaybackScrubber(_ref) {
  var className = _ref.className,
      value = _ref.value,
      fillColor = _ref.fillColor,
      fillColorHover = _ref.fillColorHover,
      unfilledColor = _ref.unfilledColor,
      borderRadius = _ref.borderRadius,
      hideControl = _ref.hideControl,
      thinTrack = _ref.thinTrack,
      props = _objectWithoutProperties(_ref, ["className", "value", "fillColor", "fillColorHover", "unfilledColor", "borderRadius", "hideControl", "thinTrack"]);

  return /*#__PURE__*/_react["default"].createElement(PlaybackScrubberContainer, {
    className: className
  }, /*#__PURE__*/_react["default"].createElement(PlaybackScrubberControl, _extends({
    hideControl: hideControl,
    max: 1,
    min: 0,
    step: 0.01,
    type: "range",
    value: value
  }, props)), /*#__PURE__*/_react["default"].createElement(PlaybackScrubberDisplay, {
    fillColor: unfilledColor,
    hideControl: hideControl,
    borderRadius: borderRadius,
    thinTrack: thinTrack
  }, /*#__PURE__*/_react["default"].createElement(PlaybackScrubberDisplayFill, {
    value: value,
    fillColor: fillColor,
    fillColorHover: fillColorHover
  })));
}

PlaybackScrubber.propTypes = {
  borderRadius: _propTypes["default"].number,
  className: _propTypes["default"].string,
  hideControl: _propTypes["default"].bool,
  fillColor: _propTypes["default"].string,
  fillColorHover: _propTypes["default"].string,
  unfilledColor: _propTypes["default"].string,
  thinTrack: _propTypes["default"].bool,
  value: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string])
};
PlaybackScrubber.defaultProps = {
  borderRadius: constants.trackHeight,
  fillColor: constants.playedFill,
  fillColorHover: constants.hoverPlayedFill,
  unfilledColor: constants.unplayedFill
};