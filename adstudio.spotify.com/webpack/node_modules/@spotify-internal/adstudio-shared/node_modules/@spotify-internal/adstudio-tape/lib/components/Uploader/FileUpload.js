"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.FileUpload = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _encoreFoundation = require("@spotify-internal/encore-foundation");

var _encoreWeb = require("@spotify-internal/encore-web");

var _Icons = _interopRequireDefault(require("../Icons"));

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var IconUploadArrow = _Icons["default"].IconUploadArrow;
var InvalidFileTypeErrorMessage = 'File type not accepted.';
var ICON_CONTAINER_HEIGHT = '64px';
var UPLOAD_ICON_HEIGHT = '35px';
var videoUploadIconStyles = (0, _styledComponents.css)(["top:40%;left:0;"]);

var UploadInstructions = _styledComponents["default"].div.withConfig({
  displayName: "FileUpload__UploadInstructions",
  componentId: "fxdn3w-0"
})(["margin:", " 0;display:grid;justify-content:center;align-items:center;grid-template-rows:64px 30px 30px minmax(30px,min-content);grid-gap:", ";"], _encoreFoundation.spacer32, _encoreFoundation.spacer16);

var IconContainer = _styledComponents["default"].div.withConfig({
  displayName: "FileUpload__IconContainer",
  componentId: "fxdn3w-1"
})(["backface-visibility:hidden;height:", ";margin:0 auto;position:relative;width:", ";transition:border-color 0.1s;"], function (props) {
  return props.iconContainerHeight;
}, ICON_CONTAINER_HEIGHT);

var StyledUploadIcon = (0, _styledComponents["default"])(IconUploadArrow).withConfig({
  displayName: "FileUpload__StyledUploadIcon",
  componentId: "fxdn3w-2"
})(["left:35%;opacity:0;position:absolute;top:40%;transition:top 0.25s,opacity 0.25s;"]);

var FileUploadContainer = _styledComponents["default"].div.withConfig({
  displayName: "FileUpload__FileUploadContainer",
  componentId: "fxdn3w-3"
})(["background-color:", ";border:1.5px dashed ", ";border-radius:5px;text-align:center;transition:border-color 0.1s;width:100%;", ""], _encoreFoundation.gray95, _encoreFoundation.gray90, function (props) {
  return props.showDragOver && (0, _styledComponents.css)(["background-color:rgba(80,155,245,0.05);border-color:", ";", "{border-color:", ";}", "{opacity:1;top:calc((", " - ", ") / 2);}", "{left:25%;opacity:0;top:10%;}"], props.theme.colors.primaryColor, IconContainer, props.theme.colors.primaryColor, StyledUploadIcon, ICON_CONTAINER_HEIGHT, UPLOAD_ICON_HEIGHT, props.DisplayIcon);
});

var HiddenInput = _styledComponents["default"].input.withConfig({
  displayName: "FileUpload__HiddenInput",
  componentId: "fxdn3w-4"
})(["height:0.1px;opacity:0;overflow:hidden;position:absolute;width:0.1px;z-index:-1;"]);

var FileUpload = /*#__PURE__*/function (_PureComponent) {
  _inherits(FileUpload, _PureComponent);

  var _super = _createSuper(FileUpload);

  function FileUpload() {
    var _this;

    _classCallCheck(this, FileUpload);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "handleFileUploadFromDialog", function (e) {
      _this.validateFileAndUpload(e.currentTarget.files[0]);
    });

    _defineProperty(_assertThisInitialized(_this), "handleFileDrop", function (e) {
      e.preventDefault();

      _this.handleFileDragLeave();

      var file = e.dataTransfer.files[0];

      _this.validateFileAndUpload(file);
    });

    _defineProperty(_assertThisInitialized(_this), "validateFileAndUpload", function (file) {
      var _this$props = _this.props,
          accept = _this$props.accept,
          skipValidation = _this$props.skipValidation,
          onError = _this$props.onError,
          onUpload = _this$props.onUpload;

      if (skipValidation || _this.state.acceptAnyFileType || accept[file.type]) {
        onUpload(file);
      } else {
        onError(InvalidFileTypeErrorMessage);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleClickUpload", function (e) {
      e.preventDefault();
      document.getElementById(_this.props.id).click();
    });

    _defineProperty(_assertThisInitialized(_this), "handleFileDragOver", function (e) {
      e.preventDefault();

      _this.setState({
        showDragOver: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleFileDragLeave", function () {
      _this.setState({
        showDragOver: false
      });
    });

    _defineProperty(_assertThisInitialized(_this), "maybeRenderUploadInstructions", function () {
      var _this$props2 = _this.props,
          uploadFileText = _this$props2.uploadFileText,
          uploadText = _this$props2.uploadText,
          dragAndDropText = _this$props2.dragAndDropText,
          isVideoUploader = _this$props2.isVideoUploader,
          iconContainerHeight = _this$props2.iconContainerHeight,
          theme = _this$props2.theme;

      var _assertThisInitialize = _assertThisInitialized(_this),
          DisplayIcon = _assertThisInitialize.DisplayIcon;

      return /*#__PURE__*/_react["default"].createElement(UploadInstructions, null, /*#__PURE__*/_react["default"].createElement(IconContainer, {
        isVideoUploader: isVideoUploader,
        iconContainerHeight: iconContainerHeight
      }, /*#__PURE__*/_react["default"].createElement(StyledUploadIcon, {
        color: theme.colors.primaryColor
      }), /*#__PURE__*/_react["default"].createElement(DisplayIcon, {
        color: "gray40",
        isVideoUploader: isVideoUploader
      })), /*#__PURE__*/_react["default"].createElement(_encoreWeb.Type.p, {
        color: _encoreFoundation.gray40,
        variant: _encoreWeb.Type.body1,
        weight: _encoreWeb.Type.bold,
        condensed: true
      }, dragAndDropText), /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(_encoreWeb.ButtonSecondary, {
        condensed: true,
        buttonSize: _encoreWeb.ButtonSecondary.sm,
        onClick: _this.handleClickUpload
      }, uploadFileText)), /*#__PURE__*/_react["default"].createElement(_encoreWeb.Type.p, {
        color: _encoreFoundation.gray40,
        variant: _encoreWeb.Type.body4,
        weight: _encoreWeb.Type.book,
        condensed: true
      }, uploadText));
    });

    return _this;
  }

  _createClass(FileUpload, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      this.setState({
        showDragOver: false,
        acceptAnyFileType: !Object.keys(this.props.accept).length
      });
      this.handleFileUploadFromDialog = this.handleFileUploadFromDialog.bind(this);
    }
  }, {
    key: "DisplayIcon",
    get: function get() {
      var DisplayIcon = (0, _styledComponents["default"])(this.props.displayIcon).withConfig({
        displayName: "FileUpload__DisplayIcon",
        componentId: "fxdn3w-5"
      })(["opacity:1;transition:top 0.25s,opacity 0.25s;", ""], function (props) {
        return props.isVideoUploader && videoUploadIconStyles;
      });
      return DisplayIcon;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          accept = _this$props3.accept,
          id = _this$props3.id;
      var showDragOver = this.state.showDragOver;
      return /*#__PURE__*/_react["default"].createElement(FileUploadContainer, {
        showDragOver: showDragOver,
        DisplayIcon: this.DisplayIcon,
        onDragEnd: this.handleFileDragLeave,
        onDragEnter: this.handleFileDragOver,
        onDragLeave: this.handleFileDragLeave,
        onDragOver: this.handleFileDragOver,
        onDrop: this.handleFileDrop
      }, this.maybeRenderUploadInstructions(), /*#__PURE__*/_react["default"].createElement(HiddenInput, {
        accept: Object.keys(accept).join(','),
        id: id,
        onChange: this.handleFileUploadFromDialog,
        type: "file"
      }));
    }
  }]);

  return FileUpload;
}(_react.PureComponent);

exports.FileUpload = FileUpload;

_defineProperty(FileUpload, "propTypes", {
  accept: _propTypes["default"].shape({
    'audio/mp3': _propTypes["default"].string,
    'audio/ogg': _propTypes["default"].string,
    'audio/wav': _propTypes["default"].string,
    'audio/mpeg': _propTypes["default"].string,
    'audio/x-wav': _propTypes["default"].string,
    'image/jpeg': _propTypes["default"].string,
    'image/png': _propTypes["default"].string,
    'video/mp4': _propTypes["default"].string,
    'video/quicktime': _propTypes["default"].string
  }),
  id: _propTypes["default"].string.isRequired,
  skipValidation: _propTypes["default"].bool,
  onError: _propTypes["default"].func.isRequired,
  onUpload: _propTypes["default"].func.isRequired,
  displayIcon: _propTypes["default"].oneOfType([_propTypes["default"].element, _propTypes["default"].func]).isRequired,
  uploadText: _propTypes["default"].string.isRequired,
  uploadFileText: _propTypes["default"].string,
  dragAndDropText: _propTypes["default"].string,
  iconContainerHeight: _propTypes["default"].string,
  isVideoUploader: _propTypes["default"].bool,
  theme: _propTypes["default"].object
});

_defineProperty(FileUpload, "defaultProps", {
  uploadFileText: _constants.UPLOAD_FILE_TEXT,
  dragAndDropText: _constants.DRAG_AND_DROP_TEXT,
  iconSquareBorder: false,
  iconContainerHeight: ICON_CONTAINER_HEIGHT,
  isVideoUploader: false
});

var _default = (0, _styledComponents.withTheme)(FileUpload);

exports["default"] = _default;