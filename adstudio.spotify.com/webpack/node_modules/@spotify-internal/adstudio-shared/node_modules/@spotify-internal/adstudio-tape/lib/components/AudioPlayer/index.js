"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AudioPlayer = AudioPlayer;
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _encoreFoundation = require("@spotify-internal/encore-foundation");

var _encoreWeb = require("@spotify-internal/encore-web");

var _downloadFile = require("../../utils/helpers/downloadFile");

var _AudioHOC = _interopRequireWildcard(require("../AudioHOC"));

var _AudioScrubberFluid = _interopRequireDefault(require("../AudioScrubberFluid"));

var _PlayPauseButton = _interopRequireDefault(require("../PlayPauseButton"));

var _Panel = _interopRequireDefault(require("../Panel"));

var _constants = require("./constants");

var _Icons = _interopRequireDefault(require("../Icons"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var IconDownloadAlt = _Icons["default"].IconDownloadAlt;
var SIZE = 64;
var CustomPlayPauseButton = (0, _styledComponents["default"])(_PlayPauseButton["default"]).withConfig({
  displayName: "AudioPlayer__CustomPlayPauseButton",
  componentId: "sc-16d2cf8-0"
})(["background:transparent;border:0;color:", ";cursor:pointer;font-size:0;margin-right:", ";outline:none;padding:0;&:active,&:hover{color:", ";}"], function (props) {
  return props.theme.colors.primaryColor;
}, _encoreFoundation.spacer16, _encoreFoundation.black);

var TrackDisplayContainer = _styledComponents["default"].div.withConfig({
  displayName: "AudioPlayer__TrackDisplayContainer",
  componentId: "sc-16d2cf8-1"
})(["display:flex;flex:1;flex-direction:column;height:", "px;justify-content:flex-end;min-width:0;padding:0;"], SIZE + 8);

var EllipsisType = (0, _styledComponents["default"])(_encoreWeb.Type.p).withConfig({
  displayName: "AudioPlayer__EllipsisType",
  componentId: "sc-16d2cf8-2"
})(["overflow:hidden;text-overflow:ellipsis;white-space:nowrap;"]);

var StyledLink = _styledComponents["default"].a.withConfig({
  displayName: "AudioPlayer__StyledLink",
  componentId: "sc-16d2cf8-3"
})(["text-decoration:none;&:active,&:hover{text-decoration:underline;}"]);

var Download = (0, _styledComponents["default"])(_encoreWeb.Type.p).withConfig({
  displayName: "AudioPlayer__Download",
  componentId: "sc-16d2cf8-4"
})([""]);

var NameAndDownloadDisplay = _styledComponents["default"].div.withConfig({
  displayName: "AudioPlayer__NameAndDownloadDisplay",
  componentId: "sc-16d2cf8-5"
})(["display:grid;grid-template-columns:1fr 120px;", "{display:grid;grid-template-columns:1fr 1fr;grid-gap:", ";align-items:center;justify-items:end;color:", ";&:hover{color:", ";cursor:pointer;}}"], Download, _encoreFoundation.spacer4, function (props) {
  return props.theme.colors.primaryColor;
}, _encoreFoundation.gray30);

function AudioPlayer(_ref) {
  var deleteLabel = _ref.deleteLabel,
      downloadLabel = _ref.downloadLabel,
      name = _ref.name,
      nameUrl = _ref.nameUrl,
      onClickDelete = _ref.onClickDelete,
      onClickDownload = _ref.onClickDownload,
      onClickPlay = _ref.onClickPlay,
      panelBorder = _ref.panelBorder,
      shouldShowDownload = _ref.shouldShowDownload,
      sound = _ref.sound,
      src = _ref.src;
  var playing = sound.playing,
      currentTime = sound.currentTime,
      playingRatio = sound.playingRatio,
      duration = sound.duration,
      play = sound.play,
      seek = sound.seek;
  var ctaList = [];

  if (onClickDelete) {
    ctaList.push({
      label: deleteLabel,
      onClick: onClickDelete
    });
  }

  return /*#__PURE__*/_react["default"].createElement(_Panel["default"], {
    border: false,
    className: (0, _classnames["default"])('audio-player', {
      playing: playing
    }),
    ctaList: ctaList,
    ctaListStacked: true,
    shadow: panelBorder
  }, /*#__PURE__*/_react["default"].createElement(CustomPlayPauseButton, {
    circle: true,
    size: SIZE,
    onClick: function onClick() {
      play();
      return onClickPlay && onClickPlay();
    },
    playing: playing
  }), /*#__PURE__*/_react["default"].createElement(TrackDisplayContainer, null, /*#__PURE__*/_react["default"].createElement(NameAndDownloadDisplay, null, /*#__PURE__*/_react["default"].createElement(EllipsisType, {
    variant: _encoreWeb.Type.body1,
    weight: _encoreWeb.Type.book,
    condensed: true
  }, nameUrl ? /*#__PURE__*/_react["default"].createElement(StyledLink, {
    href: nameUrl
  }, name) : name), shouldShowDownload && /*#__PURE__*/_react["default"].createElement(Download, {
    "data-test": "download",
    condensed: true,
    onClick: function onClick() {
      (0, _downloadFile.downloadFile)(name, src);
      return onClickDownload && onClickDownload(src);
    }
  }, /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(IconDownloadAlt, {
    iconSize: 16
  }), /*#__PURE__*/_react["default"].createElement("span", null, downloadLabel)))), /*#__PURE__*/_react["default"].createElement(_AudioScrubberFluid["default"], {
    playingRatio: playingRatio,
    currentTime: currentTime,
    duration: duration,
    onSliderChange: seek
  })));
}

AudioPlayer.propTypes = {
  deleteLabel: _propTypes["default"].string.isRequired,
  downloadLabel: _propTypes["default"].string.isRequired,
  name: _propTypes["default"].string,
  nameUrl: _propTypes["default"].string,
  onClickDelete: _propTypes["default"].func,
  onClickDownload: _propTypes["default"].func,
  onClickPlay: _propTypes["default"].func,
  panelBorder: _propTypes["default"].bool,
  shouldShowDownload: _propTypes["default"].bool,
  sound: _AudioHOC.soundPropTypes,
  src: _propTypes["default"].string
};
AudioPlayer.defaultProps = {
  deleteLabel: _constants.DELETE_LABEL,
  downloadLabel: _constants.DOWNLOAD_LABEL,
  panelBorder: false
};

var _default = (0, _AudioHOC["default"])(AudioPlayer);

exports["default"] = _default;