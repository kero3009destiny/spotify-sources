"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = StatusIndicator;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _TooltipInfo = _interopRequireDefault(require("../TooltipInfo"));

var _encoreFoundation = require("@spotify-internal/encore-foundation");

var _status = require("../../utils/const/status");

var _convertToTitleCase = _interopRequireDefault(require("../../utils/helpers/convertToTitleCase"));

var _dictionary = require("../../utils/helpers/dictionary");

var _badgeColorsByType;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var badgeColorsByType = (_badgeColorsByType = {}, _defineProperty(_badgeColorsByType, _status.BADGE_TYPES.Success, _encoreFoundation.success), _defineProperty(_badgeColorsByType, _status.BADGE_TYPES.Failure, _encoreFoundation.failure), _defineProperty(_badgeColorsByType, _status.BADGE_TYPES.Warning, _encoreFoundation.warning), _defineProperty(_badgeColorsByType, _status.BADGE_TYPES.NeedsAttention, _encoreFoundation.gold), _badgeColorsByType);

var Badge = _styledComponents["default"].div.withConfig({
  displayName: "StatusIndicator__Badge",
  componentId: "sc-1tvt5tq-0"
})(["background-color:", ";border-radius:30px;display:inline-block;height:8px;margin-right:10px;width:8px;"], function (props) {
  return props.color;
});

var CondensedValue = _styledComponents["default"].span.withConfig({
  displayName: "StatusIndicator__CondensedValue",
  componentId: "sc-1tvt5tq-1"
})(["color:", ";font-size:12px;font-weight:bold;"], function (props) {
  return props.color;
});

var StyledCount = _styledComponents["default"].span.withConfig({
  displayName: "StatusIndicator__StyledCount",
  componentId: "sc-1tvt5tq-2"
})(["color:", ";margin-left:", ";", ";"], _encoreFoundation.gray45, _encoreFoundation.spacer4, function (props) {
  return props.condensed ? 'font-size: 12px' : '';
});

function StatusIndicator(_ref) {
  var condensed = _ref.condensed,
      dataTestValue = _ref.dataTestValue,
      entityType = _ref.entityType,
      status = _ref.status,
      strings = _ref.strings,
      showTooltip = _ref.showTooltip,
      count = _ref.count,
      _ref$parseUnknownValu = _ref.parseUnknownValue,
      parseUnknownValue = _ref$parseUnknownValu === void 0 ? false : _ref$parseUnknownValu;
  var unknownValue = parseUnknownValue ? (0, _convertToTitleCase["default"])(status) : strings.UNSUPPORTED_STATUS_VALUE;

  var _ref2 = strings.STATUS.find(function (d) {
    return d.entityType === entityType && d.key === status;
  }) || {
    value: unknownValue
  },
      value = _ref2.value,
      desc = _ref2.desc,
      badgeType = _ref2.badgeType;

  var ValueComponent = condensed ? CondensedValue : 'span';
  var badgeColor = badgeColorsByType[badgeType];

  var content = /*#__PURE__*/_react["default"].createElement("span", null, !condensed && /*#__PURE__*/_react["default"].createElement(Badge, {
    color: badgeColor || _encoreFoundation.gray75,
    "data-test": dataTestValue
  }), /*#__PURE__*/_react["default"].createElement(ValueComponent, {
    color: badgeColor || _encoreFoundation.gray45
  }, value), count && /*#__PURE__*/_react["default"].createElement(StyledCount, {
    condensed: condensed
  }, "(", count, ")"));

  if (!showTooltip || !desc) {
    return content;
  }

  return /*#__PURE__*/_react["default"].createElement(_TooltipInfo["default"], {
    tooltipText: desc,
    placement: "bottom"
  }, content);
}

StatusIndicator.defaultProps = {
  showTooltip: false,
  dataTestValue: 'status-indicator',
  entityType: _status.ENTITY_TYPES.Ad,
  condensed: false,
  strings: {
    STATUS: _status.STATUS,
    BADGE_TYPES: _status.BADGE_TYPES,
    ENTITY_TYPES: _status.ENTITY_TYPES,
    UNSUPPORTED_STATUS_VALUE: _status.UNSUPPORTED_STATUS_VALUE
  }
};
StatusIndicator.propTypes = {
  dataTestValue: _propTypes["default"].string,
  showTooltip: _propTypes["default"].bool,
  status: _propTypes["default"].oneOf((0, _dictionary.getAllKeys)(_status.STATUS)).isRequired,
  entityType: _propTypes["default"].oneOf(Object.values(_status.ENTITY_TYPES)),
  condensed: _propTypes["default"].bool,
  count: _propTypes["default"].number,
  parseUnknownValue: _propTypes["default"].bool,
  strings: _propTypes["default"].object
};