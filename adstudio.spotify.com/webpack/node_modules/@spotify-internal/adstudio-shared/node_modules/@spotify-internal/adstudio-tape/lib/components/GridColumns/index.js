"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _templateObject, _templateObject2;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var sizes = {
  desktop: 992,
  tablet: 768,
  phone: 576
}; // Iterate through the sizes and create a media template

var media = Object.keys(sizes).reduce(function (acc, label) {
  acc[label] = function () {
    return (0, _styledComponents.css)(["@media (max-width:", "em){", "}"], sizes[label] / 16, _styledComponents.css.apply(void 0, arguments));
  };

  return acc;
}, {}); // if no css grid col span is set on tablet or phone it fallsback to 12

var GridCols = _styledComponents["default"].div.withConfig({
  displayName: "GridColumns__GridCols",
  componentId: "sc-6msp1k-0"
})(["grid-column:span ", ";", " ", ""], function (props) {
  return props.defaultColumnSpanCount;
}, media.tablet(_templateObject || (_templateObject = _taggedTemplateLiteral(["grid-column: span ", ""])), function (props) {
  return props.tabletColumnSpanCount ? props.tabletColumnSpanCount : 12;
}), media.phone(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["grid-column: span ", ""])), function (props) {
  return props.phoneColumnSpanCount ? props.phoneColumnSpanCount : 12;
}));

var GridColumns = function GridColumns(_ref) {
  var children = _ref.children,
      defaultColumnSpanCount = _ref.defaultColumnSpanCount,
      tabletColumnSpanCount = _ref.tabletColumnSpanCount,
      phoneColumnSpanCount = _ref.phoneColumnSpanCount;
  return /*#__PURE__*/_react["default"].createElement(GridCols, {
    phoneColumnSpanCount: phoneColumnSpanCount,
    defaultColumnSpanCount: defaultColumnSpanCount,
    tabletColumnSpanCount: tabletColumnSpanCount
  }, children);
};

GridColumns.propTypes = {
  children: _propTypes["default"].node,
  defaultColumnSpanCount: _propTypes["default"].number.isRequired,
  phoneColumnSpanCount: _propTypes["default"].number,
  // set css grid col span for phone size
  tabletColumnSpanCount: _propTypes["default"].number // set css grid col span for tablet size

};
var _default = GridColumns;
exports["default"] = _default;