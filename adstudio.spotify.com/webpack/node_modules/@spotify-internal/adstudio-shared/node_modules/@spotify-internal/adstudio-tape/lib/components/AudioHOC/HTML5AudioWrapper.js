"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var HTML5AudioWrapper = /*#__PURE__*/function () {
  function HTML5AudioWrapper(audioNode, events) {
    _classCallCheck(this, HTML5AudioWrapper);

    this.audioNode = audioNode;
    this.startedAt = 0;
    this.pausedAt = 0;
    this.events = events;

    if (this.audioNode) {
      this.audioNode.onloadedmetadata = this.onLoadedMetadata.bind(this);
      this.audioNode.ontimeupdate = this.onTimeUpdate.bind(this);
      this.audioNode.onended = this.onEnded.bind(this);
    }
  }

  _createClass(HTML5AudioWrapper, [{
    key: "play",
    value: function play(position) {
      var offset = position || this.pausedAt;

      if (this.audioNode) {
        this.audioNode.currentTime = offset;
        this.audioNode.play();
      }

      this.startedAt = this.audioNode.currentTime - offset;
      this.pausedAt = 0;
      this.playing = true;
    }
  }, {
    key: "pause",
    value: function pause() {
      if (this.audioNode) {
        var elapsed = this.audioNode.currentTime - this.startedAt;
        this.stop();
        this.pausedAt = elapsed;
      }
    }
  }, {
    key: "seek",
    value: function seek(time) {
      var duration = this.getDuration(); // Just in case things get weird, max it out at total duration.

      var currentTime = Math.min(Math.round(time * duration), duration);

      if (this.playing) {
        this.play(currentTime);
      } else {
        this.audioNode.currentTime = currentTime;
        this.pausedAt = currentTime;
      }
    }
  }, {
    key: "stop",
    value: function stop() {
      if (this.audioNode) {
        this.audioNode.pause();
      }

      this.pausedAt = 0;
      this.startedAt = 0;
      this.playing = false;
    }
  }, {
    key: "getDuration",
    value: function getDuration() {
      if (this.audioNode && !this.duration && this.audioNode.duration) {
        this.duration = this.audioNode.duration;
      }

      return this.duration || 0;
    }
  }, {
    key: "getCurrentTime",
    value: function getCurrentTime() {
      if (this.audioNode) {
        // Protecting against situations where this can actually be out of bounds
        return Math.min(this.audioNode.currentTime, this.getDuration());
      }

      return 0;
    }
  }, {
    key: "onLoadedMetadata",
    value: function onLoadedMetadata() {
      this.events.setDuration(this.getDuration());
    }
  }, {
    key: "onEnded",
    value: function onEnded() {
      this.stop();
      this.events.ended();
    }
  }, {
    key: "onTimeUpdate",
    value: function onTimeUpdate() {
      var playingRatio = this.getCurrentTime() / this.getDuration();
      var currentTime = this.getCurrentTime();
      this.events.setTimeUpdate(playingRatio, currentTime);
    } // eslint-disable-next-line

  }, {
    key: "clearAnimationFrame",
    value: function clearAnimationFrame() {}
  }]);

  return HTML5AudioWrapper;
}();

exports["default"] = HTML5AudioWrapper;