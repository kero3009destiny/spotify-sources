"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getHours = getHours;
exports.getMilitaryTimeHours = getMilitaryTimeHours;
exports.getMinutes = getMinutes;
exports.getMeridian = getMeridian;
exports.setEndOfDay = setEndOfDay;
exports.getNDaysFromDay = getNDaysFromDay;
exports.keepTimeFromOldDate = keepTimeFromOldDate;
exports.convertToTimestamp = convertToTimestamp;
exports.getTimePickerValues = exports.getTimeMaximums = exports.countryHas24HourTime = exports.replaceTimeInTimestamp = void 0;

var _moment = _interopRequireDefault(require("moment"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var START_OF_DAY_HOUR = '12';
var START_OF_MINUTES = '00';
var START_OF_DAY_MERIDIAN = 'AM';

function getHours(timestamp) {
  if (!timestamp) {
    return START_OF_DAY_HOUR;
  }

  return timestamp.format('hh');
}

function getMilitaryTimeHours(timestamp) {
  if (!timestamp) {
    return '00';
  }

  return timestamp.format('HH');
}

function getMinutes(timestamp) {
  if (!timestamp) {
    return START_OF_MINUTES;
  }

  return timestamp.format('mm');
}

function getMeridian(timestamp) {
  if (!timestamp) {
    return START_OF_DAY_MERIDIAN;
  }

  return timestamp.format('A');
}

function setEndOfDay(date) {
  var endDate = (0, _moment["default"])(date);
  return endDate.hour(11).minute(59);
}

function getNDaysFromDay(n, date) {
  return (0, _moment["default"])(date).add(n, 'days');
}

function keepTimeFromOldDate(newDate, oldDate) {
  var oldStartDate = (0, _moment["default"])(oldDate);
  return newDate.hour(oldStartDate.hour()).minute(oldStartDate.minute());
}

function convertToTimestamp(momentDate) {
  return (0, _moment["default"])(momentDate).toDate();
}

var replaceTimeInTimestamp = function replaceTimeInTimestamp(timestamp, _ref) {
  var hours = _ref.hours,
      minutes = _ref.minutes,
      meridian = _ref.meridian;
  var hour = meridian === null ? hours : parseInt(hours, 10) % 12;

  if (meridian === 'PM') {
    hour += 12;
  }

  var minute = parseInt(minutes, 10);
  return convertToTimestamp((0, _moment["default"])(timestamp).hour(hour).minutes(minute).second(0));
};

exports.replaceTimeInTimestamp = replaceTimeInTimestamp;

var countryHas24HourTime = function countryHas24HourTime(countryCode) {
  switch (countryCode) {
    case 'de-DE':
    case 'es-ES':
    case 'fr-FR':
    case 'it-IT':
    case 'nl-NL':
    case 'nb':
    case 'da-DK':
    case 'sv-FI':
      return true;

    default:
      return false;
  }
};

exports.countryHas24HourTime = countryHas24HourTime;

var getTimeMaximums = function getTimeMaximums(use24HourTime) {
  return use24HourTime ? {
    hours: 23,
    minutes: 59
  } : {
    hours: 12,
    minutes: 59
  };
};

exports.getTimeMaximums = getTimeMaximums;

var getTimePickerValues = function getTimePickerValues(date, use24HourTime) {
  return {
    hours: use24HourTime ? getMilitaryTimeHours(date) : getHours(date),
    minutes: getMinutes(date),
    meridian: use24HourTime ? null : getMeridian(date)
  };
};

exports.getTimePickerValues = getTimePickerValues;