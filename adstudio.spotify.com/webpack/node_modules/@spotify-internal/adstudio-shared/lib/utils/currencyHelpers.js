"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transformCountryCurrencyToFormatNumberOptions = transformCountryCurrencyToFormatNumberOptions;
exports.DEFAULT_CURRENCY_OBJ = exports.ADMIN_CURRENCY_OBJ = exports.SYMBOL_POSITIONS = void 0;
var SYMBOL_POSITIONS = {
  START: 'start',
  END: 'end',
  HIDE: 'hide'
};
exports.SYMBOL_POSITIONS = SYMBOL_POSITIONS;
var ADMIN_CURRENCY_OBJ = {
  symbol: null,
  symbolPosition: SYMBOL_POSITIONS.BEFORE,
  space: true,
  decimals: 2,
  decimalSeparator: '.',
  thousandsSeparator: ',',
  useCodeAsSymbol: true
};
exports.ADMIN_CURRENCY_OBJ = ADMIN_CURRENCY_OBJ;
var DEFAULT_CURRENCY_OBJ = {
  symbol: null,
  symbolPosition: SYMBOL_POSITIONS.START,
  space: true,
  decimals: 2,
  decimalSeparator: '.',
  thousandsSeparator: ',',
  useCodeAsSymbol: true,
  code: 'USD'
};
/**
 * builds an object to be used by format-number for formatting based on the
 * backend's countryCurrency model
 **/

exports.DEFAULT_CURRENCY_OBJ = DEFAULT_CURRENCY_OBJ;

function transformCountryCurrencyToFormatNumberOptions(_ref) {
  var code = _ref.code,
      _ref$decimals = _ref.decimals,
      decimals = _ref$decimals === void 0 ? 2 : _ref$decimals,
      _ref$decimalSeparator = _ref.decimalSeparator,
      decimalSeparator = _ref$decimalSeparator === void 0 ? '.' : _ref$decimalSeparator,
      _ref$symbol = _ref.symbol,
      symbol = _ref$symbol === void 0 ? '$' : _ref$symbol,
      _ref$symbolPosition = _ref.symbolPosition,
      symbolPosition = _ref$symbolPosition === void 0 ? 'start' : _ref$symbolPosition,
      _ref$space = _ref.space,
      space = _ref$space === void 0 ? false : _ref$space,
      _ref$thousandsSeparat = _ref.thousandsSeparator,
      thousandsSeparator = _ref$thousandsSeparat === void 0 ? ',' : _ref$thousandsSeparat,
      _ref$useCodeAsSymbol = _ref.useCodeAsSymbol,
      useCodeAsSymbol = _ref$useCodeAsSymbol === void 0 ? false : _ref$useCodeAsSymbol;
  var formatNumberOptions = {
    integerSeparator: thousandsSeparator,
    decimal: decimalSeparator
  };

  if (typeof decimals === 'number') {
    formatNumberOptions.round = decimals;
    formatNumberOptions.padRight = decimals;
  }

  var renderedSymbol = useCodeAsSymbol ? code : symbol;

  switch (symbolPosition) {
    case SYMBOL_POSITIONS.START:
      {
        formatNumberOptions.prefix = space ? "".concat(renderedSymbol, " ") : renderedSymbol;
        break;
      }

    case SYMBOL_POSITIONS.END:
      {
        formatNumberOptions.suffix = space ? " ".concat(renderedSymbol) : renderedSymbol;
        break;
      }

    case SYMBOL_POSITIONS.NONE:
    default:
      break;
  }

  return formatNumberOptions;
}