"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setStateAsync = setStateAsync;
exports.callIfExists = callIfExists;
exports.extractSpotifyId = void 0;

var _get2 = _interopRequireDefault(require("lodash/get"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * add this as an instance method to your component to have an `await`-able this.setState.
 *
 * class C extends Component {
 *   setStateAsync = setStateAsync
 *   async onClickThing() {
 *     await this.setStateAsync({ newState: true });
 *   }
 * }
 */
function setStateAsync(state) {
  var _this = this;

  return new Promise(function (resolve) {
    return _this.setState(state, resolve);
  });
}
/* eslint-disable consistent-return */

/**
 * add this as an instance method to your component to add a optional event handler
 * for optional handling function props (avoiding type-check branches throughout the component)
 *
 * class C extends Component {
 *   static propTypes = {
 *     onClickThing: PropTypes.func,
 *   };
 *   callIfExists = callIfExists
 *   onClickThing(event) {
 *     this.callIfExists('onClickThing', event);
 *   }
 * }
 */


function callIfExists(fnName) {
  if (typeof (0, _get2["default"])(this, ['props', fnName]) === 'function') {
    var _this$props;

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return (_this$props = this.props)[fnName].apply(_this$props, args);
  }
}
/* eslint-enable consistent-return */
// A Spotify entity ID is a 22-character long Base62 string.


var SPOTIFY_ID_MATCHER = /^[a-zA-Z0-9]{22}$/; // Matchers to common Spotify URLs that advertisers may want to use to find their artist.

var SPOTIFY_URL_MATCHERS = [/^spotify:((?:[^\/]+?)):((?:[^\/]+?))(?:\/(?=$))?$/, /^(?:http(?:s)?:\/\/)?open\.spotify\.com\/((?:[^\/]+?))\/((?:[^\/]+?))(?:\/(?=$))?$/i, /^(?:http(?:s)?:\/\/)?artists\.spotify\.com\/c\/((?:[^\/]+?))\/((?:[^\/]+?))\/(?:\/(?=$))?/i];
/**
 * Examines a string for common Spotify URL patterns and attempts to extract a Spotify entity ID from it.
 * @param {string} query The string that may be a Spotify URL and so contain a Spotify entity ID.
 * @param {string} entity The entity name (e.g. 'artist')
 * @returns {string} The extracted Spotify entity ID or an empty string.
 */

var extractSpotifyId = function extractSpotifyId() {
  var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var entity = arguments.length > 1 ? arguments[1] : undefined;
  return query.match(SPOTIFY_ID_MATCHER) ? query : SPOTIFY_URL_MATCHERS.map(function (matcher) {
    return query.match(matcher) || [];
  }).filter(function () {
    var match = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    return match[1] && match[2] && match[1] === entity && !!match[2].match(SPOTIFY_ID_MATCHER);
  }).reduce(function (acc, match) {
    return match[2];
  }, '');
};

exports.extractSpotifyId = extractSpotifyId;