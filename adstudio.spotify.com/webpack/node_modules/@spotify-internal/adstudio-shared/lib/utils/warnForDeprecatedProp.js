"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.warnForDeprecatedProp = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var warnForDeprecatedProp = function warnForDeprecatedProp(self, componentName, propName, message) {
  if (!self.state || !self.state.warningShown || !self.state.warningShown[propName]) {
    /* eslint-disable no-console */
    if (console && console.warn) {
      console.warn("The ".concat(componentName, " prop \"").concat(propName, "\" is deprecated. ").concat(message));
    }
    /* eslint-enable no-console */


    self.setState(function (prevState) {
      if (prevState && prevState.warningShown) {
        return {
          warningShown: _objectSpread(_objectSpread({}, prevState.warningShown), {}, _defineProperty({}, propName, true))
        };
      }

      return {
        warningShown: _defineProperty({}, propName, true)
      };
    });
  }
};

exports.warnForDeprecatedProp = warnForDeprecatedProp;
var _default = warnForDeprecatedProp;
exports["default"] = _default;