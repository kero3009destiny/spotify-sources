"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchLocations = fetchLocations;

var _adstudioWebgateFetch = require("@spotify-internal/adstudio-webgate-fetch");

var _service_grpc_web_pb = require("@spotify-internal/targetingservice/proto/com/spotify/targetingservice/proto/service_grpc_web_pb");

var _service_pb = require("@spotify-internal/targetingservice/proto/com/spotify/targetingservice/proto/service_pb");

var _geoLocationMapper = require("../../utils/geoLocationMapper");

var _utilities = require("../../utilities");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function fetchLocations(_x, _x2, _x3) {
  return _fetchLocations.apply(this, arguments);
}

function _fetchLocations() {
  _fetchLocations = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(locationsArray, parentCountry, edgeHost) {
    var targetingServiceClient, validateRequest;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            targetingServiceClient = new _service_grpc_web_pb.TargetingServiceClient(edgeHost);
            (0, _utilities.enableGrpcDevConsole)([targetingServiceClient]);
            validateRequest = new _service_pb.ValidatePostalCodeRequest();
            validateRequest.setCountryCode(parentCountry);
            validateRequest.setPostalCodesList(locationsArray);
            _context.prev = 5;
            _context.next = 8;
            return new Promise(function (resolve, reject) {
              (0, _adstudioWebgateFetch.getWebgateToken)().then(function (wgToken) {
                var validationDeadline = new Date();
                validationDeadline.setSeconds(validationDeadline.getSeconds() + 60);
                targetingServiceClient.validatePostalCodes(validateRequest, {
                  deadline: validationDeadline,
                  Authorization: "Bearer ".concat(wgToken)
                }, function (validationError, validationResponse) {
                  if (validationResponse === null) {
                    reject(validationError);
                    return;
                  }

                  var filters = new _service_pb.GeoLocationTargetingFilters();
                  filters.setGeoIdsList(validationResponse.getValidPostalCodeListList().map(function (postalCode) {
                    return "".concat(parentCountry, ":").concat(postalCode);
                  }));
                  var pagingParameters = new _service_pb.PagingParameters();
                  pagingParameters.setLimit(1000);
                  var pagingAndSorting = new _service_pb.PagingAndSorting();
                  pagingAndSorting.setParameters(pagingParameters);
                  var geoRequest = new _service_pb.GeoLocationTargetingRequest();
                  geoRequest.setFilters(filters);
                  geoRequest.setPagingAndSorting(pagingAndSorting);
                  var geoDeadline = new Date();
                  geoDeadline.setSeconds(geoDeadline.getSeconds() + 60);
                  targetingServiceClient.getGeoLocationTargeting(geoRequest, {
                    deadline: geoDeadline,
                    Authorization: "Bearer ".concat(wgToken)
                  }, function (geoError, geoResponse) {
                    if (geoResponse !== null) {
                      resolve({
                        validLocations: geoResponse.getResultsList().map(_geoLocationMapper.geoLocationToJson),
                        invalidLocations: validationResponse.getInvalidPostalCodeListList()
                      });
                    } else {
                      reject(geoError);
                    }
                  });
                });
              });
            });

          case 8:
            return _context.abrupt("return", _context.sent);

          case 11:
            _context.prev = 11;
            _context.t0 = _context["catch"](5);
            throw new Error('Failed to fetch locations', _context.t0);

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[5, 11]]);
  }));
  return _fetchLocations.apply(this, arguments);
}