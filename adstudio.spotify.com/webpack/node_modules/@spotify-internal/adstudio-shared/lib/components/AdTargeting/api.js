"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTargetingServiceClient = getTargetingServiceClient;
exports.setTargetingServiceClient = setTargetingServiceClient;
exports.setEdgeHost = setEdgeHost;
exports.setApiHost = setApiHost;
exports.searchGeosInTargeting = searchGeosInTargeting;

var _adstudioWebgateFetch = require("@spotify-internal/adstudio-webgate-fetch");

var _service_pb = require("@spotify-internal/targetingservice/proto/com/spotify/targetingservice/proto/service_pb");

var _service_grpc_web_pb = require("@spotify-internal/targetingservice/proto/com/spotify/targetingservice/proto/service_grpc_web_pb");

var _geoLocationMapper = require("../../utils/geoLocationMapper");

var _utilities = require("../../utilities");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * getters and setters for api host, to be set when the component initializes
 */

/** @type {TargetingServiceClient} */
var _targetingServiceClient;
/** @returns {TargetingServiceClient} */


function getTargetingServiceClient() {
  if (!_targetingServiceClient) {
    throw new Error('TargetingServiceClient was not set!');
  }

  return _targetingServiceClient;
}
/** @param {TargetingServiceClient} newTargetingServiceClient */


function setTargetingServiceClient(newTargetingServiceClient) {
  _targetingServiceClient = newTargetingServiceClient;
}
/**
 * Method for external callers to set the host
 *
 * @param {string} url edge proxy base url (e.g http://edge-grpc.spotify.com)
 */


function setEdgeHost(url) {
  var client = new _service_grpc_web_pb.TargetingServiceClient(url);
  (0, _utilities.enableGrpcDevConsole)([client]);
  setTargetingServiceClient(client);
} // eslint-disable-next-line @typescript-eslint/no-unused-vars


function setApiHost(_host) {// Does nothing. This method remains to prevent callers from breaking. You should be calling setEdgeHost now (but with the edge host instead of the webgate host).
}

function searchGeosInTargeting(_x) {
  return _searchGeosInTargeting.apply(this, arguments);
}

function _searchGeosInTargeting() {
  _searchGeosInTargeting = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(keyword) {
    var request, filters, pagingParameters, sorting, pagingAndSorting;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            request = new _service_pb.GeoLocationTargetingRequest();
            filters = new _service_pb.GeoLocationTargetingFilters();
            pagingParameters = new _service_pb.PagingParameters();
            sorting = new _service_pb.Sorting();
            pagingAndSorting = new _service_pb.PagingAndSorting();
            sorting.setField(_service_pb.Sorting.SortField.GEO_TYPE_SORT_ORDER);
            sorting.setDirection(_service_pb.SortDirection.Type.ASC);
            pagingParameters.setLimit(10);
            pagingParameters.setOffset(0);
            pagingAndSorting.addSorting(sorting);
            pagingAndSorting.setParameters(pagingParameters);
            filters.setKeywordsList(keyword.split(' '));
            filters.addTypes(_service_pb.GeoLocation.Type.COUNTRY);
            filters.addTypes(_service_pb.GeoLocation.Type.REGION);
            filters.addTypes(_service_pb.GeoLocation.Type.CITY);
            filters.addTypes(_service_pb.GeoLocation.Type.DMA_REGION);
            filters.addTypes(_service_pb.GeoLocation.Type.COUNTY);
            request.setFilters(filters);
            request.setPagingAndSorting(pagingAndSorting);
            _context.next = 22;
            return new Promise(function (resolve, reject) {
              (0, _adstudioWebgateFetch.getWebgateToken)().then(function (wgToken) {
                var deadline = new Date();
                deadline.setSeconds(deadline.getSeconds() + 60);
                getTargetingServiceClient().getGeoLocationTargeting(request, {
                  deadline: deadline.getTime(),
                  Authorization: "Bearer ".concat(wgToken)
                }, function (err, response) {
                  if (response === null) {
                    reject(err);
                  } else {
                    resolve(response.getResultsList().map(_geoLocationMapper.geoLocationToJson));
                  }
                });
              });
            });

          case 22:
            return _context.abrupt("return", _context.sent);

          case 25:
            _context.prev = 25;
            _context.t0 = _context["catch"](0);
            throw new Error(_context.t0.message);

          case 28:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 25]]);
  }));
  return _searchGeosInTargeting.apply(this, arguments);
}