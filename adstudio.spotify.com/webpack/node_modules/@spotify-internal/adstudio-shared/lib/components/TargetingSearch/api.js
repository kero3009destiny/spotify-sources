"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.searchApiTargeting = searchApiTargeting;
exports.TargetingEntities = void 0;

var _adstudioWebgateFetch = require("@spotify-internal/adstudio-webgate-fetch");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

// https://backstage.spotify.net/services/search-api/api
var TargetingEntities = Object.freeze({
  artist: 'artist',
  genre: 'genre',
  playlist: 'playlist',
  geo: 'geo'
});
exports.TargetingEntities = TargetingEntities;

function searchApiTargeting(_x, _x2) {
  return _searchApiTargeting.apply(this, arguments);
}

function _searchApiTargeting() {
  _searchApiTargeting = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(apiHost, entity) {
    var query,
        id,
        suffix,
        sf,
        q,
        e,
        r,
        payload,
        _args = arguments;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            query = _args.length > 2 && _args[2] !== undefined ? _args[2] : '';
            id = _args.length > 3 && _args[3] !== undefined ? _args[3] : '';
            suffix = _args.length > 4 && _args[4] !== undefined ? _args[4] : '';
            sf = query && suffix ? suffix : '';
            q = id ? "ids=".concat(id) : "q=".concat(query).concat(sf);
            e = id ? "".concat(entity, "s") : entity;
            _context.next = 8;
            return (0, _adstudioWebgateFetch.webgateFetch)("".concat(apiHost, "/ads/v1/targets/").concat(e, "?").concat(q));

          case 8:
            r = _context.sent;

            if (r.ok) {
              _context.next = 11;
              break;
            }

            throw r;

          case 11:
            _context.next = 13;
            return r.json();

          case 13:
            payload = _context.sent;
            return _context.abrupt("return", payload.results || payload["".concat(entity, "-targets")]);

          case 15:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _searchApiTargeting.apply(this, arguments);
}