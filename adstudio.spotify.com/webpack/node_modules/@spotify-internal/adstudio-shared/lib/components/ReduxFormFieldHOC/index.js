"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = ReduxFormFieldHOC;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _adstudioTape = require("@spotify-internal/adstudio-tape");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

// TODO: This HOC works to prop drill properties from either
//       redux-form OR react-final-form and should be renamed
//       to reflect that.
function ReduxFormFieldHOC(TapeComponent) {
  var WrappedTapeComponent = function WrappedTapeComponent(_ref) {
    var _ref$allowSubDescript = _ref.allowSubDescriptionClearance,
        allowSubDescriptionClearance = _ref$allowSubDescript === void 0 ? false : _ref$allowSubDescript,
        input = _ref.input,
        meta = _ref.meta,
        label = _ref.label,
        subDescription = _ref.subDescription,
        description = _ref.description,
        flush = _ref.flush,
        providedId = _ref.id,
        disabled = _ref.disabled,
        showErrorOnTop = _ref.showErrorOnTop,
        isOptional = _ref.isOptional,
        optionalLabelText = _ref.optionalLabelText,
        asyncErrorMessage = _ref.asyncErrorMessage,
        rest = _objectWithoutProperties(_ref, ["allowSubDescriptionClearance", "input", "meta", "label", "subDescription", "description", "flush", "id", "disabled", "showErrorOnTop", "isOptional", "optionalLabelText", "asyncErrorMessage"]);

    var syncErrorMessage = meta.error,
        submitFailed = meta.submitFailed,
        touched = meta.touched,
        dirty = meta.dirty,
        metaRest = _objectWithoutProperties(meta, ["error", "submitFailed", "touched", "dirty"]);

    var error = asyncErrorMessage || syncErrorMessage;
    var showErrors = error && (touched || submitFailed || dirty);
    var errorVal = showErrors ? error : undefined;
    var id = providedId || "FormGroup-".concat(input.name);
    return /*#__PURE__*/_react["default"].createElement(_adstudioTape.FormGroup, _extends({}, metaRest, {
      allowSubDescriptionClearance: allowSubDescriptionClearance,
      description: description,
      disabled: disabled,
      error: errorVal,
      flush: flush,
      forLabel: id,
      isOptional: isOptional,
      optionalLabelText: optionalLabelText,
      label: label,
      showErrorOnTop: showErrorOnTop,
      subDescription: subDescription
    }), /*#__PURE__*/_react["default"].createElement(TapeComponent, _extends({}, input, rest, {
      disabled: disabled,
      error: showErrors,
      id: id
    })));
  };

  WrappedTapeComponent.propTypes = {
    allowSubDescriptionClearance: _propTypes["default"].bool,
    description: _propTypes["default"].node,
    disabled: _propTypes["default"].bool,
    flush: _propTypes["default"].bool,
    id: _propTypes["default"].string,
    input: _propTypes["default"].shape({
      onBlur: _propTypes["default"].func,
      onChange: _propTypes["default"].func,
      onFocus: _propTypes["default"].func,
      value: _propTypes["default"].any
    }),
    isOptional: _propTypes["default"].bool,
    optionalLabelText: _propTypes["default"].string,
    label: _propTypes["default"].string,
    meta: _propTypes["default"].shape({
      touched: _propTypes["default"].bool,
      error: _propTypes["default"].string
    }),
    showErrorOnTop: _propTypes["default"].bool,
    subDescription: _propTypes["default"].node
  };
  return WrappedTapeComponent;
}