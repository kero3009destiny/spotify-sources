"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = SchedulePicker;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reduxForm = require("redux-form");

var _classnames = _interopRequireDefault(require("classnames"));

var _ReduxFormDatetimePicker = _interopRequireDefault(require("../ReduxFormDatetimePicker"));

var _validators = require("./validators");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function SchedulePicker(_ref) {
  var props = _extends({}, _ref);

  var validate = props.validate,
      countryCode = props.countryCode,
      datePickerStrings = props.datePickerStrings,
      rest = _objectWithoutProperties(props, ["validate", "countryCode", "datePickerStrings"]);

  return /*#__PURE__*/_react["default"].createElement("div", {
    className: (0, _classnames["default"])('schedule-picker')
  }, /*#__PURE__*/_react["default"].createElement(_reduxForm.Field, _extends({
    component: _ReduxFormDatetimePicker["default"],
    countryCode: countryCode,
    name: "dateRange",
    validate: [_validators.startDateIsBeforeEndDate].concat(_toConsumableArray(validate))
  }, datePickerStrings, rest)));
}

SchedulePicker.propTypes = {
  countryCode: _propTypes["default"].string.isRequired,
  datePickerStrings: _propTypes["default"].object,
  validate: _propTypes["default"].array
};
SchedulePicker.defaultProps = {
  openDirection: 'up',
  countryCode: 'en-US',
  validate: []
};