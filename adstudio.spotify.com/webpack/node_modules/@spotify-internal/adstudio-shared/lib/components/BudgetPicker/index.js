"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.BudgetPickerField = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reduxForm = require("redux-form");

var _validators = require("@spotify-internal/adstudio-web-utils/lib/validators");

var _ReduxFormFieldHOC = _interopRequireDefault(require("../ReduxFormFieldHOC"));

var _budget = require("../../config/budget");

var _utils = require("./utils");

var _BudgetPickerInput = _interopRequireDefault(require("./BudgetPickerInput"));

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var ReduxFormBudgetPickerInput = (0, _ReduxFormFieldHOC["default"])(_BudgetPickerInput["default"]);

var BudgetPickerField = function BudgetPickerField(_ref) {
  var budgetOptions = _ref.budgetOptions,
      currencyFormatter = _ref.currencyFormatter,
      decimalSeparator = _ref.decimalSeparator,
      description = _ref.description,
      hideDescription = _ref.hideDescription,
      highBudgetErrorText = _ref.highBudgetErrorText,
      lowBudgetErrorText = _ref.lowBudgetErrorText,
      maxBudget = _ref.maxBudget,
      maxBudgetPrefix = _ref.maxBudgetPrefix,
      maxBudgetSuffix = _ref.maxBudgetSuffix,
      minBudget = _ref.minBudget,
      minBudgetPrefix = _ref.minBudgetPrefix,
      name = _ref.name,
      noMaxBudget = _ref.noMaxBudget,
      numericErrorText = _ref.numericErrorText,
      premiumBudget = _ref.premiumBudget,
      premiumErrorText = _ref.premiumErrorText,
      validate = _ref.validate,
      props = _objectWithoutProperties(_ref, ["budgetOptions", "currencyFormatter", "decimalSeparator", "description", "hideDescription", "highBudgetErrorText", "lowBudgetErrorText", "maxBudget", "maxBudgetPrefix", "maxBudgetSuffix", "minBudget", "minBudgetPrefix", "name", "noMaxBudget", "numericErrorText", "premiumBudget", "premiumErrorText", "validate"]);

  return /*#__PURE__*/_react["default"].createElement(_reduxForm.Field, {
    budgetOptions: budgetOptions,
    component: ReduxFormBudgetPickerInput,
    currencyFormatter: currencyFormatter,
    decimalSeparator: decimalSeparator,
    description: hideDescription ? undefined : description,
    name: name,
    props: _objectSpread(_objectSpread({}, props), {}, {
      minBudget: minBudget,
      budgetOptions: budgetOptions,
      maxBudget: maxBudget
    }),
    validate: [].concat(_toConsumableArray(validate), [_validators.numericString, (0, _utils.validateCustomBudgetAmount)({
      currencyFormatter: currencyFormatter,
      highBudgetErrorText: highBudgetErrorText,
      lowBudgetErrorText: lowBudgetErrorText,
      maxBudget: maxBudget,
      maxBudgetPrefix: maxBudgetPrefix,
      maxBudgetSuffix: maxBudgetSuffix,
      minBudget: minBudget,
      minBudgetPrefix: minBudgetPrefix,
      noMaxBudget: noMaxBudget,
      numericErrorText: numericErrorText,
      premiumBudget: premiumBudget,
      premiumErrorText: premiumErrorText
    })])
  });
};

exports.BudgetPickerField = BudgetPickerField;
BudgetPickerField.defaultProps = {
  budgetOptions: _budget.TOTAL_BUDGETS,
  description: _constants.BUDGET_PICKER_DESCRIPTION,
  maxBudget: _budget.MAX_BUDGET,
  minBudget: _budget.MIN_BUDGET,
  premiumBudget: _budget.PREMIUM_THRESHOLD,
  name: 'totalBudget',
  noMaxBudget: false,
  validate: [_validators.required]
};
BudgetPickerField.propTypes = {
  budgetOptions: _propTypes["default"].arrayOf(_propTypes["default"].number),
  customBudgetFieldWidth: _propTypes["default"].string,
  currencyFormatter: _propTypes["default"].func.isRequired,
  decimalSeparator: _propTypes["default"].string,
  description: _propTypes["default"].string,
  hideDescription: _propTypes["default"].bool,
  highBudgetErrorText: _propTypes["default"].string,
  lowBudgetErrorText: _propTypes["default"].string,
  maxBudget: _propTypes["default"].number,
  maxBudgetPrefix: _propTypes["default"].string,
  maxBudgetSuffix: _propTypes["default"].string,
  minBudget: _propTypes["default"].number,
  minBudgetPrefix: _propTypes["default"].string,
  name: _propTypes["default"].string,
  noMaxBudget: _propTypes["default"].bool,
  numericErrorText: _propTypes["default"].string,
  placeholder: _propTypes["default"].string,
  premiumBudget: _propTypes["default"].number,
  premiumErrorText: _propTypes["default"].string,
  validate: _propTypes["default"].array
};
var _default = BudgetPickerField;
exports["default"] = _default;