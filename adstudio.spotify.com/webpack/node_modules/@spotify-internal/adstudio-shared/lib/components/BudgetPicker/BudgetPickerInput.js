"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.BudgetPickerInput = exports.CustomBudget = exports.BudgetSelectBar = exports.BudgetInput = void 0;

var _memoize2 = _interopRequireDefault(require("lodash/memoize"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _adstudioTape = require("@spotify-internal/adstudio-tape");

var _encoreAdvertisingWeb = require("@spotify-internal/encore-advertising-web");

var _budget = require("../../config/budget");

var _SelectBar = _interopRequireDefault(require("../SelectBar"));

var _utils = require("../SelectBar/utils");

var _constants = require("./constants");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var BudgetInput = _styledComponents["default"].div.withConfig({
  displayName: "BudgetPickerInput__BudgetInput",
  componentId: "sc-1rmfn50-0"
})(["display:flex;"]);

exports.BudgetInput = BudgetInput;
var BudgetSelectBar = (0, _styledComponents["default"])(_SelectBar["default"]).withConfig({
  displayName: "BudgetPickerInput__BudgetSelectBar",
  componentId: "sc-1rmfn50-1"
})(["flex:0 0 auto;"]);
exports.BudgetSelectBar = BudgetSelectBar;
var CustomBudget = (0, _styledComponents["default"])(_adstudioTape.Input).withConfig({
  displayName: "BudgetPickerInput__CustomBudget",
  componentId: "sc-1rmfn50-2"
})(["flex:0 0 auto;margin-left:", ";text-align:left;", ";", ";"], _encoreAdvertisingWeb.spacer16, function (_ref) {
  var active = _ref.active,
      theme = _ref.theme;
  return active && (0, _styledComponents.css)(["background-color:", ";color:", ";&::placeholder{color:", ";}"], theme.colors.primaryColor || _encoreAdvertisingWeb.azure, _encoreAdvertisingWeb.white, _encoreAdvertisingWeb.white);
}, function (_ref2) {
  var width = _ref2.width;
  return width ? (0, _styledComponents.css)(["width:", ";"], width) : (0, _styledComponents.css)(["flex-grow:1;width:auto;"]);
});
exports.CustomBudget = CustomBudget;

var _getAvailableBudgets = function _getAvailableBudgets(budgetOptions, currencyFormatter) {
  return (0, _utils.addDataTestAttr)(budgetOptions.map(function (amount) {
    return {
      key: amount.toString(),
      value: currencyFormatter(amount, {
        decimals: 0
      })
    };
  }));
};

var getAvailableBudgets = (0, _memoize2["default"])(_getAvailableBudgets, function (opts, formatter) {
  return JSON.stringify([opts, formatter.toString()]);
});

var getNumberFromCurrencyString = function getNumberFromCurrencyString(str) {
  var decimalSeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var numericCharacterRegex = new RegExp("[^0-9".concat(decimalSeparator, "]"), 'g');
  var numericPortion = str.replace(numericCharacterRegex, '').replace(decimalSeparator, '.');

  if (numericPortion) {
    return Number(numericPortion);
  }

  return NaN;
};

var isRealNumber = function isRealNumber(num) {
  return typeof num === 'number' && !isNaN(num);
};

var budgetActiveStateComparator = function budgetActiveStateComparator(key, value) {
  return parseFloat(key) === parseFloat(value);
};

var INITIAL_STATE = {
  buttonBudget: '',
  customBudget: '',
  customBudgetActive: false
};

var BudgetPickerInput = /*#__PURE__*/function (_Component) {
  _inherits(BudgetPickerInput, _Component);

  var _super = _createSuper(BudgetPickerInput);

  function BudgetPickerInput() {
    var _this;

    _classCallCheck(this, BudgetPickerInput);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = INITIAL_STATE;
    return _this;
  }

  _createClass(BudgetPickerInput, [{
    key: "UNSAFE_componentWillMount",
    value: function UNSAFE_componentWillMount() {
      var value = this.props.value; // There's an existing budget when we load an ad after coming back from
      // connecting a payment method

      this.updateStateFromExternalValue(value);
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(_ref3) {
      var value = _ref3.value,
          error = _ref3.error;

      if (error) {
        this.setState(function () {
          return {
            customBudgetActive: false
          };
        });
      } else {
        this.updateStateFromExternalValue(value);
      }
    }
  }, {
    key: "onAvailableBudgetChange",
    value: function onAvailableBudgetChange(availableBudget) {
      var logUserAction = this.props.logUserAction;
      this.setState(function () {
        return {
          buttonBudget: availableBudget,
          customBudgetActive: false,
          customBudget: ''
        };
      });

      if (!!logUserAction) {
        logUserAction({
          amount: availableBudget,
          label: 'Budget_default_option'
        });
      }

      this.updateTotalBudget(availableBudget);
    }
  }, {
    key: "onCustomBudgetChange",
    value: function onCustomBudgetChange(_ref4) {
      var customBudget = _ref4.target.value;
      this.setState(function () {
        return {
          customBudget: customBudget
        };
      });
    }
  }, {
    key: "onCustomBudgetBlur",
    value: function onCustomBudgetBlur(event) {
      var customBudget = event.target.value;
      var _this$props = this.props,
          currencyFormatter = _this$props.currencyFormatter,
          decimalSeparator = _this$props.decimalSeparator,
          minBudget = _this$props.minBudget,
          logUserAction = _this$props.logUserAction;

      if (customBudget) {
        var numericCustomBudget = getNumberFromCurrencyString(customBudget, decimalSeparator);
        var budgetIsValidNumber = isRealNumber(numericCustomBudget);
        var budgetIsUnderMinimum = budgetIsValidNumber && numericCustomBudget < minBudget;
        this.setState(function () {
          return {
            buttonBudget: '0',
            customBudget: budgetIsValidNumber ? currencyFormatter(numericCustomBudget) : '',
            customBudgetActive: !!budgetIsValidNumber
          };
        });

        if (!!logUserAction && budgetIsUnderMinimum) {
          logUserAction({
            amount: numericCustomBudget,
            label: 'below_budget_error'
          });
        }

        if (budgetIsValidNumber) {
          if (!!logUserAction && !budgetIsUnderMinimum) {
            logUserAction({
              amount: customBudget,
              label: 'valid_budget_entered'
            });
          }

          this.props.onBlur(event);
          this.updateTotalBudget(customBudget);
        }
      }
    }
  }, {
    key: "onCustomBudgetFocus",
    value: function onCustomBudgetFocus(event) {
      this.setState(function () {
        return {
          customBudgetActive: false
        };
      });
      this.props.onFocus(event);
    }
  }, {
    key: "onCustomBudgetKeyPress",
    value: function onCustomBudgetKeyPress(e) {
      if (e.key === 'Enter') {
        // Calling blur to get the unfocused visual state in addition
        // to the _onBlur handling logic
        e.target.blur();
        e.preventDefault();
      }
    }
  }, {
    key: "updateStateFromExternalValue",
    value: function updateStateFromExternalValue(value) {
      var _this$props2 = this.props,
          budgetOptions = _this$props2.budgetOptions,
          currencyFormatter = _this$props2.currencyFormatter;

      if (value) {
        var numericTotalBudget = Number(value);
        var budgetIsCustom = !budgetOptions.includes(numericTotalBudget);

        if (isRealNumber(numericTotalBudget) && budgetIsCustom) {
          this.setState(function () {
            return {
              buttonBudget: '',
              customBudget: currencyFormatter(numericTotalBudget),
              customBudgetActive: true
            };
          });
        } else {
          this.setState(function () {
            return {
              buttonBudget: value,
              customBudget: '',
              customBudgetActive: false
            };
          });
        }
      } else {
        // consumer is trying to clear budget picker state
        this.setState(INITIAL_STATE);
      }
    } // update the total budget value on the payments object while
    // preserving the rest of the values

  }, {
    key: "updateTotalBudget",
    value: function updateTotalBudget(newTotalBudget) {
      var _this$props3 = this.props,
          decimalSeparator = _this$props3.decimalSeparator,
          onChange = _this$props3.onChange;
      var numericBudget = getNumberFromCurrencyString(newTotalBudget, decimalSeparator);

      if (isRealNumber(numericBudget)) {
        onChange(numericBudget.toString());
      } else {
        onChange('');
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props4 = this.props,
          budgetOptions = _this$props4.budgetOptions,
          currencyFormatter = _this$props4.currencyFormatter,
          customBudgetFieldWidth = _this$props4.customBudgetFieldWidth,
          placeholder = _this$props4.placeholder,
          theme = _this$props4.theme;
      var _this$state = this.state,
          buttonBudget = _this$state.buttonBudget,
          customBudgetActive = _this$state.customBudgetActive,
          customBudget = _this$state.customBudget;
      var options = getAvailableBudgets(budgetOptions, currencyFormatter);
      return /*#__PURE__*/_react["default"].createElement(BudgetInput, null, /*#__PURE__*/_react["default"].createElement(BudgetSelectBar, {
        disableOnClickWhenActive: true,
        onChange: function onChange(value) {
          return _this2.onAvailableBudgetChange(value);
        },
        options: options,
        value: buttonBudget.toString(),
        activeStateComparator: budgetActiveStateComparator
      }), /*#__PURE__*/_react["default"].createElement(CustomBudget, {
        active: customBudgetActive,
        id: "custom-budget-field",
        maxlength: 20,
        name: "custom-budget-field",
        onBlur: function onBlur(e) {
          return _this2.onCustomBudgetBlur(e);
        },
        onChange: function onChange(e) {
          return _this2.onCustomBudgetChange(e);
        },
        onFocus: function onFocus(e) {
          return _this2.onCustomBudgetFocus(e);
        },
        onKeyPress: function onKeyPress(e) {
          return _this2.onCustomBudgetKeyPress(e);
        },
        placeholder: placeholder,
        value: customBudget,
        width: customBudgetFieldWidth,
        theme: theme
      }));
    }
  }]);

  return BudgetPickerInput;
}(_react.Component);

exports.BudgetPickerInput = BudgetPickerInput;
BudgetPickerInput.propTypes = {
  budgetOptions: _propTypes["default"].arrayOf(_propTypes["default"].number),
  customBudgetFieldWidth: _propTypes["default"].string,
  currencyFormatter: _propTypes["default"].func.isRequired,
  decimalSeparator: _propTypes["default"].string,
  error: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].bool]),
  logUserAction: _propTypes["default"].func,
  minBudget: _propTypes["default"].number,
  onBlur: _propTypes["default"].func.isRequired,
  onChange: _propTypes["default"].func.isRequired,
  onFocus: _propTypes["default"].func.isRequired,
  placeholder: _propTypes["default"].string,
  value: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),
  theme: _propTypes["default"].shape({})
};
BudgetPickerInput.defaultProps = {
  budgetOptions: _budget.TOTAL_BUDGETS,
  placeholder: _constants.CUSTOM_BUDGET_PLACEHOLDER,
  decimalSeparator: '.'
};

var _default = (0, _styledComponents.withTheme)(BudgetPickerInput);

exports["default"] = _default;