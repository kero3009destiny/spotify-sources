"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateCustomBudgetAmount = exports.tooHighErrorMessage = exports.tooLowErrorMessage = void 0;

var _memoize2 = _interopRequireDefault(require("lodash/memoize"));

var _currency = require("@spotify-internal/adstudio-web-utils/lib/utils/currency");

var _budget = require("../../config/budget");

var _validators = require("../../utils/validators");

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var tooLowErrorMessage = function tooLowErrorMessage(currencyFormatter, minBudget) {
  var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _constants.HAS_MINIMUM_BUDGET;
  return "".concat(prefix, " ").concat(currencyFormatter(minBudget, {
    decimals: 0
  }), ".");
};

exports.tooLowErrorMessage = tooLowErrorMessage;

var tooHighErrorMessage = function tooHighErrorMessage(currencyFormatter, maxBudget) {
  var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _constants.HAS_MAXIMUM_BUDGET;
  var suffix = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _constants.HELP_SETUP_LARGER_CAMPAIGNS;
  return "".concat(prefix, " ").concat(currencyFormatter(maxBudget, {
    decimals: 0
  }), " ").concat(suffix, ".");
}; // special validation case for custom budget amounts


exports.tooHighErrorMessage = tooHighErrorMessage;
var validateCustomBudgetAmount = (0, _memoize2["default"])(function (options) {
  var highBudgetErrorText = options.highBudgetErrorText,
      lowBudgetErrorText = options.lowBudgetErrorText,
      numericErrorText = options.numericErrorText,
      premiumErrorText = options.premiumErrorText,
      currencyFormatter = options.currencyFormatter,
      initialMaxBudget = options.maxBudget,
      maxBudgetPrefix = options.maxBudgetPrefix,
      maxBudgetSuffix = options.maxBudgetSuffix,
      minBudget = options.minBudget,
      minBudgetPrefix = options.minBudgetPrefix,
      noMaxBudget = options.noMaxBudget,
      premiumBudget = options.premiumBudget;
  var maxBudget = noMaxBudget ? Infinity : initialMaxBudget;
  var amountRangeValidator = (0, _validators.numericStringBetween)(minBudget, maxBudget, currencyFormatter);
  var premiumBudgetValidator = (0, _validators.numericStringBelow)(premiumBudget, currencyFormatter);
  var maxBudgetValidator = (0, _validators.numericStringBelow)(maxBudget, currencyFormatter);
  var minBudgetValidator = (0, _validators.numericStringAbove)(minBudget, currencyFormatter);
  return function (value) {
    var amountErrorMessage = amountRangeValidator(value); // the amount provided was in range

    if (!amountErrorMessage) {
      return;
    }

    var number = (0, _currency.getNumberFromCurrencyString)(value);

    if (typeof number !== 'number') {
      return numericErrorText || _constants.NUMERIC_ERROR;
    } // 0.03 & 20.03 are a valid amounts for testing


    if ([_budget.EASTER_EGG_BUDGET, _budget.EASTER_EGG_BUDGET_E2E].includes(number.toString())) {
      return;
    } // if we are above the premium threshold, show the premium error.


    if (premiumBudgetValidator(value)) {
      return premiumErrorText || _constants.PREMIUM_ERROR;
    } // if we are above the normal threshold, show the max error.


    if (maxBudgetValidator(value)) {
      return highBudgetErrorText || tooHighErrorMessage(currencyFormatter, maxBudget, maxBudgetPrefix, maxBudgetSuffix);
    } // if we are above the normal threshold, show the max error.


    if (minBudgetValidator(value)) {
      return lowBudgetErrorText || tooLowErrorMessage(currencyFormatter, minBudget, minBudgetPrefix);
    } // something different is unexpected on.


    return amountErrorMessage;
  };
}, function (_ref) {
  var currencyFormatter = _ref.currencyFormatter,
      highBudgetErrorText = _ref.highBudgetErrorText,
      lowBudgetErrorText = _ref.lowBudgetErrorText,
      maxBudget = _ref.maxBudget,
      maxBudgetPrefix = _ref.maxBudgetPrefix,
      maxBudgetSuffix = _ref.maxBudgetSuffix,
      minBudget = _ref.minBudget,
      minBudgetPrefix = _ref.minBudgetPrefix,
      noMaxBudget = _ref.noMaxBudget,
      numericErrorText = _ref.numericErrorText,
      premiumBudget = _ref.premiumBudget,
      premiumErrorText = _ref.premiumErrorText;
  return [currencyFormatter(1234.56), highBudgetErrorText, lowBudgetErrorText, maxBudget, maxBudgetPrefix, maxBudgetSuffix, minBudget, minBudgetPrefix, noMaxBudget, numericErrorText, premiumBudget, premiumErrorText].join('|');
});
exports.validateCustomBudgetAmount = validateCustomBudgetAmount;