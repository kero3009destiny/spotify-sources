"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.TableBrowser = void 0;

var _react = _interopRequireWildcard(require("react"));

var _queryString = _interopRequireDefault(require("query-string"));

var _TableContainer = _interopRequireDefault(require("./TableContainer"));

var _prefixes = require("./prefixes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var TableBrowser = /*#__PURE__*/function (_Component) {
  _inherits(TableBrowser, _Component);

  var _super = _createSuper(TableBrowser);

  function TableBrowser() {
    var _this;

    _classCallCheck(this, TableBrowser);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.handleRouteChange = function (params) {
      var prefixedParams = (0, _prefixes.prefixObject)(params, _this.props.queryParamsPrefix || '', _this.props.queryParamsToIgnore || new Set());

      _this.props.onChangeParams(_this.buildRoutingParams(prefixedParams));
    };

    _this.state = {
      routeParams: {}
    };

    _this.buildRoutingParams = function (params) {
      return {
        pathname: _this.props.location.pathname,
        search: _queryString["default"].stringify(Object.assign({}, _this.state.routeParams, params))
      };
    };

    return _this;
  }

  _createClass(TableBrowser, [{
    key: "componentDidMount",
    value:
    /**
     * @desc componentDidMount - check for browser location for route parameters.
     * Merge the default query params with the user's chosen query params.
     */
    function componentDidMount() {
      var userParams = _queryString["default"].parse(this.props.location.search) || {};

      var routeParams = _objectSpread(_objectSpread({}, (0, _prefixes.prefixObject)(this.props.defaultQueryParams, this.props.queryParamsPrefix || '', this.props.queryParamsToIgnore || new Set())), userParams);

      this.setState({
        routeParams: routeParams
      });
      this.props.onLoadParams(this.buildRoutingParams(routeParams));
    }
    /**
     * @desc handleRouteChange - Takes a parameter object and mutates
     * router history.
     */

  }, {
    key: "componentWillReceiveProps",
    value:
    /**
     * @desc componentWilLReceiveProps - make a fetchTableData call if
     * route query parameters change.
     */
    function componentWillReceiveProps(nextProps) {
      var routeParams = _queryString["default"].parse(nextProps.location.search) || {};
      var queryParamsChanged = JSON.stringify(this.state.routeParams) !== JSON.stringify(routeParams);

      if (queryParamsChanged && Object.keys(routeParams).length > 0) {
        this.fetchTableData(routeParams);
      }

      this.setState({
        routeParams: routeParams
      });
    }
  }, {
    key: "fetchTableData",
    value: function fetchTableData(params) {
      this.props.fetchTableData((0, _prefixes.unprefixObject)(params, this.props.queryParamsPrefix || ''));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          tableComponent = _this$props.tableComponent,
          filtersComponent = _this$props.filtersComponent,
          additionalFiltersComponent = _this$props.additionalFiltersComponent,
          defaultQueryParams = _this$props.defaultQueryParams,
          tableState = _this$props.tableState,
          pageTitle = _this$props.pageTitle,
          paginationStringGenerator = _this$props.paginationStringGenerator,
          queryParamsPrefix = _this$props.queryParamsPrefix;
      var routeParams = this.state.routeParams;
      return /*#__PURE__*/_react["default"].createElement(_TableContainer["default"], {
        onRouteChange: this.handleRouteChange,
        tableComponent: tableComponent,
        filtersComponent: filtersComponent,
        additionalFiltersComponent: additionalFiltersComponent,
        defaultQueryParams: (0, _prefixes.unprefixObject)(defaultQueryParams, queryParamsPrefix || ''),
        pageTitle: pageTitle,
        paginationStringGenerator: paginationStringGenerator,
        tableState: tableState,
        tableParams: (0, _prefixes.unprefixObject)(routeParams, queryParamsPrefix || '')
      });
    }
  }]);

  return TableBrowser;
}(_react.Component);

exports.TableBrowser = TableBrowser;
TableBrowser.defaultProps = {
  onLoadParams: function onLoadParams() {},
  onChangeParams: function onChangeParams() {}
};
var _default = TableBrowser;
exports["default"] = _default;