"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Suggestion", {
  enumerable: true,
  get: function get() {
    return _Suggestion["default"];
  }
});
exports["default"] = exports.Autosuggest = void 0;

var _property2 = _interopRequireDefault(require("lodash/property"));

var _debounce2 = _interopRequireDefault(require("lodash/debounce"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactAutosuggest = _interopRequireDefault(require("react-autosuggest"));

var _autosuggestHighlight = _interopRequireDefault(require("autosuggest-highlight"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _encoreAdvertisingWeb = require("@spotify-internal/encore-advertising-web");

var _utils = require("./utils");

var _Suggestion = _interopRequireDefault(require("./Suggestion"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var sharedContainerStyles = (0, _styledComponents.css)(["position:absolute;padding:", " 0px;top:60px;background-color:", ";border-radius:", ";box-shadow:0 ", " ", " 0 rgba(0,0,0,0.2);width:100%;max-height:273px;z-index:900;color:", ";font-size:", ";font-weight:", ";letter-spacing:", ";line-height:", ";overflow:auto;"], _encoreAdvertisingWeb.spacer8, _encoreAdvertisingWeb.white, _encoreAdvertisingWeb.spacer8, _encoreAdvertisingWeb.spacer4, _encoreAdvertisingWeb.spacer12, _encoreAdvertisingWeb.gray30, _encoreAdvertisingWeb.body2FontSize, _encoreAdvertisingWeb.body2FontWeight, _encoreAdvertisingWeb.body2LetterSpacing, _encoreAdvertisingWeb.body2LineHeight);

var Loading = _styledComponents["default"].div.withConfig({
  displayName: "Input__Loading",
  componentId: "sc-185rvi4-0"
})(["display:flex;padding:20px;align-items:center;justify-content:space-around;", ""], sharedContainerStyles);

var LazyLoading = _styledComponents["default"].div.withConfig({
  displayName: "Input__LazyLoading",
  componentId: "sc-185rvi4-1"
})(["display:flex;padding:20px;align-items:center;justify-content:space-around;"]);

var Container = _styledComponents["default"].div.attrs({
  spellcheck: 'false'
}).withConfig({
  displayName: "Input__Container",
  componentId: "sc-185rvi4-2"
})(["position:relative;.react-autosuggest__container--open{position:relative;}.react-autosuggest__container--open .react-autosuggest__suggestions-container,.browse-suggestions.react-autosuggest__suggestions-container{", " list-style-type:none;}.react-autosuggest__container--open .react-autosuggest__suggestions-container::-webkit-scrollbar,.browse-suggestions.react-autosuggest__suggestions-container::-webkit-scrollbar{visibility:visible;}.react-autosuggest__suggestion{color:", ";cursor:pointer;font-weight:400;padding:0;p{display:inline-block;margin-bottom:0;margin-top:0;}.padding-left-empty p{margin-bottom:0;margin-top:0;width:95px;}.location-type{background-clip:border-box;}}.react-autosuggest__suggestion--highlighted,.browse-suggestion:hover{background-color:", ";color:", ";}.react-autosuggest__suggestions-list{margin-bottom:0;}"], sharedContainerStyles, _encoreAdvertisingWeb.black, _encoreAdvertisingWeb.gray95, _encoreAdvertisingWeb.black);

var Autosuggest = /*#__PURE__*/function (_Component) {
  _inherits(Autosuggest, _Component);

  var _super = _createSuper(Autosuggest);

  function Autosuggest(props) {
    var _this;

    _classCallCheck(this, Autosuggest);

    _this = _super.call(this, props);

    _this.elemScrollHandler = function (evt) {
      if (!_this.state.hasMoreResults) return;
      var elem = evt.target; // find a 'natural' amount of pixels left in the scrolling container to start loading the next batch

      var remaining = _this.scrollContainer.offsetHeight - elem.scrollTop;

      if (remaining < 300) {
        // not sure why this number has to be so high but it works!
        _this._onMoreSuggestionsFetchRequested();
      }
    };

    _this._renderSuggestionsContainer = function (_ref) {
      var containerProps = _ref.containerProps,
          children = _ref.children;
      return /*#__PURE__*/_react["default"].createElement("div", null, _this.state.loading ? /*#__PURE__*/_react["default"].createElement(Loading, null, /*#__PURE__*/_react["default"].createElement(_encoreAdvertisingWeb.LoadingIndicator, null)) : /*#__PURE__*/_react["default"].createElement("div", containerProps, /*#__PURE__*/_react["default"].createElement("div", {
        ref: function ref(container) {
          return _this.scrollContainer = container;
        }
      }, children, _this.state.loadingMore && /*#__PURE__*/_react["default"].createElement(LazyLoading, null, /*#__PURE__*/_react["default"].createElement(_encoreAdvertisingWeb.LoadingIndicator, null)))));
    };

    _this.state = {
      value: '',
      suggestions: [],
      placeholder: props.selectPlaceholder,
      loading: false,
      loadingMore: false,
      resultsPage: 1,
      // this value is only called at the second API request onwards, so dont start at 0
      hasMoreResults: true
    };
    _this._onBlur = _this._onBlur.bind(_assertThisInitialized(_this));
    _this._onFocus = _this._onFocus.bind(_assertThisInitialized(_this));
    _this._onChange = _this._onChange.bind(_assertThisInitialized(_this));
    _this._onSuggestionsFetchRequested = _this._onSuggestionsFetchRequested.bind(_assertThisInitialized(_this));
    _this._onMoreSuggestionsFetchRequested = _this._onMoreSuggestionsFetchRequested.bind(_assertThisInitialized(_this));
    _this._onAutoSuggestionSelected = _this._onAutoSuggestionSelected.bind(_assertThisInitialized(_this));
    _this._renderAutoSuggestion = _this._renderAutoSuggestion.bind(_assertThisInitialized(_this));
    _this._renderInput = _this._renderInput.bind(_assertThisInitialized(_this));
    _this._onSuggestionsClearRequested = _this._onSuggestionsClearRequested.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Autosuggest, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      if (!this.props.hasLazyLoading) return;
      if (!this.scrollContainer) return;

      if (prevState.loading && !this.state.loading || prevState.loadingMore && !this.state.loadingMore) {
        this.scrollContainer.parentNode.addEventListener('scroll', this.elemScrollHandler);
      } else this.scrollContainer.parentNode.removeEventListener('scroll', this.elemScrollHandler);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.scrollContainer && this.scrollContainer.parentNode) {
        this.scrollContainer.parentNode.removeEventListener('scroll', this.elemScrollHandler);
      }
    }
  }, {
    key: "UNSAFE_componentWillMount",
    value: function UNSAFE_componentWillMount() {
      if (this.props.debounced) {
        this._onSuggestionsFetchRequested = this.props.debounce(this._onSuggestionsFetchRequested, this.constructor.debounceMs);
      }
    }
  }, {
    key: "_onFocus",
    value: function _onFocus() {
      this.setState(function (prevState, _ref2) {
        var searchPlaceholder = _ref2.searchPlaceholder;
        return {
          placeholder: searchPlaceholder,
          focused: true
        };
      });
    }
  }, {
    key: "_onBlur",
    value: function _onBlur() {
      this.setState(function (prevState, _ref3) {
        var selectPlaceholder = _ref3.selectPlaceholder;
        return {
          placeholder: selectPlaceholder,
          focused: false
        };
      });
    }
  }, {
    key: "_onChange",
    value: function _onChange(event, _ref4) {
      var newValue = _ref4.newValue;
      this.setState(function () {
        return {
          value: newValue
        };
      });
    }
  }, {
    key: "_getSuggestions",
    value: function _getSuggestions(value) {
      var _this$props = this.props,
          exclude = _this$props.exclude,
          availableItems = _this$props.availableItems,
          keyField = _this$props.keyField,
          existingValue = _this$props.existingValue; // Only use alpha-numeric and space / period chars
      // See https://jira.spotify.net/browse/CAAG-570

      var specialCharsMinusSpace = /[^.\s\w]/g;
      var inputValue = value.trim().toLowerCase().replace(specialCharsMinusSpace, '');

      if (!inputValue.length) {
        return [];
      }

      return (0, _utils.filterOutExcludedItems)(availableItems, exclude, keyField, existingValue);
    }
  }, {
    key: "_onSuggestionsFetchRequested",
    value: function () {
      var _onSuggestionsFetchRequested2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref5) {
        var value, _this$props2, onChange, exclude, onSortSuggestions, keyField, existingValue, results;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                value = _ref5.value;
                _this$props2 = this.props, onChange = _this$props2.onChange, exclude = _this$props2.exclude, onSortSuggestions = _this$props2.onSortSuggestions, keyField = _this$props2.keyField, existingValue = _this$props2.existingValue;
                this.setState({
                  loading: true
                });

                if (onChange) {
                  _context.next = 6;
                  break;
                }

                this._setSuggestions(onSortSuggestions(this._getSuggestions(value)));

                return _context.abrupt("return");

              case 6:
                _context.next = 8;
                return onChange(value);

              case 8:
                results = _context.sent;

                this._setSuggestions((0, _utils.filterOutExcludedItems)(results, exclude, keyField, existingValue));

                this.setState({
                  loading: false
                });

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function _onSuggestionsFetchRequested(_x) {
        return _onSuggestionsFetchRequested2.apply(this, arguments);
      }

      return _onSuggestionsFetchRequested;
    }()
  }, {
    key: "_onMoreSuggestionsFetchRequested",
    value: function () {
      var _onMoreSuggestionsFetchRequested2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var value, _this$props3, onFetchMore, exclude, keyField, existingValue, results, toAppend;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                value = this.state.value;
                _this$props3 = this.props, onFetchMore = _this$props3.onFetchMore, exclude = _this$props3.exclude, keyField = _this$props3.keyField, existingValue = _this$props3.existingValue;
                this.setState({
                  loadingMore: true
                });
                _context2.next = 5;
                return onFetchMore(value, this.state.resultsPage);

              case 5:
                results = _context2.sent;
                toAppend = (0, _utils.filterOutExcludedItems)(results, exclude, keyField, existingValue);
                if (toAppend.length === 0) this.setState({
                  hasMoreResults: false
                });

                this._appendSuggestions(toAppend);

                this.setState(function (state) {
                  return {
                    loadingMore: false,
                    resultsPage: state.resultsPage + 1
                  };
                });

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _onMoreSuggestionsFetchRequested() {
        return _onMoreSuggestionsFetchRequested2.apply(this, arguments);
      }

      return _onMoreSuggestionsFetchRequested;
    }()
  }, {
    key: "_onSuggestionsClearRequested",
    value: function _onSuggestionsClearRequested() {
      this.setState(function () {
        return {
          suggestions: [],
          resultsPage: 1,
          hasMoreResults: true
        };
      });
    }
  }, {
    key: "_setSuggestions",
    value: function _setSuggestions(suggestions) {
      this.setState(function (prevState, currentProps) {
        return {
          suggestions: suggestions.slice(0, currentProps.suggestionsLimit)
        };
      });
    }
  }, {
    key: "_appendSuggestions",
    value: function _appendSuggestions(suggestions) {
      this.setState(function (prevState, currentProps) {
        return {
          suggestions: prevState.suggestions.concat(suggestions).slice(0, currentProps.suggestionsLimit)
        };
      });
    }
  }, {
    key: "_onAutoSuggestionSelected",
    value: function _onAutoSuggestionSelected(e, opts) {
      if (e) {
        e.preventDefault();
      }

      this.props.onSuggestionSelect(opts.suggestion);
      this.setState(function () {
        return {
          value: '',
          focused: false
        };
      });
    }
  }, {
    key: "_onBrowseSuggestionSelected",
    value: function _onBrowseSuggestionSelected(item) {
      this._onAutoSuggestionSelected(null, {
        suggestion: item
      });
    }
  }, {
    key: "_renderAutoSuggestion",
    value: function _renderAutoSuggestion(suggestion, _ref6) {
      var query = _ref6.query;
      var _this$props4 = this.props,
          renderSuggestion = _this$props4.renderSuggestion,
          keyField = _this$props4.keyField,
          valueField = _this$props4.valueField,
          formatSuggestion = _this$props4.formatSuggestion;
      var suggestionText = typeof formatSuggestion === 'function' ? formatSuggestion(suggestion) : suggestion[valueField];

      var matches = _autosuggestHighlight["default"].match(suggestionText, query);

      var parts = _autosuggestHighlight["default"].parse(suggestionText, matches);

      return renderSuggestion({
        matches: matches,
        parts: parts,
        suggestion: suggestion,
        keyField: keyField,
        valueField: valueField
      });
    }
  }, {
    key: "_renderInput",
    value: function _renderInput(_ref7) {
      var ref = _ref7.ref,
          inputProps = _objectWithoutProperties(_ref7, ["ref"]);

      // capture the ref and provide it to a wrapper div
      // for when the autosuggest wants to trigger `focus` and such.
      return /*#__PURE__*/_react["default"].createElement("div", {
        ref: ref
      }, /*#__PURE__*/_react["default"].createElement(_encoreAdvertisingWeb.FormInputIcon, {
        iconLeading: /*#__PURE__*/_react["default"].createElement(_encoreAdvertisingWeb.IconSearch, null),
        iconTrailing: /*#__PURE__*/_react["default"].createElement(_encoreAdvertisingWeb.IconChevronDown, null)
      }, /*#__PURE__*/_react["default"].createElement(_encoreAdvertisingWeb.FormInput, inputProps)));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props5 = this.props,
          browseEnabled = _this$props5.browseEnabled,
          availableItems = _this$props5.availableItems,
          className = _this$props5.className,
          disabled = _this$props5.disabled,
          id = _this$props5.id,
          error = _this$props5.error;
      var _this$state = this.state,
          value = _this$state.value,
          placeholder = _this$state.placeholder,
          focused = _this$state.focused;
      var suggestions = this.state.suggestions;
      var inputProps = {
        className: "autosuggest__input ".concat(className),
        disabled: disabled,
        error: error,
        id: id,
        onBlur: this._onBlur,
        onChange: this._onChange,
        onFocus: this._onFocus,
        placeholder: placeholder,
        value: value,
        spellCheck: false,
        autoComplete: 'off',
        role: 'presentation'
      };
      var shouldBrowse = browseEnabled && focused && availableItems.length > 0;
      var hasTypeaheadValue = (value || '').trim().length > 0;
      var isExpanded = shouldBrowse || hasTypeaheadValue;

      if (shouldBrowse && !hasTypeaheadValue) {
        suggestions = availableItems;
      }

      return /*#__PURE__*/_react["default"].createElement(Container, {
        "aria-autocomplete": "list",
        "aria-controls": "browse-suggestions-list",
        "aria-expanded": isExpanded,
        role: "combobox",
        tabIndex: "0"
      }, /*#__PURE__*/_react["default"].createElement(_reactAutosuggest["default"], {
        spellcheck: "false",
        alwaysRenderSuggestions: shouldBrowse,
        focusInputOnSuggestionClick: false,
        getSuggestionValue: (0, _property2["default"])('name'),
        inputProps: inputProps,
        onSuggestionsClearRequested: this._onSuggestionsClearRequested,
        onSuggestionsFetchRequested: this._onSuggestionsFetchRequested,
        onSuggestionSelected: this._onAutoSuggestionSelected,
        renderInputComponent: this._renderInput,
        renderSuggestionsContainer: this._renderSuggestionsContainer,
        renderSuggestion: this._renderAutoSuggestion,
        suggestions: suggestions
      }));
    }
  }]);

  return Autosuggest;
}(_react.Component);
/* eslint-enable react/no-deprecated */


exports.Autosuggest = Autosuggest;
Autosuggest.propTypes = {
  availableItems: _propTypes["default"].array,
  browseEnabled: _propTypes["default"].bool.isRequired,
  className: _propTypes["default"].string,
  debounce: _propTypes["default"].func,
  debounced: _propTypes["default"].bool,
  disabled: _propTypes["default"].bool,
  error: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].bool]),
  exclude: _propTypes["default"].oneOfType([_propTypes["default"].array, _propTypes["default"].func]),
  existingValue: _propTypes["default"].array,
  formatSuggestion: _propTypes["default"].func,
  id: _propTypes["default"].string,
  keyField: _propTypes["default"].string.isRequired,
  onChange: _propTypes["default"].func,
  onFetchMore: _propTypes["default"].func,
  onSortSuggestions: _propTypes["default"].func,
  onSuggestionSelect: _propTypes["default"].func.isRequired,
  renderSuggestion: _propTypes["default"].func.isRequired,
  searchPlaceholder: _propTypes["default"].string.isRequired,
  selectPlaceholder: _propTypes["default"].string.isRequired,
  suggestionsLimit: _propTypes["default"].number,
  valueField: _propTypes["default"].string.isRequired,
  hasLazyLoading: _propTypes["default"].bool
};
Autosuggest.defaultProps = {
  browseEnabled: false,
  className: '',
  debounce: _debounce2["default"],
  debounced: false,
  exclude: [],
  onSortSuggestions: function onSortSuggestions(arr) {
    return arr;
  },
  formatSuggestion: undefined,
  suggestionsLimit: 5,
  hasLazyLoading: false
};
Autosuggest.debounceMs = 400;
var _default = Autosuggest;
exports["default"] = _default;