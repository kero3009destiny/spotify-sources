"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getEdgeHost = getEdgeHost;
exports.setEdgeHost = setEdgeHost;
exports.setApiHost = setApiHost;
exports.locationByCountrySearch = locationByCountrySearch;
exports.countrySearch = countrySearch;

var _adstudioWebgateFetch = require("@spotify-internal/adstudio-webgate-fetch");

var _service_pb = require("@spotify-internal/targetingservice/proto/com/spotify/targetingservice/proto/service_pb");

var _service_grpc_web_pb = require("@spotify-internal/targetingservice/proto/com/spotify/targetingservice/proto/service_grpc_web_pb");

var _geoLocationMapper = require("../../utils/geoLocationMapper");

var _utilities = require("../../utilities");

var _i18n = require("../../config/i18n");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * getters and setters for api host, to be set when the component initializes.
 */
var _edgeHost;

function getEdgeHost() {
  if (!_edgeHost) {
    throw new Error('edgeproxy host was not set!');
  }

  return _edgeHost;
}

function setEdgeHost(newEdgeHost) {
  _edgeHost = newEdgeHost;
} // eslint-disable-next-line @typescript-eslint/no-unused-vars


function setApiHost(_unused) {// This function is deprecated by remains for compatibility with callers. You should instead be calling setEdgeHost with the edge host.
}

function locationByCountrySearch(_x, _x2) {
  return _locationByCountrySearch.apply(this, arguments);
}

function _locationByCountrySearch() {
  _locationByCountrySearch = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(keyword, parentCountry) {
    var language,
        page,
        geoLocationSearchableTypes,
        limit,
        offset,
        targetingServiceClient,
        _args = arguments;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            language = _args.length > 2 && _args[2] !== undefined ? _args[2] : _i18n.DEFAULT_LANGUAGE;
            page = _args.length > 3 && _args[3] !== undefined ? _args[3] : 0;
            geoLocationSearchableTypes = _args.length > 4 && _args[4] !== undefined ? _args[4] : [_service_pb.GeoLocation.Type.REGION, _service_pb.GeoLocation.Type.CITY, _service_pb.GeoLocation.Type.DMA_REGION, _service_pb.GeoLocation.Type.POSTAL_CODE, _service_pb.GeoLocation.Type.COUNTY];
            limit = _args.length > 5 && _args[5] !== undefined ? _args[5] : 10;
            offset = page * limit;
            targetingServiceClient = new _service_grpc_web_pb.TargetingServiceClient(getEdgeHost());
            (0, _utilities.enableGrpcDevConsole)([targetingServiceClient]);
            _context.prev = 7;
            _context.next = 10;
            return new Promise(function (resolve, reject) {
              var geoRequest = new _service_pb.GeoLocationTargetingRequest();
              var filters = new _service_pb.GeoLocationTargetingFilters();
              var pagingAndSorting = new _service_pb.PagingAndSorting();
              var paging = new _service_pb.PagingParameters();
              var sorting = new _service_pb.Sorting();
              sorting.setField(_service_pb.Sorting.SortField.GEO_TYPE_SORT_ORDER);
              sorting.setDirection(_service_pb.SortDirection.Type.ASC);
              paging.setLimit(10);
              paging.setOffset(offset);
              pagingAndSorting.addSorting(sorting);
              pagingAndSorting.setParameters(paging);
              filters.setKeywordsList(keyword.split(' '));
              filters.addParentCountryIds(parentCountry);
              filters.setTypesList(geoLocationSearchableTypes);
              geoRequest.setPagingAndSorting(pagingAndSorting);
              geoRequest.setFilters(filters);
              geoRequest.setLanguage(language);
              var geoDeadline = new Date();
              geoDeadline.setSeconds(geoDeadline.getSeconds() + 60);
              (0, _adstudioWebgateFetch.getWebgateToken)().then(function (wgToken) {
                var metadata = {
                  deadline: geoDeadline,
                  Authorization: "Bearer ".concat(wgToken)
                };
                targetingServiceClient.getGeoLocationTargeting(geoRequest, metadata, function (err, response) {
                  if (response === null) {
                    reject(err);
                    return;
                  }

                  resolve(response.getResultsList().map(_geoLocationMapper.geoLocationToJson));
                });
              });
            });

          case 10:
            return _context.abrupt("return", _context.sent);

          case 13:
            _context.prev = 13;
            _context.t0 = _context["catch"](7);
            throw new Error(_context.t0.message);

          case 16:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[7, 13]]);
  }));
  return _locationByCountrySearch.apply(this, arguments);
}

function countrySearch(_x3) {
  return _countrySearch.apply(this, arguments);
}

function _countrySearch() {
  _countrySearch = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(keyword) {
    var language,
        targetingServiceClient,
        _args2 = arguments;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            language = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : _i18n.DEFAULT_LANGUAGE;
            targetingServiceClient = new _service_grpc_web_pb.TargetingServiceClient(getEdgeHost());
            (0, _utilities.enableGrpcDevConsole)([targetingServiceClient]);
            _context2.prev = 3;
            _context2.next = 6;
            return new Promise(function (resolve, reject) {
              var geoRequest = new _service_pb.GeoLocationTargetingRequest();
              var filters = new _service_pb.GeoLocationTargetingFilters();
              filters.setKeywordsList(keyword.split(' '));
              filters.addTypes(_service_pb.GeoLocation.Type.COUNTRY);
              geoRequest.setFilters(filters);
              geoRequest.setLanguage(language);
              var deadline = new Date();
              deadline.setSeconds(deadline.getSeconds() + 60);
              (0, _adstudioWebgateFetch.getWebgateToken)().then(function (wgToken) {
                var metadata = {
                  deadline: deadline,
                  Authorization: "Bearer ".concat(wgToken)
                };
                targetingServiceClient.getGeoLocationTargeting(geoRequest, metadata, function (err, response) {
                  if (response === null) {
                    reject(err);
                    return;
                  }

                  resolve(response.getResultsList().map(_geoLocationMapper.geoLocationToJson));
                });
              });
            });

          case 6:
            return _context2.abrupt("return", _context2.sent);

          case 9:
            _context2.prev = 9;
            _context2.t0 = _context2["catch"](3);
            throw new Error(_context2.t0.message);

          case 12:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[3, 9]]);
  }));
  return _countrySearch.apply(this, arguments);
}