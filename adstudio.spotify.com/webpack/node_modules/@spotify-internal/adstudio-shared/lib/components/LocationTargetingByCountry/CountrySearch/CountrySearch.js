"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CountryTargetingSearch = CountryTargetingSearch;
exports["default"] = exports.DEFAULT_STRINGS = void 0;

var _react = _interopRequireDefault(require("react"));

var _Autosuggest = _interopRequireDefault(require("../../Autosuggest"));

var _Suggestion = _interopRequireDefault(require("./Suggestion"));

var _Value = _interopRequireDefault(require("./Value"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _api = require("../api");

var _constants = require("../constants");

var _i18n = require("../../../config/i18n");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var CountrySearchWrapper = _styledComponents["default"].div.withConfig({
  displayName: "CountrySearch__CountrySearchWrapper",
  componentId: "sc-2rmpg7-0"
})([""]);

var DEFAULT_STRINGS = {
  COUNTRY_LABEL: _constants.COUNTRY_LABEL,
  COUNTRY_TOOLTIP_DESCRIPTION: _constants.COUNTRY_TOOLTIP_DESCRIPTION,
  COUNTRY_PLACEHOLDER: _constants.COUNTRY_PLACEHOLDER,
  COUNTRY_ERROR_MESSAGE: _constants.COUNTRY_ERROR_MESSAGE
};
exports.DEFAULT_STRINGS = DEFAULT_STRINGS;

function CountryTargetingSearch(_ref) {
  var disableCountry = _ref.disableCountry,
      handleRemoveCountry = _ref.handleRemoveCountry,
      className = _ref.className,
      fieldRenderProps = _ref.fieldRenderProps,
      onChange = _ref.onChange,
      _ref$language = _ref.language,
      language = _ref$language === void 0 ? _i18n.DEFAULT_LANGUAGE : _ref$language,
      props = _objectWithoutProperties(_ref, ["disableCountry", "handleRemoveCountry", "className", "fieldRenderProps", "onChange", "language"]);

  var strings = props.strings || DEFAULT_STRINGS;
  var keyField = props.keyField || _constants.KEY_FIELD;
  var excludeCountries = props.excludeCountries || [];
  return /*#__PURE__*/_react["default"].createElement(CountrySearchWrapper, {
    className: className
  }, /*#__PURE__*/_react["default"].createElement(_Autosuggest["default"], _extends({}, fieldRenderProps.input, {
    id: "country-autosuggest",
    keyField: keyField,
    debounced: true,
    inlineValue: true,
    exclude: function exclude(item) {
      return excludeCountries.includes(item.countryCode);
    },
    onInputChange: function onInputChange(query) {
      return (0, _api.countrySearch)(query, language);
    },
    placeholder: strings.COUNTRY_PLACEHOLDER,
    renderSuggestion: function renderSuggestion(suggestionProps) {
      return /*#__PURE__*/_react["default"].createElement(_Suggestion["default"], suggestionProps);
    },
    renderValue: function renderValue(props) {
      var disabled = props.disabled,
          _props$value = props.value,
          value = _props$value === void 0 ? [] : _props$value,
          handleRemove = props.handleRemove,
          keyField = props.keyField,
          valueField = props.valueField;
      var item = value[0] || {};
      return /*#__PURE__*/_react["default"].createElement(_Value["default"], {
        disabled: disabled || disableCountry,
        item: item,
        onClick: function onClick() {
          if (!disableCountry) {
            handleRemove(item);
            handleRemoveCountry();
          }
        },
        keyField: keyField,
        key: item[keyField],
        valueField: valueField
      });
    },
    suggestionsLimit: Infinity,
    onBlur: function onBlur(val) {
      onChange(val);
      fieldRenderProps.input.onBlur();
    }
  })));
}

CountryTargetingSearch.defaultProps = {
  excludeCountries: []
};
var _default = CountryTargetingSearch;
exports["default"] = _default;