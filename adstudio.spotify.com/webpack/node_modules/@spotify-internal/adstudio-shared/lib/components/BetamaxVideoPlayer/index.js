"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.downloadFile = void 0;

var _uniqueId2 = _interopRequireDefault(require("lodash/uniqueId"));

var _react = _interopRequireDefault(require("react"));

var _betamaxSdkDesktop = _interopRequireWildcard(require("@spotify-internal/betamax-sdk-desktop"));

var _adstudioTape = require("@spotify-internal/adstudio-tape");

var _adstudioWebgateFetch = require("@spotify-internal/adstudio-webgate-fetch");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var downloadFile = function downloadFile(name, src) {
  var anchor = document.createElement('a');
  anchor.download = name;
  anchor.href = src;
  anchor.target = '_blank';
  anchor.click();
}; // Polyfills for browser compatibility


exports.downloadFile = downloadFile;

_betamaxSdkDesktop["default"].polyfill.installAll();

var BetamaxVideoPlayer = /*#__PURE__*/function (_React$Component) {
  _inherits(BetamaxVideoPlayer, _React$Component);

  var _super = _createSuper(BetamaxVideoPlayer);

  function BetamaxVideoPlayer() {
    var _this;

    _classCallCheck(this, BetamaxVideoPlayer);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.player = void 0;
    _this.videoContainerClassName = (0, _uniqueId2["default"])('video-container');
    _this.containerElement = document.createElement('div');
    return _this;
  }

  _createClass(BetamaxVideoPlayer, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var playerFactory = new _betamaxSdkDesktop.BetamaxPlayerFactory({
        mediaExtensions: this.mediaExtensions
      });
      var playbackRequest = {
        mediaUrl: this.videoManifestUrl,
        isRoyaltyMedia: false,
        metadata: {}
      };
      var videoElementConfig = {
        controls: true
      };
      if (this.props.videoWidth) videoElementConfig.width = this.props.videoWidth;
      this.player = playerFactory.createBetamaxPlayer({
        videoElementConfig: videoElementConfig,
        subtitlesEnabled: false,
        getToken: function () {
          var _getToken = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
            var token;
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.prev = 0;
                    _context.next = 3;
                    return (0, _adstudioWebgateFetch.getWebgateToken)();

                  case 3:
                    token = _context.sent;
                    return _context.abrupt("return", "Bearer ".concat(token));

                  case 7:
                    _context.prev = 7;
                    _context.t0 = _context["catch"](0);
                    throw new Error('Problem retrieving webgate token');

                  case 10:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, null, [[0, 7]]);
          }));

          function getToken() {
            return _getToken.apply(this, arguments);
          }

          return getToken;
        }()
      });
      this.player.playWithOptions(playbackRequest, {
        playWhenReady: false,
        initialPosition: 0
      }).then(function () {
        var node = _this2.player && _this2.player.getNode();

        var videoContainer = document.querySelector(".".concat(_this2.videoContainerClassName));

        if (node && videoContainer) {
          videoContainer.appendChild(node);
        }
      })["catch"](function () {
        /* Pretend nothing happened */
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.player) this.player.stop();
    }
  }, {
    key: "prodMediaExtensionTemplate",
    get: function get() {
      return 'https://spclient.wg.spotify.com/director/v6/{type}/sources/{source_id}/options/supports_drm';
    }
  }, {
    key: "mediaExtensionTemplate",
    get: function get() {
      if (this.props.mediaExtensionTemplate) return this.props.mediaExtensionTemplate;
      return this.prodMediaExtensionTemplate;
    }
  }, {
    key: "videoManifestUrl",
    get: function get() {
      var _this$props = this.props,
          manifestId = _this$props.manifestId,
          externalUrl = _this$props.externalUrl;
      if (manifestId) return _betamaxSdkDesktop.SpotifyVideoUrl.create(this.props.manifestId);
      return externalUrl;
    }
  }, {
    key: "mediaExtensions",
    get: function get() {
      return [new _betamaxSdkDesktop.SpotifyVideoMediaExtension(this.mediaExtensionTemplate)];
    }
  }, {
    key: "ctaButtons",
    get: function get() {
      var _this3 = this;

      var buttons = [];
      if (this.props.shouldShowDownload) buttons.push({
        label: 'Download',
        onClick: function onClick() {
          downloadFile(name, _this3.props.srcUri);
        }
      });
      if (this.props.onClickDelete) buttons.push({
        label: 'Delete',
        onClick: this.props.onClickDelete
      });
      return buttons;
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/_react["default"].createElement(_adstudioTape.Panel, {
        border: false,
        ctaList: this.ctaButtons,
        ctaListStacked: true,
        shadow: true
      }, /*#__PURE__*/_react["default"].createElement("div", {
        className: this.videoContainerClassName
      }));
    }
  }]);

  return BetamaxVideoPlayer;
}(_react["default"].Component);

exports["default"] = BetamaxVideoPlayer;