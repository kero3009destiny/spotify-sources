"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AudienceEstimatesPanel = AudienceEstimatesPanel;

var _react = _interopRequireDefault(require("react"));

var _encoreAdvertisingWeb = require("@spotify-internal/encore-advertising-web");

var _FormatType = require("../../config/FormatType");

var _IntlFormatBigNumber = _interopRequireDefault(require("../IntlFormatBigNumber"));

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function AudienceEstimatesPanel(_ref) {
  var className = _ref.className,
      costModel = _ref.costModel,
      hasAudienceEstimateFetched = _ref.hasAudienceEstimateFetched,
      hasMetRequiredMinReach = _ref.hasMetRequiredMinReach,
      countryCode = _ref.countryCode,
      format = _ref.format,
      minAdsServed = _ref.minAdsServed,
      maxAdsServed = _ref.maxAdsServed,
      maxReach = _ref.maxReach,
      minReach = _ref.minReach,
      minFrequency = _ref.minFrequency,
      maxFrequency = _ref.maxFrequency,
      strings = _ref.strings;
  var isVideoFormat = format === _FormatType.Format.VIDEO;
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: className
  }, /*#__PURE__*/_react["default"].createElement(_encoreAdvertisingWeb.Box, {
    p: _encoreAdvertisingWeb.spacer16,
    pb: _encoreAdvertisingWeb.spacer24
  }, /*#__PURE__*/_react["default"].createElement(_encoreAdvertisingWeb.VStack, {
    gap: _encoreAdvertisingWeb.spacer16
  }, /*#__PURE__*/_react["default"].createElement(EstimateLocalized, {
    labelText: getEstimatedAdsServedLabel(),
    labelToolTip: getEstimatedAdsServedToolTipText(),
    value: /*#__PURE__*/_react["default"].createElement(RangeLocalized, {
      max: maxAdsServed,
      min: minAdsServed
    })
  }), /*#__PURE__*/_react["default"].createElement(EstimateLocalized, {
    labelText: strings.ESTIMATED_DAILY_REACH_LABEL,
    labelToolTip: strings.ESTIMATED_DAILY_REACH_TOOLTIP_TEXT,
    value: /*#__PURE__*/_react["default"].createElement(RangeLocalized, {
      max: maxReach,
      min: minReach
    })
  }), /*#__PURE__*/_react["default"].createElement(EstimateLocalized, {
    labelText: strings.ESTIMATED_FREQUENCY_LABEL,
    labelToolTip: strings.ESTIMATED_FREQUENCY_TOOLTIP_TEXT,
    value: /*#__PURE__*/_react["default"].createElement(RangeLocalized, {
      max: maxFrequency,
      min: !minFrequency || minFrequency < 1 ? 1 : minFrequency
    })
  }))));

  function EstimateLocalized(props) {
    return /*#__PURE__*/_react["default"].createElement(Estimate, _extends({}, props, {
      hasAudienceEstimateFetched: hasAudienceEstimateFetched,
      hasMetRequiredMinReach: hasMetRequiredMinReach,
      strings: strings
    }));
  }

  function RangeLocalized(props) {
    return /*#__PURE__*/_react["default"].createElement(Range, _extends({
      countryCode: countryCode,
      strings: strings
    }, props));
  }

  function getEstimatedAdsServedLabel() {
    if (costModel === _constants.stringConstants.PAID_LISTENS_MODEL && isVideoFormat) return strings.PAID_LISTENS_MODEL_ADS_VIEWED_LABEL;
    if (costModel === _constants.stringConstants.PAID_LISTENS_MODEL) return strings.PAID_LISTENS_MODEL_ADS_SERVED_LABEL;
    return strings.IMPRESSIONS_MODEL_ADS_SERVED_LABEL;
  }

  function getEstimatedAdsServedToolTipText() {
    if (costModel === _constants.stringConstants.PAID_LISTENS_MODEL && isVideoFormat) return strings.PAID_LISTENS_MODEL_ADS_VIEWED_TOOLTIP_TEXT;
    if (costModel === _constants.stringConstants.PAID_LISTENS_MODEL) return strings.PAID_LISTENS_MODEL_ADS_SERVED_TOOLTIP_TEXT;
    return strings.IMPRESSIONS_MODEL_ADS_SERVED_TOOLTIP_TEXT;
  }
}

;

function Estimate(_ref2) {
  var hasAudienceEstimateFetched = _ref2.hasAudienceEstimateFetched,
      hasMetRequiredMinReach = _ref2.hasMetRequiredMinReach,
      labelText = _ref2.labelText,
      labelToolTip = _ref2.labelToolTip,
      strings = _ref2.strings,
      value = _ref2.value;
  return /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(_encoreAdvertisingWeb.Type.p, {
    variant: _encoreAdvertisingWeb.Type.body3,
    weight: _encoreAdvertisingWeb.Type.bold,
    color: _encoreAdvertisingWeb.gray30,
    condensed: true,
    style: {
      marginBottom: _encoreAdvertisingWeb.spacer4
    }
  }, labelText, /*#__PURE__*/_react["default"].createElement(_encoreAdvertisingWeb.IconWithTooltip, {
    content: labelToolTip,
    withPortal: true,
    placement: _encoreAdvertisingWeb.IconWithTooltip.bottomLeft
  })), /*#__PURE__*/_react["default"].createElement(_encoreAdvertisingWeb.Type.p, {
    condensed: true,
    variant: _encoreAdvertisingWeb.Type.body2,
    color: _encoreAdvertisingWeb.gray50
  }, hasAudienceEstimateFetched && hasMetRequiredMinReach && value || hasAudienceEstimateFetched && !hasMetRequiredMinReach && strings.INSUFFICIENT_RANGE_TEXT || '-'));
}

function Range(_ref3) {
  var max = _ref3.max,
      min = _ref3.min,
      countryCode = _ref3.countryCode,
      strings = _ref3.strings;
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, min !== null && max !== null && /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_IntlFormatBigNumber["default"], {
    countryCode: countryCode,
    number: min
  }), ' - ', /*#__PURE__*/_react["default"].createElement(_IntlFormatBigNumber["default"], {
    countryCode: countryCode,
    number: max
  })), min !== null && max === null && /*#__PURE__*/_react["default"].createElement(_IntlFormatBigNumber["default"], {
    countryCode: countryCode,
    number: min,
    prefix: strings.GREATER_THAN_PREFIX
  }), min === null && max !== null && /*#__PURE__*/_react["default"].createElement(_IntlFormatBigNumber["default"], {
    countryCode: countryCode,
    number: min,
    prefix: strings.GREATER_THAN_PREFIX
  }), min === null && max === null && '-');
}