"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getGeoLabelFromSuggestion = getGeoLabelFromSuggestion;
exports.getMappedGeoType = void 0;

var _constants = require("./constants");

var getMappedGeoType = function getMappedGeoType(type) {
  var mappings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _constants.GEO_TYPES;
  return mappings[type] || type;
};

exports.getMappedGeoType = getMappedGeoType;

function getGeoLabelFromSuggestion(suggestion) {
  var name = suggestion.name,
      parentName = suggestion.parentName,
      _suggestion$countryCo = suggestion.countryCode,
      countryCode = _suggestion$countryCo === void 0 ? null : _suggestion$countryCo,
      type = suggestion.type,
      geoType = suggestion.geoType;

  if (type === _constants.POSTAL_CODE || geoType === _constants.POSTAL_CODE) {
    return "".concat(name, ": ").concat(parentName);
  }

  var locationNameParts = [name];

  if (parentName) {
    locationNameParts.push(parentName);
  }

  if ( // there is a countryCode on this suggestion
  countryCode && // and that country code is mapped to a string
  _constants.COUNTRIES[countryCode] && // and that string is not identical to the previous string (parent or self)
  _constants.COUNTRIES[countryCode] !== locationNameParts[locationNameParts.length - 1]) {
    locationNameParts.push(_constants.COUNTRIES[countryCode]);
  }

  return locationNameParts.join(', ');
}