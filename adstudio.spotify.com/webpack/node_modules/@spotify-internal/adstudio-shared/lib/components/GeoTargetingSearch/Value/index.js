"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.SelectedLocationsList = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utilities = require("../../../utilities");

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _encoreAdvertisingWeb = require("@spotify-internal/encore-advertising-web");

var _sortBy = _interopRequireDefault(require("lodash/sortBy"));

var _constants = require("../constants");

var _deprecatedGeoHelpers = require("../../../utils/deprecatedGeoHelpers");

var _DeprecatedGeosMessage = _interopRequireDefault(require("./DeprecatedGeosMessage"));

var _Item = _interopRequireDefault(require("./Item"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var populatedCss = (0, _styledComponents.css)(["margin-bottom:10px;overflow-y:auto;max-height:235px;"]);
var borderedCss = (0, _styledComponents.css)(["border-radius:", ";border:1px solid ", ";"], _encoreAdvertisingWeb.spacer4, _encoreAdvertisingWeb.gray70);

var Container = _styledComponents["default"].div.withConfig({
  displayName: "Value__Container",
  componentId: "sc-1b8fyyl-0"
})(["", " ", ""], function (props) {
  return props.populated ? populatedCss : '';
}, function (props) {
  return props.bordered ? borderedCss : '';
});

var LocationCounter = _styledComponents["default"].div.withConfig({
  displayName: "Value__LocationCounter",
  componentId: "sc-1b8fyyl-1"
})(["width:100%;display:grid;justify-items:end;"]);

var LOCATIONS_ENTERED = '[num]/[limit] location(s) entered';

var SelectedLocationsList = function SelectedLocationsList(_ref) {
  var bulkUploaderStrings = _ref.bulkUploaderStrings,
      deprecatedGeoStrings = _ref.deprecatedGeoStrings,
      disabled = _ref.disabled,
      deprecatedGeosFaqLink = _ref.deprecatedGeosFaqLink,
      handleDeprecatedGeos = _ref.handleDeprecatedGeos,
      items = _ref.items,
      onClick = _ref.onClick,
      limit = _ref.limit,
      strings = _ref.strings;
  var sortedLocationsByType = (0, _sortBy["default"])(items, function (loc) {
    var geoType = loc.type || loc.geoType;
    return _constants.LOCATION_SORT_ORDER[geoType];
  });
  var locKeys = (0, _utilities.arrayToObjectByField)(sortedLocationsByType || [], 'type');
  var num = items ? items.length : 0;
  var locationsEnteredText = (bulkUploaderStrings.LOCATION_COUNT_TEXT || LOCATIONS_ENTERED).replace(/\[num\]/, num).replace(/\[limit\]/, limit);
  var deprecatedCount = (0, _deprecatedGeoHelpers.countDeprecatedGeos)(items);

  var removeAllHandler = function removeAllHandler() {
    items.forEach(function (loc) {
      if ((0, _deprecatedGeoHelpers.isGeoDeprecated)(loc)) {
        window.setTimeout(function () {
          return onClick(loc);
        }, 10);
      }
    });
  };

  var itemStrings = _objectSpread({
    ARIA_REMOVE_THIS_LOCATION: deprecatedGeoStrings.ARIA_REMOVE_THIS_LOCATION,
    ARIA_REMOVE_THIS_UNAVAILABLE_LOCATION: deprecatedGeoStrings.ARIA_REMOVE_THIS_UNAVAILABLE_LOCATION
  }, strings);

  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(Container, {
    disabled: disabled,
    populated: sortedLocationsByType.length,
    bordered: sortedLocationsByType.length
  }, Object.keys(locKeys).map(function (key) {
    return /*#__PURE__*/_react["default"].createElement(_Item["default"], {
      disabled: disabled,
      handleDeprecatedGeos: handleDeprecatedGeos && deprecatedCount > 0,
      key: key,
      locations: locKeys[key],
      onClick: onClick,
      strings: itemStrings,
      type: key
    });
  })), handleDeprecatedGeos && deprecatedCount > 0 ? /*#__PURE__*/_react["default"].createElement(_DeprecatedGeosMessage["default"], {
    deprecatedCount: deprecatedCount,
    disabled: disabled,
    faqLink: deprecatedGeosFaqLink,
    removeAllHandler: removeAllHandler,
    strings: deprecatedGeoStrings
  }) : /*#__PURE__*/_react["default"].createElement(LocationCounter, null, /*#__PURE__*/_react["default"].createElement(_encoreAdvertisingWeb.Type.p, {
    color: disabled ? _encoreAdvertisingWeb.gray70 : _encoreAdvertisingWeb.gray60,
    variant: _encoreAdvertisingWeb.Type.body2
  }, locationsEnteredText)));
};

exports.SelectedLocationsList = SelectedLocationsList;
SelectedLocationsList.propTypes = {
  bulkUploaderStrings: _propTypes["default"].object,
  deprecatedGeoStrings: _propTypes["default"].object,
  disabled: _propTypes["default"].bool,
  deprecatedGeosFaqLink: _propTypes["default"].string,
  handleDeprecatedGeos: _propTypes["default"].bool,
  items: _propTypes["default"].array.isRequired,
  onClick: _propTypes["default"].func.isRequired,
  limit: _propTypes["default"].number.isRequired,
  strings: _propTypes["default"].object
};
SelectedLocationsList.defaultProps = {
  bulkUploaderStrings: {},
  deprecatedGeoStrings: {}
};
var _default = SelectedLocationsList;
exports["default"] = _default;