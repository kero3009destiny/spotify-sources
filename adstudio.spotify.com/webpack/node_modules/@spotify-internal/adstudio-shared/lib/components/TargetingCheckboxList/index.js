"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _adstudioWebgateFetch = require("@spotify-internal/adstudio-webgate-fetch");

var _constants = require("./constants");

var _InlineCheckboxList = _interopRequireDefault(require("../InlineCheckboxList"));

var _encoreAdvertisingWeb = require("@spotify-internal/encore-advertising-web");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var WEBGATE = 'webgate';

var TargetingCheckboxList = /*#__PURE__*/function (_Component) {
  _inherits(TargetingCheckboxList, _Component);

  var _super = _createSuper(TargetingCheckboxList);

  function TargetingCheckboxList() {
    var _this;

    _classCallCheck(this, TargetingCheckboxList);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      options: []
    };
    return _this;
  }

  _createClass(TargetingCheckboxList, [{
    key: "componentDidMount",
    value: function () {
      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var _this$props, fetchMethod, fetchUrl, podcastTooltipText, responseName, segmentNames, excludedOptions, response, items, options;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _this$props = this.props, fetchMethod = _this$props.fetchMethod, fetchUrl = _this$props.fetchUrl, podcastTooltipText = _this$props.podcastTooltipText, responseName = _this$props.responseName, segmentNames = _this$props.segmentNames, excludedOptions = _this$props.excludedOptions;
                _context.prev = 1;

                if (!(fetchMethod === WEBGATE)) {
                  _context.next = 8;
                  break;
                }

                _context.next = 5;
                return (0, _adstudioWebgateFetch.webgateFetch)(fetchUrl);

              case 5:
                response = _context.sent;
                _context.next = 11;
                break;

              case 8:
                _context.next = 10;
                return (0, _adstudioWebgateFetch.protoFetch)(fetchUrl);

              case 10:
                response = _context.sent;

              case 11:
                _context.next = 13;
                return response.json();

              case 13:
                response = _context.sent;
                items = response[responseName];

                if (responseName === 'segments') {
                  items = items.filter(function (item) {
                    return segmentNames[item.name] || _constants.RELEASED_SEGMENTS[item.name];
                  });
                }

                if (excludedOptions && excludedOptions.length) {
                  items = items.filter(function (item) {
                    return !excludedOptions.includes(item.name);
                  });
                }

                options = items.map(function (item) {
                  var segmentName = segmentNames[item.name] || _constants.RELEASED_SEGMENTS[item.name];
                  var value = segmentName; // Special tooltip for Podcasts

                  if (item.name.toLowerCase() === 'podcasts') {
                    value = /*#__PURE__*/_react["default"].createElement(_encoreAdvertisingWeb.Type, null, segmentName, " ", /*#__PURE__*/_react["default"].createElement(_encoreAdvertisingWeb.IconWithTooltip, {
                      content: podcastTooltipText
                    }));
                  }

                  return {
                    key: item.id,
                    value: value
                  };
                }); // Sort options alphabetically

                options.sort(function (item1, item2) {
                  var value1 = item1.value;
                  var value2 = item2.value; // If value is wrapped in a React node, pull it out to compare properly

                  if (typeof value1 !== 'string' && /*#__PURE__*/_react["default"].isValidElement(value1)) {
                    value1 = value1.props.children;
                  }

                  if (typeof value2 !== 'string' && /*#__PURE__*/_react["default"].isValidElement(value2)) {
                    value2 = value2.props.children;
                  }

                  if (value1 > value2) return 1;
                  if (value1 < value2) return -1;
                  return 0;
                });
                this.setState(function () {
                  return {
                    options: options
                  };
                });
                _context.next = 25;
                break;

              case 22:
                _context.prev = 22;
                _context.t0 = _context["catch"](1);
                throw new Error('Failed to fetch items', _context.t0.message);

              case 25:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[1, 22]]);
      }));

      function componentDidMount() {
        return _componentDidMount.apply(this, arguments);
      }

      return componentDidMount;
    }()
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          columns = _this$props2.columns,
          remainingProps = _objectWithoutProperties(_this$props2, ["columns"]);

      var options = this.state.options;
      return /*#__PURE__*/_react["default"].createElement(_InlineCheckboxList["default"], _extends({}, remainingProps, {
        columns: columns,
        items: options,
        showAll: false
      }));
    }
  }]);

  return TargetingCheckboxList;
}(_react.Component);

exports["default"] = TargetingCheckboxList;
TargetingCheckboxList.defaultProps = {
  minColumnWidth: '250px',
  podcastTooltipText: _constants.PODCAST_TOOLTIP_TEXT,
  segmentNames: _constants.RELEASED_SEGMENTS
};
TargetingCheckboxList.propTypes = {
  columns: _propTypes["default"].number,
  minColumnWidth: _propTypes["default"].string,
  fetchUrl: _propTypes["default"].string,
  fetchMethod: _propTypes["default"].oneOf([WEBGATE]),
  responseName: _propTypes["default"].string,
  podcastTooltipText: _propTypes["default"].string,
  segmentNames: _propTypes["default"].arrayOf(_propTypes["default"].string)
};