"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.handlers = exports.InlineCheckboxList = exports.ColumnWrapper = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _recompose = require("recompose");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _encoreAdvertisingWeb = require("@spotify-internal/encore-advertising-web");

var _utilities = require("../../utilities");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var ColumnWrapper = _styledComponents["default"].div.withConfig({
  displayName: "InlineCheckboxList__ColumnWrapper",
  componentId: "sc-1jgqgwy-0"
})(["display:grid;grid-template-columns:", ";", " ", ""], function (props) {
  var _props$columns, _props$minColumnWidth;

  return "repeat(".concat((_props$columns = props.columns) !== null && _props$columns !== void 0 ? _props$columns : 'auto-fit', ", minmax(").concat((_props$minColumnWidth = props.minColumnWidth) !== null && _props$minColumnWidth !== void 0 ? _props$minColumnWidth : 'auto', ", 1fr))");
}, function (props) {
  return props.columnGap && "grid-column-gap: ".concat(props.columnGap, ";");
}, function (props) {
  return props.rowGap && "grid-row-gap: ".concat(props.rowGap, ";");
});

exports.ColumnWrapper = ColumnWrapper;

var InlineCheckboxList = function InlineCheckboxList(_ref) {
  var className = _ref.className,
      columns = _ref.columns,
      minColumnWidth = _ref.minColumnWidth,
      columnGap = _ref.columnGap,
      rowGap = _ref.rowGap,
      disableOnAll = _ref.disableOnAll,
      name = _ref.name,
      value = _ref.value,
      items = _ref.items,
      onClick = _ref.onClick,
      onClickAll = _ref.onClickAll,
      showAll = _ref.showAll,
      showAllLabel = _ref.showAllLabel,
      id = _ref.id;
  return /*#__PURE__*/_react["default"].createElement(ColumnWrapper, {
    id: "ta-".concat(name, "-checkbox"),
    columns: columns,
    minColumnWidth: minColumnWidth,
    columnGap: columnGap,
    rowGap: rowGap
  }, showAll && /*#__PURE__*/_react["default"].createElement(_encoreAdvertisingWeb.FormCheckbox, {
    checked: value && items.map(function (i) {
      return i.key;
    }).every(function (k) {
      return value[k];
    }),
    className: className,
    id: id,
    name: name,
    onChange: onClickAll,
    type: "checkbox",
    value: "All",
    key: "All",
    disabled: items.some(function (_ref2) {
      var disabled = _ref2.disabled;
      return disabled;
    })
  }, ' ', showAllLabel), items.map(function (_ref3) {
    var key = _ref3.key,
        checkboxValue = _ref3.value,
        children = _ref3.children,
        optionProps = _objectWithoutProperties(_ref3, ["key", "value", "children"]);

    return /*#__PURE__*/_react["default"].createElement(_encoreAdvertisingWeb.FormCheckbox, _extends({
      checked: value && value[key],
      children: children,
      className: className,
      disabled: disableOnAll && value && items.map(function (i) {
        return i.key;
      }).every(function (pk) {
        return value[pk];
      }) || optionProps.disabled,
      id: "".concat(name, "-").concat(key),
      name: name,
      onChange: onClick,
      type: "checkbox",
      value: key,
      key: key
    }, optionProps), checkboxValue);
  }));
};

exports.InlineCheckboxList = InlineCheckboxList;
InlineCheckboxList.propTypes = {
  className: _propTypes["default"].string,
  columns: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),
  minColumnWidth: _propTypes["default"].string,
  columnGap: _propTypes["default"].string,
  rowGap: _propTypes["default"].string,
  disableOnAll: _propTypes["default"].bool,
  id: _propTypes["default"].string.isRequired,
  items: _propTypes["default"].shape(_propTypes["default"].arrayOf({
    key: _propTypes["default"].string,
    value: _propTypes["default"].string,
    children: _propTypes["default"].node,
    description: _propTypes["default"].string
  })).isRequired,
  name: _propTypes["default"].string.isRequired,
  onClick: _propTypes["default"].func.isRequired,
  onClickAll: _propTypes["default"].func.isRequired,
  showAll: _propTypes["default"].bool,
  showAllLabel: _propTypes["default"].string,
  value: _propTypes["default"].object
};
InlineCheckboxList.defaultProps = {
  showAll: true,
  showAllLabel: 'All',
  id: 'platform-all',
  name: 'platform'
};
var handlers = {
  onClickAll: function onClickAll(_ref4) {
    var onChange = _ref4.onChange,
        items = _ref4.items;
    return function (_ref5) {
      var checked = _ref5.target.checked;
      return onChange((0, _utilities.fillObject)(items.map(function (p) {
        return p.key;
      }), checked));
    };
  },
  onClick: function onClick(_ref6) {
    var onChange = _ref6.onChange,
        value = _ref6.value;
    return function (_ref7) {
      var _ref7$target = _ref7.target,
          key = _ref7$target.value,
          checked = _ref7$target.checked;
      return onChange(_objectSpread(_objectSpread({}, value), {}, _defineProperty({}, key, checked)));
    };
  }
};
exports.handlers = handlers;

var _default = (0, _recompose.compose)((0, _recompose.withHandlers)(handlers))(InlineCheckboxList);

exports["default"] = _default;