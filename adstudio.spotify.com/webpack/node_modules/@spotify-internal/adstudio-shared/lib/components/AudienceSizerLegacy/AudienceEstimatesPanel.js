"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.AudienceEstimatesPanel = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _adstudioTape = require("@spotify-internal/adstudio-tape");

var _Panel = require("@spotify-internal/adstudio-tape/lib/components/Panel");

var _encoreAdvertisingWeb = require("@spotify-internal/encore-advertising-web");

var _constants = require("./constants");

var _LabelledItem = _interopRequireDefault(require("./LabelledItem"));

var _IntlFormatBigNumber = _interopRequireDefault(require("../IntlFormatBigNumber"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var AudienceEstimateContainer = _styledComponents["default"].div.withConfig({
  displayName: "AudienceEstimatesPanel__AudienceEstimateContainer",
  componentId: "qgs5nx-0"
})(["margin-top:", ";"], _encoreAdvertisingWeb.spacer8);

var StyledPanel = (0, _styledComponents["default"])(_adstudioTape.Panel).withConfig({
  displayName: "AudienceEstimatesPanel__StyledPanel",
  componentId: "qgs5nx-1"
})(["&&{border-color:", ";background:", ";flex-grow:1;flex-shrink:1;}", "{flex-direction:column;align-items:unset;}"], _encoreAdvertisingWeb.gray90, _encoreAdvertisingWeb.white, _Panel.PanelContent);

function getEstimatedAdsServedLabel(costModel) {
  var isVideoFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var strings = arguments.length > 2 ? arguments[2] : undefined;

  if (costModel === _constants.PAID_LISTENS_MODEL && isVideoFormat) {
    return strings.PAID_LISTENS_MODEL_ADS_VIEWED_LABEL;
  }

  if (costModel === _constants.PAID_LISTENS_MODEL) {
    return strings.PAID_LISTENS_MODEL_ADS_SERVED_LABEL;
  }

  return strings.IMPRESSIONS_MODEL_ADS_SERVED_LABEL;
}

function getEstimatedAdsServedToolTipText(costModel) {
  var isVideoFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var strings = arguments.length > 2 ? arguments[2] : undefined;

  if (costModel === _constants.PAID_LISTENS_MODEL && isVideoFormat) {
    return strings.PAID_LISTENS_MODEL_ADS_VIEWED_TOOLTIP_TEXT;
  }

  if (costModel === _constants.PAID_LISTENS_MODEL) {
    return strings.PAID_LISTENS_MODEL_ADS_SERVED_TOOLTIP_TEXT;
  }

  return strings.IMPRESSIONS_MODEL_ADS_SERVED_TOOLTIP_TEXT;
}

var AudienceEstimatesPanel = function AudienceEstimatesPanel(_ref) {
  var costModel = _ref.costModel,
      hasAudienceEstimateFetched = _ref.hasAudienceEstimateFetched,
      minAdsServed = _ref.minAdsServed,
      maxAdsServed = _ref.maxAdsServed,
      maxReach = _ref.maxReach,
      minReach = _ref.minReach,
      _ref$hasMetRequiredMi = _ref.hasMetRequiredMinReach,
      hasMetRequiredMinReach = _ref$hasMetRequiredMi === void 0 ? true : _ref$hasMetRequiredMi,
      countryCode = _ref.countryCode,
      minFrequency = _ref.minFrequency,
      maxFrequency = _ref.maxFrequency,
      strings = _ref.strings,
      isVideoFormat = _ref.isVideoFormat,
      props = _objectWithoutProperties(_ref, ["costModel", "hasAudienceEstimateFetched", "minAdsServed", "maxAdsServed", "maxReach", "minReach", "hasMetRequiredMinReach", "countryCode", "minFrequency", "maxFrequency", "strings", "isVideoFormat"]);

  function getRange(max, min, countryCode) {
    var isFreqRange = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

    if (!min && !max) {
      return null;
    }

    if (isFreqRange && (!min || min < 1)) {
      // eslint-disable-next-line
      min = 1;
    }

    if (!min) {
      return /*#__PURE__*/_react["default"].createElement(_IntlFormatBigNumber["default"], {
        countryCode: countryCode,
        number: max,
        prefix: strings.LESS_THAN_PREFIX
      });
    }

    if (!max) {
      return /*#__PURE__*/_react["default"].createElement(_IntlFormatBigNumber["default"], {
        countryCode: countryCode,
        number: min,
        prefix: strings.GREATER_THAN_PREFIX
      });
    }

    return /*#__PURE__*/_react["default"].createElement(_react.Fragment, null, /*#__PURE__*/_react["default"].createElement(_IntlFormatBigNumber["default"], {
      countryCode: countryCode,
      number: min
    }), ' - ', /*#__PURE__*/_react["default"].createElement(_IntlFormatBigNumber["default"], {
      countryCode: countryCode,
      number: max
    }));
  }

  var adsServedRange = hasAudienceEstimateFetched && getRange(maxAdsServed, minAdsServed, countryCode);
  var reachRange = hasAudienceEstimateFetched && getRange(maxReach, minReach, countryCode);
  var frequencyRange = hasAudienceEstimateFetched && getRange(maxFrequency, minFrequency, countryCode, true);

  if (!hasMetRequiredMinReach) {
    adsServedRange = null;
    reachRange = null;
    frequencyRange = null;
  }

  var placeholder = '-';

  if (!hasMetRequiredMinReach && hasAudienceEstimateFetched) {
    placeholder = strings.INSUFFICIENT_RANGE_TEXT;
  }

  return /*#__PURE__*/_react["default"].createElement(AudienceEstimateContainer, null, /*#__PURE__*/_react["default"].createElement(StyledPanel, props, /*#__PURE__*/_react["default"].createElement(_LabelledItem["default"], {
    labelText: getEstimatedAdsServedLabel(costModel, isVideoFormat, strings),
    labelTooltip: getEstimatedAdsServedToolTipText(costModel, isVideoFormat, strings),
    placeholder: placeholder
  }, adsServedRange), /*#__PURE__*/_react["default"].createElement(_LabelledItem["default"], {
    labelText: strings.ESTIMATED_DAILY_REACH_LABEL,
    labelTooltip: strings.ESTIMATED_DAILY_REACH_TOOLTIP_TEXT,
    placeholder: placeholder
  }, reachRange), /*#__PURE__*/_react["default"].createElement(_LabelledItem["default"], {
    labelText: strings.ESTIMATED_FREQUENCY_LABEL,
    labelTooltip: strings.ESTIMATED_FREQUENCY_TOOLTIP_TEXT,
    placeholder: placeholder
  }, frequencyRange)));
};

exports.AudienceEstimatesPanel = AudienceEstimatesPanel;
AudienceEstimatesPanel.propTypes = {
  costModel: _propTypes["default"].oneOf([_constants.IMPRESSIONS_MODEL, _constants.PAID_LISTENS_MODEL]),
  countryCode: _propTypes["default"].string,
  hasAudienceEstimateFetched: _propTypes["default"].bool,
  maxAdsServed: _propTypes["default"].number,
  maxReach: _propTypes["default"].number,
  minAdsServed: _propTypes["default"].number,
  minReach: _propTypes["default"].number,
  hasMetRequiredMinReach: _propTypes["default"].bool,
  minFrequency: _propTypes["default"].number,
  maxFrequency: _propTypes["default"].number,
  isVideoFormat: _propTypes["default"].bool,
  strings: _propTypes["default"].shape({
    IMPRESSIONS_MODEL_ADS_SERVED_LABEL: _propTypes["default"].string,
    PAID_LISTENS_MODEL_ADS_SERVED_LABEL: _propTypes["default"].string,
    ESTIMATED_DAILY_REACH_LABEL: _propTypes["default"].string,
    PAID_LISTENS_MODEL_ADS_SERVED_TOOLTIP_TEXT: _propTypes["default"].string,
    IMPRESSIONS_MODEL_ADS_SERVED_TOOLTIP_TEXT: _propTypes["default"].string,
    ESTIMATED_DAILY_REACH_TOOLTIP_TEXT: _propTypes["default"].string,
    GREATER_THAN_PREFIX: _propTypes["default"].string,
    LESS_THAN_PREFIX: _propTypes["default"].string,
    INSUFFICIENT_RANGE_TEXT: _propTypes["default"].string,
    ESTIMATED_FREQUENCY_LABEL: _propTypes["default"].string,
    ESTIMATED_FREQUENCY_TOOLTIP_TEXT: _propTypes["default"].string,
    PAID_LISTENS_MODEL_ADS_VIEWED_LABEL: _propTypes["default"].string,
    PAID_LISTENS_MODEL_ADS_VIEWED_TOOLTIP_TEXT: _propTypes["default"].string
  })
};
AudienceEstimatesPanel.defaultProps = {
  strings: {
    IMPRESSIONS_MODEL_ADS_SERVED_LABEL: _constants.IMPRESSIONS_MODEL_ADS_SERVED_LABEL,
    PAID_LISTENS_MODEL_ADS_SERVED_LABEL: _constants.PAID_LISTENS_MODEL_ADS_SERVED_LABEL,
    ESTIMATED_DAILY_REACH_LABEL: _constants.ESTIMATED_DAILY_REACH_LABEL,
    PAID_LISTENS_MODEL_ADS_SERVED_TOOLTIP_TEXT: _constants.PAID_LISTENS_MODEL_ADS_SERVED_TOOLTIP_TEXT,
    IMPRESSIONS_MODEL_ADS_SERVED_TOOLTIP_TEXT: _constants.IMPRESSIONS_MODEL_ADS_SERVED_TOOLTIP_TEXT,
    ESTIMATED_DAILY_REACH_TOOLTIP_TEXT: _constants.ESTIMATED_DAILY_REACH_TOOLTIP_TEXT,
    GREATER_THAN_PREFIX: _constants.GREATER_THAN_PREFIX,
    LESS_THAN_PREFIX: _constants.LESS_THAN_PREFIX,
    INSUFFICIENT_RANGE_TEXT: _constants.INSUFFICIENT_RANGE_TEXT,
    ESTIMATED_FREQUENCY_LABEL: _constants.ESTIMATED_FREQUENCY_LABEL,
    ESTIMATED_FREQUENCY_TOOLTIP_TEXT: _constants.ESTIMATED_FREQUENCY_TOOLTIP_TEXT,
    PAID_LISTENS_MODEL_ADS_VIEWED_LABEL: _constants.PAID_LISTENS_MODEL_ADS_VIEWED_LABEL,
    PAID_LISTENS_MODEL_ADS_VIEWED_TOOLTIP_TEXT: _constants.PAID_LISTENS_MODEL_ADS_VIEWED_TOOLTIP_TEXT
  }
};
var _default = AudienceEstimatesPanel;
exports["default"] = _default;