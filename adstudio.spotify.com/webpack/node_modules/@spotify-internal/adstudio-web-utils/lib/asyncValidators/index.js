"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asyncValidateAssets = asyncValidateAssets;
exports.validAudioFileType = validAudioFileType;
exports.validImageFileType = validImageFileType;
exports.validVideoFileType = validVideoFileType;
exports.validateFieldValue = validateFieldValue;
exports.checkCoverImageDimensions = checkCoverImageDimensions;
exports.getAudioDuration = getAudioDuration;
exports.checkAudioDuration = checkAudioDuration;
exports.checkVideoForAudio = checkVideoForAudio;
exports.checkVideoDimensionsAndDuration = checkVideoDimensionsAndDuration;
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = require("lodash");

var _uploads = require("../utils/uploads");

var _createAd = require("../constants/createAd");

var _revise = require("../constants/revise");

var _adminEditForm = require("../constants/adminEditForm");

var _errorHelpers = require("./errorHelpers");

/*
  asyncValidator()
  Description: Takes an object with the keys-values of the createAd redux form,
  and returns a Promise indicating whether the the inputs of the corresponding fields are
  valid (resolved) or failed (rejected).

  See redux-form docs: https://redux-form.com/7.0.4/examples/asyncvalidation/
*/
function asyncValidateAssets(values, dispatch, props, blurredField) {
  var existingErrors = props.asyncErrors;
  var value = (0, _lodash.get)(values, blurredField);
  return validateFieldValue(blurredField, value, existingErrors, values, props).then(function () {
    var updatedErrors = (0, _lodash.omit)(existingErrors, [blurredField]);
    var hasErrors = !(0, _lodash.isEmpty)(updatedErrors); // if errors on other fields still exist, return the error object

    if (hasErrors) {
      return Promise.reject(updatedErrors);
    }

    return Promise.resolve();
  });
}

function validAudioFileType(field, value, existingErrors) {
  // ignore empty files
  if (!value) {
    return;
  }

  var isAudioTypeValid = _createAd.CLIENT_AUDIO_TYPES.includes(value.type);

  if (!isAudioTypeValid) {
    throw (0, _errorHelpers.buildErrorObject)(field, existingErrors, 'Invalid file extension. Please upload a OGG, MP3, or WAV.');
  }
}

function validImageFileType(field, value, existingErrors) {
  // ignore empty files
  if (!value) {
    return;
  }

  var isImageTypeValid = _createAd.CLIENT_IMAGE_TYPES.includes(value.type);

  if (!isImageTypeValid) {
    throw (0, _errorHelpers.buildErrorObject)(field, existingErrors, 'Invalid file extension. Please upload a JPG or PNG.');
  }
}

function validVideoFileType(field, value, existingErrors) {
  // ignore empty files
  if (!value) {
    return;
  }

  var isVideoTypeValid = _createAd.CLIENT_VIDEO_TYPES.includes(value.type);

  if (!isVideoTypeValid) {
    throw (0, _errorHelpers.buildErrorObject)(field, existingErrors, 'Invalid file extension. Please upload a MP4 or MOV.');
  }
}

function validateFieldValue(_x, _x2, _x3, _x4, _x5) {
  return _validateFieldValue.apply(this, arguments);
} // existingErrors: add new errors to existing errors object to reject entire errors object when field is invalid


function _validateFieldValue() {
  _validateFieldValue = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(field, value, existingErrors, values, props) {
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.t0 = field;
            _context.next = _context.t0 === _createAd.FORM_NAMES.IMAGE_UPLOADER ? 3 : _context.t0 === _adminEditForm.ADMIN_FORM_NAMES.CREATIVE_COMPANION_UPLOADER ? 3 : _context.t0 === _adminEditForm.ADMIN_FORM_NAMES.BANNER_UPLOADER ? 3 : _context.t0 === _createAd.FORM_NAMES.NEW_VOICEOVER_BGMUSIC_UPLOADER ? 13 : _context.t0 === _revise.REVISE_FORM_NAMES.REVISE_BG_MUSIC_UPLOADER ? 13 : _context.t0 === _createAd.FORM_NAMES.AUDIO_UPLOADER ? 14 : _context.t0 === _adminEditForm.ADMIN_FORM_NAMES.CREATIVE_AUDIO_UPLOADER ? 14 : _context.t0 === _adminEditForm.ADMIN_FORM_NAMES.FULLMIX_UPLOADER ? 14 : _context.t0 === _adminEditForm.ADMIN_FORM_NAMES.CREATIVE_VIDEO_UPLOADER ? 24 : _context.t0 === _createAd.FORM_NAMES.VIDEO_UPLOADER ? 24 : 34;
            break;

          case 3:
            _context.prev = 3;
            validImageFileType(field, value, existingErrors);
            _context.next = 7;
            return checkCoverImageDimensions(field, value, existingErrors);

          case 7:
            _context.next = 12;
            break;

          case 9:
            _context.prev = 9;
            _context.t1 = _context["catch"](3);
            return _context.abrupt("return", Promise.reject(_context.t1));

          case 12:
            return _context.abrupt("break", 35);

          case 13:
            return _context.abrupt("return", validAudioFileType(field, value, existingErrors));

          case 14:
            _context.prev = 14;
            validAudioFileType(field, value, existingErrors);
            _context.next = 18;
            return checkAudioDuration(field, value, existingErrors);

          case 18:
            _context.next = 23;
            break;

          case 20:
            _context.prev = 20;
            _context.t2 = _context["catch"](14);
            return _context.abrupt("return", Promise.reject(_context.t2));

          case 23:
            return _context.abrupt("break", 35);

          case 24:
            _context.prev = 24;
            validVideoFileType(field, value, existingErrors);
            _context.next = 28;
            return checkVideoDimensionsAndDuration(field, value, existingErrors, props.selectedAspectRatio);

          case 28:
            _context.next = 33;
            break;

          case 30:
            _context.prev = 30;
            _context.t3 = _context["catch"](24);
            return _context.abrupt("return", Promise.reject(_context.t3));

          case 33:
            return _context.abrupt("break", 35);

          case 34:
            return _context.abrupt("break", 35);

          case 35:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[3, 9], [14, 20], [24, 30]]);
  }));
  return _validateFieldValue.apply(this, arguments);
}

function checkCoverImageDimensions(field, imageFileValue, existingErrors) {
  return new Promise(function (resolve, reject) {
    (0, _uploads.getDataUri)(imageFileValue).then(function (uri) {
      return (0, _uploads.getImageFromUri)(uri);
    }).then(function (img) {
      if (img.naturalWidth !== img.naturalHeight || img.naturalWidth < _createAd.COVER_ART_IMAGE_DIMENSIONS.width) {
        var errorMsg = "Your image is ".concat(img.naturalWidth, "x").concat(img.naturalHeight, " pixels. Please upload a square image that is at least ").concat(_createAd.COVER_ART_IMAGE_DIMENSIONS.width, "x").concat(_createAd.COVER_ART_IMAGE_DIMENSIONS.height, " pixels.");
        reject((0, _errorHelpers.buildErrorObject)(field, existingErrors, errorMsg));
      }

      if (img.naturalWidth > _createAd.MAX_COVER_ART_IMAGE_DIMENTIONS.width) {
        var _errorMsg = "Your image is ".concat(img.naturalWidth, "x").concat(img.naturalHeight, " pixels. Please upload a square image that is smaller than ").concat(_createAd.MAX_COVER_ART_IMAGE_DIMENTIONS.width, "x").concat(_createAd.MAX_COVER_ART_IMAGE_DIMENTIONS.height, " pixels.");

        reject((0, _errorHelpers.buildErrorObject)(field, existingErrors, _errorMsg));
      }

      resolve();
    })["catch"](function (_) {
      return reject((0, _errorHelpers.buildErrorObject)(field, existingErrors, (0, _errorHelpers.getGenericErrorMessage)('image')));
    });
  });
}

function getAudioDuration(audioFileValue) {
  return new Promise(function (resolve, reject) {
    (0, _uploads.getDataUri)(audioFileValue).then(function (uri) {
      return (0, _uploads.getAudioFromUri)(uri);
    }).then(function (audio) {
      return resolve(audio.duration);
    })["catch"](function (e) {
      return reject(e);
    });
  });
}

function checkAudioDuration(_x6, _x7, _x8) {
  return _checkAudioDuration.apply(this, arguments);
}

function _checkAudioDuration() {
  _checkAudioDuration = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(field, audioFileValue, existingErrors) {
    var audioDuration, _getDurationRange, _getDurationRange2, maxAudioDuration, _errorMsg5, isDurationValid, errorMsg;

    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _getDurationRange = (0, _errorHelpers.getDurationRange)(), _getDurationRange2 = (0, _slicedToArray2["default"])(_getDurationRange, 2), maxAudioDuration = _getDurationRange2[1];
            _context2.prev = 1;
            _context2.next = 4;
            return getAudioDuration(audioFileValue);

          case 4:
            audioDuration = _context2.sent;
            _context2.next = 11;
            break;

          case 7:
            _context2.prev = 7;
            _context2.t0 = _context2["catch"](1);
            _errorMsg5 = (0, _errorHelpers.getGenericErrorMessage)('audio');
            throw (0, _errorHelpers.buildErrorObject)(field, existingErrors, _errorMsg5);

          case 11:
            isDurationValid = audioDuration < maxAudioDuration;

            if (!isDurationValid) {
              _context2.next = 14;
              break;
            }

            return _context2.abrupt("return", Promise.resolve());

          case 14:
            errorMsg = (0, _errorHelpers.getDurationErrorMessage)(maxAudioDuration, audioDuration);
            throw (0, _errorHelpers.buildErrorObject)(field, existingErrors, errorMsg);

          case 16:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[1, 7]]);
  }));
  return _checkAudioDuration.apply(this, arguments);
}

function checkVideoForAudio(video) {
  return video.mozHasAudio || Boolean(video.webkitAudioDecodedByteCount) || Boolean(video.audioTracks && video.audioTracks.length);
}

function checkVideoDimensionsAndDuration(field, videoFileValue, existingErrors, selectedAspectRatio) {
  return new Promise(function (resolve, reject) {
    if (videoFileValue.size > _createAd.MAX_VIDEO_FILE_SIZE) {
      var errorMsg = "Your video is larger than 500 MB. Please upload a smaller video.";
      return reject((0, _errorHelpers.buildErrorObject)(field, existingErrors, errorMsg));
    }

    (0, _uploads.getHTMLVideoElement)(videoFileValue).then(function (video) {
      var videoWidth = video.videoWidth,
          videoHeight = video.videoHeight,
          duration = video.duration;
      var actualAspectRatio = (0, _uploads.parseFloatFromDimensions)(videoWidth, videoHeight);
      var hasAcceptedAspectRatio = selectedAspectRatio === actualAspectRatio;
      var isLandscape = selectedAspectRatio === _createAd.LANDSCAPE_VIDEO_ASPECT_RATIO;

      var _ref = isLandscape ? [_createAd.MIN_LANDSCAPE_VIDEO_WIDTH, _createAd.MIN_LANDSCAPE_VIDEO_HEIGHT] : [_createAd.MIN_PORTRAIT_VIDEO_WIDTH, _createAd.MIN_PORTRAIT_VIDEO_HEIGHT],
          _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
          minVideoWidth = _ref2[0],
          minVideoHeight = _ref2[1];

      if (!hasAcceptedAspectRatio) {
        var _errorMsg2 = (0, _errorHelpers.getVideoAspectRatioErrorMessage)(videoWidth, videoHeight, isLandscape);

        return reject((0, _errorHelpers.buildErrorObject)(field, existingErrors, _errorMsg2));
      }

      if (videoHeight < minVideoHeight || videoWidth < minVideoWidth) {
        var _errorMsg3 = (0, _errorHelpers.getVideoMinWidthHeightErrorMessage)(videoWidth, videoHeight, isLandscape);

        return reject((0, _errorHelpers.buildErrorObject)(field, existingErrors, _errorMsg3));
      }

      if (duration > _createAd.MAX_VIDEO_DURATION || duration < _createAd.MIN_VIDEO_DURATION) {
        var _errorMsg4 = "Your video is ".concat(Math.round(duration), " seconds long. Please upload a file equal to or under ").concat(_createAd.MAX_VIDEO_DURATION, " seconds.");

        return reject((0, _errorHelpers.buildErrorObject)(field, existingErrors, _errorMsg4));
      }

      video.play().then(function () {
        video.muted = true;
        video.pause();
        setTimeout(function () {
          var hasAudio = checkVideoForAudio(video);

          if (!hasAudio) {
            return reject((0, _errorHelpers.buildErrorObject)(field, existingErrors, 'Your video must contain audio.'));
          }

          resolve();
        }, 300);
      });
    })["catch"](function (err) {
      if (err && err.message && err.message.includes('no supported streams')) {
        return reject((0, _errorHelpers.buildErrorObject)(field, err, 'Your video cannot be processed, please try uploading a different one. (Recommended codecs: H.264 video, AAC or MP3 audio)'));
      }

      return reject((0, _errorHelpers.buildErrorObject)(field, err, 'Your video cannot be processed, please try uploading a different one.'));
    });
  });
}

var asyncValidators = {
  checkCoverImageDimensions: checkCoverImageDimensions,
  checkAudioDuration: checkAudioDuration,
  validateFieldValue: validateFieldValue,
  validImageFileType: validImageFileType,
  validAudioFileType: validAudioFileType
};
var _default = asyncValidators;
exports["default"] = _default;
//# sourceMappingURL=index.js.map