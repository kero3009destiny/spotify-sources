"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fileTypesToString = fileTypesToString;
exports.getDataUri = getDataUri;
exports.getImageFromUri = getImageFromUri;
exports.getAudioFromUri = getAudioFromUri;
exports.getHTMLVideoElement = getHTMLVideoElement;
exports.parseFloatFromDimensions = void 0;

var createHTMLVideoElement = function createHTMLVideoElement(fileUrl) {
  return new Promise(function (resolve, reject) {
    var video = document.createElement('video');
    video.addEventListener('loadedmetadata', function () {
      return resolve(video);
    });
    video.addEventListener('error', function (error) {
      if (error.target instanceof HTMLVideoElement && error.target.error) {
        reject(error.target.error);
        return;
      }

      reject(error);
    });
    video.src = fileUrl;
  });
};

function fileTypesToString(types) {
  var values = Object.values(types);
  var allButLast = values.slice(0, values.length - 1);
  var last = values.slice(-1);

  if (allButLast.length !== 0) {
    return "".concat(allButLast.join(', '), " or ").concat(last);
  }

  return "".concat(last);
}

function getDataUri(file) {
  return new Promise(function (resolve, reject) {
    var fileReader = new FileReader();
    fileReader.addEventListener('load', function () {
      resolve(fileReader.result);
    });
    fileReader.addEventListener('error', function (err) {
      reject(err);
    });
    fileReader.readAsDataURL(file);
  });
} // Refactor this to be more generic with it's elements


function getImageFromUri(uri) {
  return new Promise(function (resolve, reject) {
    var img = new Image();

    img.onload = function () {
      resolve(img);
    };

    img.onerror = function (err) {
      reject(err);
    };

    img.src = uri;
  });
}

function getAudioFromUri(uri) {
  return new Promise(function (resolve, reject) {
    var audio = new Audio();

    audio.oncanplaythrough = function () {
      resolve(audio);
    };

    audio.onerror = function (err) {
      reject(err);
    };

    audio.src = uri;
  });
}

function getHTMLVideoElement(file) {
  return new Promise(function (resolve, reject) {
    var fileUrl = window.URL.createObjectURL(file);
    createHTMLVideoElement(fileUrl).then(function (video) {
      return resolve(video);
    })["catch"](function (err) {
      return reject(err);
    });
  });
}

var DEFAULT_FLOAT_PRECISION = 4;

var parseFloatFromDimensions = function parseFloatFromDimensions(x, y) {
  var precision = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_FLOAT_PRECISION;
  return (// if precision is 0, do nothing
    parseFloat((x / y).toPrecision(precision || undefined))
  );
};

exports.parseFloatFromDimensions = parseFloatFromDimensions;
//# sourceMappingURL=uploads.js.map