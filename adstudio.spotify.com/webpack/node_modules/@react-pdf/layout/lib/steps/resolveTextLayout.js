"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports.default = void 0;

var R = _interopRequireWildcard(require("ramda"));

var P = _interopRequireWildcard(require("@react-pdf/primitives"));

var _layoutText = _interopRequireDefault(require("../text/layoutText"));

var isType = R.propEq('type');
var isSvg = isType(P.Svg);
var isText = isType(P.Text);
var isNotSvg = R.complement(isSvg);
var isNotText = R.complement(isText);

var shouldIterate = function shouldIterate(node) {
  return isNotSvg(node) && isNotText(node);
};

var shouldLayoutText = function shouldLayoutText(node) {
  return isText(node) && !node.lines;
};
/**
 * Performs text layout on text node if wasn't calculated before.
 * Text layout is usually performed on Yoga's layout process (via setMeasureFunc),
 * but we need to layout those nodes with fixed width and height.
 *
 * @param {Object} node
 * @returns {Object} layout node
 */


var resolveTextLayout = function resolveTextLayout(node, fontStore) {
  var mapChild = function mapChild(child) {
    return resolveTextLayout(child, fontStore);
  };

  return R.compose(R.evolve({
    children: R.map(R.when(shouldIterate, mapChild))
  }), R.when(shouldLayoutText, R.compose(R.converge(R.assoc('lines'), [R.converge(_layoutText.default, [R.identity, R.path(['box', 'width']), R.path(['box', 'height']), R.always(fontStore)]), R.identity]))))(node);
};

var _default = resolveTextLayout;
exports.default = _default;