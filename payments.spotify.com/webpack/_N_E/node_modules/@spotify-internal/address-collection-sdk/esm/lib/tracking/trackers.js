import { createAddressCollectionView } from '@spotify-internal/event-definitions/es5/events/createAddressCollectionView';
import { createAddressCollectionError } from '@spotify-internal/event-definitions/es5/events/createAddressCollectionError';
import { createAddressCollectionSuccess } from '@spotify-internal/event-definitions/es5/events/createAddressCollectionSuccess';
import { createAddressCollectionSaveIntent } from '@spotify-internal/event-definitions/es5/events/createAddressCollectionSaveIntent';
import { createAddressCollectionConfirmIntent } from '@spotify-internal/event-definitions/es5/events/createAddressCollectionConfirmIntent';
import { createAddressCollectionSwitchForm } from '@spotify-internal/event-definitions/es5/events/createAddressCollectionSwitchForm';
import { Environment } from '../../api/environment';
import uuid from 'uuid-random';
import { trackGabito } from '../../api/dataTracking';
let addressCollectionViewId = null;
let environment = Environment.PRODUCTION;
let context = undefined;
export const initializeAddressCollectionViewId = (environmentValue, contextValue, onTrackingIdChange) => {
    if (addressCollectionViewId) {
        return;
    }
    addressCollectionViewId = uuid();
    context = contextValue;
    environment = environmentValue;
    if (onTrackingIdChange) {
        onTrackingIdChange(addressCollectionViewId);
    }
};
export const getAddressCollectionViewId = () => {
    if (!addressCollectionViewId) {
        throw new Error('addressCollectionViewId has not been initialized');
    }
    return addressCollectionViewId;
};
const trackAddressCollectionView = (country, checkoutViewId) => {
    trackGabito(createAddressCollectionView({
        address_collection_view_id: getAddressCollectionViewId(),
        context: context,
        country: country,
        checkout_view_id: checkoutViewId !== null && checkoutViewId !== void 0 ? checkoutViewId : '',
    }), environment);
};
const trackAddressCollectionError = (key, field) => {
    trackGabito(createAddressCollectionError({
        address_collection_view_id: getAddressCollectionViewId(),
        error_key: key,
        error_input_field: field !== null && field !== void 0 ? field : '',
    }), environment);
};
const trackAddressCollectionSuccess = (usingAutocomplete = false) => {
    trackGabito(createAddressCollectionSuccess({
        address_collection_view_id: getAddressCollectionViewId(),
        using_autocomplete: usingAutocomplete,
    }), environment);
};
const trackAddressCollectionSaveIntent = (usingAutocomplete = false) => {
    trackGabito(createAddressCollectionSaveIntent({
        address_collection_view_id: getAddressCollectionViewId(),
        using_autocomplete: usingAutocomplete,
    }), environment);
};
const trackAddressCollectionConfirmIntent = () => {
    trackGabito(createAddressCollectionConfirmIntent({
        address_collection_view_id: getAddressCollectionViewId(),
    }), environment);
};
const trackAddressCollectionSwitchForm = () => {
    trackGabito(createAddressCollectionSwitchForm({
        address_collection_view_id: getAddressCollectionViewId(),
    }), environment);
};
const trackingMethods = {
    trackAddressCollectionView,
    trackAddressCollectionError,
    trackAddressCollectionSuccess,
    trackAddressCollectionSaveIntent,
    trackAddressCollectionConfirmIntent,
    trackAddressCollectionSwitchForm,
};
export default trackingMethods;
//# sourceMappingURL=trackers.js.map