import { createBaseTransport, } from '@spotify-internal/transport/es5';
import { createTokenProvider } from '@spotify-internal/transport/es5/providers/spotify_com';
import { baseUrlMapping } from '../../api/environment';
import { readCookie } from '../cookies';
import { requestTransformerCreator } from '@spotify-internal/transport/es5/plugins/request_transformer';
export const returnDummyTransport = () => ({
    once: () => { },
    on: () => { },
    connect: () => { },
    isOnline: () => false,
    isDummy: true,
});
const createEndpointsProvider = (environment) => {
    return () => {
        return Promise.resolve({
            webgate: `${baseUrlMapping[environment]}/api`,
            webapi: '',
        });
    };
};
export function createSpotifyComTransport(environment) {
    const transport = createBaseTransport({
        providers: {
            endpoints: createEndpointsProvider(environment),
            token: getCookieAsTokenProvider('sp_dc'),
        },
        requestMode: 'fetch',
    });
    transport.addPlugin(requestTransformerCreator, {
        optionsOverrides: {
            credentials: 'include',
        },
    });
    transport.connect().then(() => {
        transport.authenticate();
    });
    return transport;
}
function getCookieAsTokenProvider(key) {
    const value = readCookie(key);
    if (value) {
        return () => {
            return Promise.resolve(value);
        };
    }
    return createTokenProvider();
}
//# sourceMappingURL=transport.js.map