var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { loqateKey } from './config';
import trackers from '../tracking/trackers';
import { sendAddressApiMetric } from '../tracking/metrics';
const request = (api, version, params) => __awaiter(void 0, void 0, void 0, function* () {
    const url = new URL(`https://api.addressy.com/Capture/Interactive/${api}/${version}/json3.ws`);
    params.Key = loqateKey;
    url.search = new URLSearchParams(params).toString();
    return fetch(url.toString(), {
        method: 'GET',
    }).then(r => r.json());
});
export const findAddress = (query, container) => __awaiter(void 0, void 0, void 0, function* () {
    if (query.length < 3) {
        return Promise.resolve([]);
    }
    const params = {
        Text: query,
        Countries: 'US',
    };
    if (container) {
        params.Container = container;
    }
    const result = yield request('Find', 'v1.1', params);
    if (result.Items.length === 0) {
        trackers.trackAddressCollectionError('address_not_found', 'autocomplete_field');
        sendAddressApiMetric('address-not-found', true);
        return [];
    }
    if (result.Items[0].Error) {
        trackers.trackAddressCollectionError('auto_complete_api_returned_error', 'autocomplete_field');
        return [];
    }
    return result.Items.map((item) => ({
        label: `${item.Text} ${item.Description}`,
        type: item.Type,
        id: item.Id,
    }));
});
export const retrieveAddress = (id) => __awaiter(void 0, void 0, void 0, function* () {
    const params = {
        Id: id,
    };
    const result = yield request('Retrieve', 'v1.2', params);
    if (result.Items.length === 0) {
        trackers.trackAddressCollectionError('retrieve_address_error', 'autocomplete_field');
        sendAddressApiMetric('retrieve-address-error', true);
        return null;
    }
    const item = result.Items[0];
    const postalCode = item.PostalCode;
    const [postalShort, postalExtra] = postalCode.split('-');
    return {
        street: item.Line1,
        postal_code_short: postalShort,
        postal_code_extra: postalExtra,
        state: item.Province,
        city: item.City,
    };
});
//# sourceMappingURL=loqate.js.map