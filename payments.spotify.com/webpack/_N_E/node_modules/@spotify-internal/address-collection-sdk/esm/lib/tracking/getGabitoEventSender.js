var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { readCookie } from '../cookies';
import { Environment } from '../../api/environment';
import { createEventSender as create, } from '@spotify-internal/event-sender';
import { createCorrelationIdContext, createUserAgentContext, } from '@spotify-internal/event-sender/es5/contexts';
import { createSpotifyComTransport } from '../remoteConfiguration/transport';
function createEventSender(environment) {
    return __awaiter(this, void 0, void 0, function* () {
        const correlationIdContext = createCorrelationIdContext(readCookie('sp_usid'));
        const userAgentContext = createUserAgentContext(navigator.userAgent);
        if (environment === Environment.PRODUCTION) {
            const transport = createSpotifyComTransport(environment);
            return create({
                transport: transport,
                context: [correlationIdContext, userAgentContext],
            });
        }
        return {
            log(event) {
                console.log(`Gabito Event:`, event, `Context:`, [
                    correlationIdContext,
                    userAgentContext,
                ]);
            },
        };
    });
}
let eventSenderCache;
export function getGabitoEventSender(environment) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!eventSenderCache) {
            eventSenderCache = yield createEventSender(environment);
        }
        return eventSenderCache;
    });
}
//# sourceMappingURL=getGabitoEventSender.js.map