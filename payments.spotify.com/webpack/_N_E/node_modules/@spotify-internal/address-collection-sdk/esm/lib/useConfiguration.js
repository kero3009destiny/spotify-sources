var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { useEffect, useState } from 'react';
import { getAddressConfiguration } from '../api/backend';
import { ActionType } from '../components/AddressCollection/reducer';
const fallbackConfiguration = {
    configuration: {
        required_fields: ['postal_code_short', 'street', 'city', 'state'],
        optional_fields: [],
        expanded_fields: ['postal_code_extra'],
    },
    address: null,
};
export function useConfiguration(environment, country, dispatch, setIsLoading, fallbackEnabled, addressProfile) {
    const [configuration, setConfiguration] = useState();
    useEffect(() => {
        const fn = () => __awaiter(this, void 0, void 0, function* () {
            setIsLoading(true);
            const response = yield getAddressConfiguration(environment, country, addressProfile);
            if (!response.ok || !response.body) {
                if (fallbackEnabled) {
                    setConfiguration(fallbackConfiguration);
                }
                else {
                    dispatch({ type: ActionType.SHOW_GENERIC_FAILURE });
                }
            }
            else {
                setConfiguration(response.body);
            }
            setIsLoading(false);
        });
        fn();
    }, [
        environment,
        country,
        addressProfile,
        dispatch,
        setIsLoading,
        fallbackEnabled,
    ]);
    return configuration;
}
//# sourceMappingURL=useConfiguration.js.map