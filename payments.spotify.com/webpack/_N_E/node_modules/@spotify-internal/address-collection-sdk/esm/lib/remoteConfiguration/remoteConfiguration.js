import createResolver, { properties } from './createRemoteConfigResolver';
import { readCookie } from '../cookies';
import { createSpotifyComTransport, returnDummyTransport } from './transport';
import { useEffect, useMemo } from 'react';
import { TransportEvent } from '@spotify-internal/transport';
import { Environment } from '../../api/environment';
export const RC_RESOLVE_TIMEOUT = 2000;
const propertiesList = properties.properties
    ? properties.properties
    : [];
export const isUsingExperimentationPlatform = () => {
    return (window.location.hostname.includes('spotify.com') ||
        readCookie('router-bearer-token'));
};
export const getDefaultValue = (key) => {
    const property = propertiesList.find((p) => p.name === key);
    if (!property) {
        return undefined;
    }
    if ('boolSpec' in property && property.boolSpec.default !== null) {
        return property.boolSpec.default;
    }
    return undefined;
};
export const getBool = (key, resolver, transport) => {
    if (!('isDummy' in transport)) {
        return resolver.getBool(key);
    }
    return getDefaultValue(key);
};
export const getTransport = (environment) => {
    let transport;
    if (isUsingExperimentationPlatform()) {
        transport = createSpotifyComTransport(environment);
    }
    else {
        transport = returnDummyTransport();
    }
    return transport;
};
export const useRemoteConfigResolver = (environment) => {
    const transport = useMemo(() => getTransport(environment), [environment]);
    const resolver = useMemo(() => {
        const resolverOptions = {
            transport,
            timeout: RC_RESOLVE_TIMEOUT,
            storage: null,
        };
        if (environment !== Environment.PRODUCTION) {
            resolverOptions.installationId = 'local_installation_id';
        }
        return createResolver(resolverOptions);
    }, [environment, transport]);
    useEffect(() => {
        transport.once(TransportEvent.AUTHENTICATED, () => {
            resolver.resolve({});
        });
    }, [resolver, transport]);
    return { resolver, transport };
};
//# sourceMappingURL=remoteConfiguration.js.map