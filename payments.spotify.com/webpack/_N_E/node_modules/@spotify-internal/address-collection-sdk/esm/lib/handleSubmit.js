var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import trackers from './tracking/trackers';
import { ActionType } from '../components/AddressCollection/reducer';
import { updateAddress } from '../api/backend';
import { GENERIC_FAILURE } from './errorMessages';
import { sendAddressApiMetric } from './tracking/metrics';
const ERROR_MAPPING = new Map([
    [4, 'invalid_address'],
    [5, 'zip_code_mismatch'],
]);
export default function getHandleSubmit({ dispatch, country, environment, addressProfile, fallbackEnabled, translations, openAddressValidationModal, onCancel, onSetPostalCode, onSuccess, }) {
    return ({ address, isMounted, isUsingAutocomplete, }) => __awaiter(this, void 0, void 0, function* () {
        trackers.trackAddressCollectionSaveIntent(isUsingAutocomplete);
        dispatch({ type: ActionType.SUBMIT_ADDRESS });
        const result = yield updateAddress(environment, {
            country: country,
            type: addressProfile || 'tax',
            address: address,
        }, fallbackEnabled);
        if (!isMounted.current) {
            return;
        }
        dispatch({
            type: ActionType.SET_IS_LOADING,
            payload: false,
        });
        if (!result.ok) {
            if (result.body && ERROR_MAPPING.has(result.body.error_code)) {
                const translationKey = ERROR_MAPPING.get(result.body.error_code);
                if (result.body.tax_box_postcode) {
                    openAddressValidationModal(address, result.body.tax_box_postcode);
                }
                else {
                    dispatch({
                        type: ActionType.INVALID_ADDRESS,
                        payload: translations[translationKey],
                    });
                }
                trackers.trackAddressCollectionError(translationKey);
                sendAddressApiMetric('address-validation-error', isUsingAutocomplete);
                onCancel === null || onCancel === void 0 ? void 0 : onCancel();
                return;
            }
            else if (!fallbackEnabled) {
                dispatch({ type: ActionType.SHOW_GENERIC_FAILURE });
                trackers.trackAddressCollectionError(GENERIC_FAILURE);
                sendAddressApiMetric('address-generic-failure', isUsingAutocomplete);
                onCancel === null || onCancel === void 0 ? void 0 : onCancel();
                return;
            }
        }
        else {
            dispatch({
                type: ActionType.ADDRESS_SUCCESSFULLY_SAVED,
                payload: address,
            });
        }
        onSetPostalCode === null || onSetPostalCode === void 0 ? void 0 : onSetPostalCode(`${address.postal_code_short}`);
        trackers.trackAddressCollectionSuccess(isUsingAutocomplete);
        if (!result.ok && fallbackEnabled) {
            sendAddressApiMetric('address-validation-fallback-success', isUsingAutocomplete);
        }
        else {
            sendAddressApiMetric('address-validation-success', isUsingAutocomplete);
        }
        onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess();
    });
}
//# sourceMappingURL=handleSubmit.js.map