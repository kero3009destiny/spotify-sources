import { spacer4, spacer12, cta4FontSize, cta4LetterSpacing, cta4LineHeight, cta4Uppercase, body2FontSize, body2FontWeight, body2LineHeight, body2LetterSpacing, body1FontSize, body1LetterSpacing, body1FontWeight, body1LineHeight, cta4FontWeight, cssColorValue, semanticColors, } from '@spotify-internal/encore-web';
const overlayBoxShadow = `0 ${spacer4} ${spacer12} 0 rgba(0, 0, 0, 0.2)`;
const opacityDisabled = 0.4;
const typeStyleBody1 = {
    fontSize: body1FontSize,
    fontWeight: Number(body1FontWeight),
    letterSpacing: body1LetterSpacing,
    lineHeight: body1LineHeight,
};
const typeStyleBody2 = {
    fontSize: body2FontSize,
    fontWeight: Number(body2FontWeight),
    letterSpacing: body2LetterSpacing,
    lineHeight: body2LineHeight,
};
const typeStyleCta4 = {
    fontSize: cta4FontSize,
    fontWeight: Number(cta4FontWeight),
    letterSpacing: cta4LetterSpacing,
    lineHeight: cta4LineHeight,
    textTransform: cta4Uppercase,
};
function getControlStyles({ provided, state, isUsingKeyboard, error, customStyles, }) {
    var _a;
    return Object.assign(Object.assign(Object.assign({}, provided), { backgroundColor: !state.isDisabled
            ? cssColorValue(semanticColors.backgroundBase)
            : 'transparent', border: 'none', boxShadow: state.isFocused
            ? `inset 0 0 0 ${isUsingKeyboard ? 3 : 1}px ${!error
                ? cssColorValue(semanticColors.essentialBase)
                : cssColorValue(semanticColors.essentialNegative)}`
            : `inset 0 0 0 1px ${!state.isDisabled
                ? !error
                    ? cssColorValue(semanticColors.essentialSubdued)
                    : cssColorValue(semanticColors.essentialNegative)
                : cssColorValue(semanticColors.essentialSubdued)}`, cursor: !state.isDisabled ? 'default' : 'not-allowed', transition: 'none', opacity: state.isDisabled ? opacityDisabled : 1 }), (_a = customStyles === null || customStyles === void 0 ? void 0 : customStyles.control) === null || _a === void 0 ? void 0 : _a.call(customStyles, provided, state));
}
export const getEncoreStyles = ({ isUsingKeyboard, error, customStyles = {}, }) => (Object.assign(Object.assign({}, customStyles), { container: (provided, state) => {
        var _a, _b;
        return !state.isDisabled
            ? Object.assign(Object.assign({}, provided), (_a = customStyles === null || customStyles === void 0 ? void 0 : customStyles.container) === null || _a === void 0 ? void 0 : _a.call(customStyles, provided, state)) : Object.assign({}, (_b = customStyles === null || customStyles === void 0 ? void 0 : customStyles.container) === null || _b === void 0 ? void 0 : _b.call(customStyles, provided, state));
    }, control: (provided, state) => getControlStyles({
        provided,
        state,
        isUsingKeyboard,
        error,
        customStyles,
    }), valueContainer: (provided, state) => {
        var _a;
        return (Object.assign(Object.assign(Object.assign({}, provided), { padding: state.isMulti ? '10px 14px' : '14px', minHeight: state.isMulti ? '52px' : provided.minHeight }), (_a = customStyles === null || customStyles === void 0 ? void 0 : customStyles.valueContainer) === null || _a === void 0 ? void 0 : _a.call(customStyles, provided, state)));
    }, placeholder: (provided, state) => {
        var _a;
        return (Object.assign(Object.assign(Object.assign(Object.assign({}, provided), typeStyleBody1), { color: cssColorValue(semanticColors.textSubdued), opacity: state.isDisabled ? opacityDisabled : 1 }), (_a = customStyles === null || customStyles === void 0 ? void 0 : customStyles.placeholder) === null || _a === void 0 ? void 0 : _a.call(customStyles, provided, state)));
    }, input: (provided, state) => {
        var _a;
        return (Object.assign(Object.assign(Object.assign(Object.assign({}, provided), typeStyleBody1), { margin: '0 2px', padding: 0, color: cssColorValue(semanticColors.textBase) }), (_a = customStyles === null || customStyles === void 0 ? void 0 : customStyles.input) === null || _a === void 0 ? void 0 : _a.call(customStyles, provided, state)));
    }, clearIndicator: (provided, state) => {
        var _a;
        return (Object.assign(Object.assign(Object.assign({}, provided), { padding: 0 }), (_a = customStyles === null || customStyles === void 0 ? void 0 : customStyles.indicatorSeparator) === null || _a === void 0 ? void 0 : _a.call(customStyles, provided, state)));
    }, indicatorSeparator: (provided, state) => {
        var _a;
        return (Object.assign({}, (_a = customStyles === null || customStyles === void 0 ? void 0 : customStyles.indicatorSeparator) === null || _a === void 0 ? void 0 : _a.call(customStyles, provided, state)));
    }, dropdownIndicator: (provided, state) => {
        var _a;
        return (Object.assign(Object.assign(Object.assign({}, provided), { color: cssColorValue(semanticColors.essentialSubdued), padding: '16px', pointerEvents: 'none' }), (_a = customStyles === null || customStyles === void 0 ? void 0 : customStyles.dropdownIndicator) === null || _a === void 0 ? void 0 : _a.call(customStyles, provided, state)));
    }, menu: (provided, state) => {
        var _a;
        return (Object.assign(Object.assign(Object.assign({}, provided), { padding: '8px 0', border: `1px solid ${cssColorValue(semanticColors.essentialBase)}`, borderRadius: '8px', boxShadow: overlayBoxShadow, backgroundColor: cssColorValue(semanticColors.backgroundBase) }), (_a = customStyles === null || customStyles === void 0 ? void 0 : customStyles.menu) === null || _a === void 0 ? void 0 : _a.call(customStyles, provided, state)));
    }, menuList: (provided, state) => {
        var _a;
        return (Object.assign(Object.assign(Object.assign({}, provided), { margin: 0, padding: 0, maxHeight: '273px' }), (_a = customStyles === null || customStyles === void 0 ? void 0 : customStyles.menuList) === null || _a === void 0 ? void 0 : _a.call(customStyles, provided, state)));
    }, option: (provided, state) => {
        var _a;
        return (Object.assign(Object.assign(Object.assign(Object.assign({}, provided), typeStyleBody2), { padding: '14px 16px', color: state.isSelected
                ? cssColorValue(semanticColors.textBase)
                : cssColorValue(semanticColors.textSubdued), '&:hover': !state.isSelected
                ? {
                    backgroundColor: cssColorValue(semanticColors.backgroundElevatedHighlight),
                    color: cssColorValue(semanticColors.textSubdued),
                }
                : {}, backgroundColor: state.isSelected
                ? cssColorValue(semanticColors.backgroundElevatedPress)
                : state.isFocused
                    ? cssColorValue(semanticColors.backgroundHighlight)
                    : 'transparent', '&:active': {
                color: cssColorValue(semanticColors.textSubdued),
                backgroundColor: cssColorValue(semanticColors.backgroundElevatedPress),
            } }), (_a = customStyles === null || customStyles === void 0 ? void 0 : customStyles.option) === null || _a === void 0 ? void 0 : _a.call(customStyles, provided, state)));
    }, singleValue: (provided, state) => {
        var _a;
        return (Object.assign(Object.assign(Object.assign(Object.assign({}, provided), typeStyleBody1), { color: cssColorValue(semanticColors.textBase) }), (_a = customStyles === null || customStyles === void 0 ? void 0 : customStyles.singleValue) === null || _a === void 0 ? void 0 : _a.call(customStyles, provided, state)));
    }, multiValue: (provided, state) => {
        var _a;
        return (Object.assign(Object.assign(Object.assign({}, provided), { backgroundColor: cssColorValue(semanticColors.backgroundTintedBase), borderRadius: spacer4 }), (_a = customStyles === null || customStyles === void 0 ? void 0 : customStyles.multiValue) === null || _a === void 0 ? void 0 : _a.call(customStyles, provided, state)));
    }, multiValueLabel: (provided, state) => {
        var _a;
        return (Object.assign(Object.assign(Object.assign(Object.assign({}, provided), typeStyleCta4), { color: cssColorValue(semanticColors.textBase) }), (_a = customStyles === null || customStyles === void 0 ? void 0 : customStyles.multiValueLabel) === null || _a === void 0 ? void 0 : _a.call(customStyles, provided, state)));
    }, multiValueRemove: (provided, state) => {
        var _a;
        return (Object.assign(Object.assign(Object.assign({}, provided), { display: state.isDisabled ? 'none' : provided.display, '&:hover': {
                color: cssColorValue(semanticColors.textBase),
                backgroundColor: cssColorValue(semanticColors.backgroundTintedHighlight),
                borderRadius: `0 ${spacer4} ${spacer4} 0`,
            } }), (_a = customStyles === null || customStyles === void 0 ? void 0 : customStyles.multiValueRemove) === null || _a === void 0 ? void 0 : _a.call(customStyles, provided, state)));
    } }));
//# sourceMappingURL=styles.js.map