var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import React, { useEffect, useState } from 'react';
import { getTranslations, } from '../../lib/translations/translations';
const defaultTranslations = {};
export const TranslationsContext = React.createContext({
    translations: defaultTranslations,
    translationsLoaded: false,
});
export function TranslationsProvider({ locale, children, }) {
    const [translations, setTranslations] = useState(defaultTranslations);
    const [translationsLoaded, setTranslationsLoaded] = useState(false);
    useEffect(() => {
        const runAsync = () => __awaiter(this, void 0, void 0, function* () {
            const translationsResponse = yield getTranslations(locale);
            setTranslations(translationsResponse);
            setTranslationsLoaded(true);
        });
        runAsync();
    }, [locale]);
    return (React.createElement(TranslationsContext.Provider, { value: { translations, translationsLoaded } }, children));
}
//# sourceMappingURL=TranslationsContext.js.map