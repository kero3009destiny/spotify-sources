var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import validate from '../../lib/validation';
import { ActionType } from '../AddressCollection/reducer';
import { Field, Form, Formik } from 'formik';
import FormikSubmitter from './FormikSubmitter';
import { InputField } from './InputField';
import { SelectField } from './SelectField';
import { US_STATES } from '../../lib/usStates';
import { CtaWrapper } from '../AddressCollection/components';
import { ButtonPrimary } from '@spotify-internal/encore-web';
import React, { useContext } from 'react';
import { useIsMounted } from '../../lib/useIsMounted';
import { TranslationsContext } from '../TranslationsContext/TranslationsContext';
import AddressConfirmationModal from '../AddressConfirmationModal';
const getInitialValues = (configuration) => {
    if (!configuration.address) {
        return {
            street: '',
            postal_code_short: '',
            city: '',
            state: '',
        };
    }
    return {
        street: configuration.address.street,
        postal_code_short: configuration.address.postal_code_short,
        city: configuration.address.city,
        state: configuration.address.state,
    };
};
export default function FullAddressForm({ state, dispatch, configuration, addressCollectionProps, handleSubmit, }) {
    const isMounted = useIsMounted();
    const { translations } = useContext(TranslationsContext);
    const { country, useEncoreStyle, submitRef, isStandalone } = addressCollectionProps;
    const triggerSubmit = (address) => __awaiter(this, void 0, void 0, function* () {
        yield handleSubmit({
            address,
            isMounted,
            isUsingAutocomplete: false,
        });
    });
    const closeAddressValidationModal = () => {
        dispatch({
            type: ActionType.SET_ADDRESS_CONFIRMATION_MODAL,
            payload: {
                showAddressConfirmationModal: false,
                userAddress: {},
                validatedZipCode: '',
            },
        });
    };
    return (React.createElement(React.Fragment, null,
        state.addressConfirmationModal && (React.createElement(AddressConfirmationModal, { onClose: closeAddressValidationModal, userAddress: state.userAddress, validatedZipCode: state.validatedZipCode, country: country, submitConfirmation: triggerSubmit })),
        React.createElement(Formik, { initialValues: state.confirmedAddress || getInitialValues(configuration), validateOnChange: false, validate: values => {
                var _a;
                const errors = validate(values);
                if (Object.keys(errors).length > 0) {
                    (_a = addressCollectionProps.onCancel) === null || _a === void 0 ? void 0 : _a.call(addressCollectionProps);
                }
                dispatch({
                    type: ActionType.SET_TRACKED_ERRORS,
                    payload: errors,
                });
                const translatedErrors = {};
                Object.keys(errors).map((key) => {
                    translatedErrors[key] =
                        translations[errors[key]];
                });
                return translatedErrors;
            }, onSubmit: (address, { setSubmitting }) => __awaiter(this, void 0, void 0, function* () {
                yield triggerSubmit(address);
                setSubmitting(false);
            }) },
            React.createElement(Form, null,
                submitRef && React.createElement(FormikSubmitter, { submitRef: submitRef }),
                React.createElement(InputField, { label: "Street", name: "street", useEncoreStyle: useEncoreStyle }),
                React.createElement(InputField, { label: "Town/City", name: "city", useEncoreStyle: useEncoreStyle }),
                React.createElement(SelectField, { name: "state", label: "State", useEncoreStyle: useEncoreStyle },
                    React.createElement("option", { value: "", disabled: true }, "State"),
                    US_STATES.map((usState) => (React.createElement("option", { value: usState.code, key: `state-${usState.code}` }, usState.name)))),
                React.createElement(InputField, { label: "ZIP code", name: "postal_code_short", useEncoreStyle: useEncoreStyle }),
                isStandalone && (React.createElement(CtaWrapper, null,
                    React.createElement(Field, null, ({ form }) => (React.createElement(ButtonPrimary, { type: "submit", disabled: form.isSubmitting }, "Save Address")))))))));
}
//# sourceMappingURL=FullAddressForm.js.map