import { GENERIC_FAILURE } from '../../lib/errorMessages';
export const initialState = {
    isLoading: false,
    isEditing: true,
    explanationModalVisible: false,
    addressConfirmationModal: false,
    confirmedAddress: null,
    globalErrors: [],
    trackedErrors: {},
    userAddress: {},
    validatedZipCode: '',
    formType: 0,
    experimentIsApplied: false,
};
export var ActionType;
(function (ActionType) {
    ActionType[ActionType["SET_IS_LOADING"] = 0] = "SET_IS_LOADING";
    ActionType[ActionType["SET_IS_EDITING"] = 1] = "SET_IS_EDITING";
    ActionType[ActionType["SET_EXPLANATION_MODAL_VISIBLE"] = 2] = "SET_EXPLANATION_MODAL_VISIBLE";
    ActionType[ActionType["SUBMIT_ADDRESS"] = 3] = "SUBMIT_ADDRESS";
    ActionType[ActionType["SHOW_GENERIC_FAILURE"] = 4] = "SHOW_GENERIC_FAILURE";
    ActionType[ActionType["ADDRESS_SUCCESSFULLY_SAVED"] = 5] = "ADDRESS_SUCCESSFULLY_SAVED";
    ActionType[ActionType["SET_TRACKED_ERRORS"] = 6] = "SET_TRACKED_ERRORS";
    ActionType[ActionType["INVALID_ADDRESS"] = 7] = "INVALID_ADDRESS";
    ActionType[ActionType["SET_ADDRESS_CONFIRMATION_MODAL"] = 8] = "SET_ADDRESS_CONFIRMATION_MODAL";
    ActionType[ActionType["SET_FORM_TYPE"] = 9] = "SET_FORM_TYPE";
    ActionType[ActionType["SET_EXPERIMENT_IS_APPLIED"] = 10] = "SET_EXPERIMENT_IS_APPLIED";
})(ActionType || (ActionType = {}));
export default function reducer(state, action) {
    switch (action.type) {
        case ActionType.SET_IS_LOADING:
            return Object.assign(Object.assign({}, state), { isLoading: action.payload });
        case ActionType.SET_EXPERIMENT_IS_APPLIED:
            return Object.assign(Object.assign({}, state), { isLoading: !action.payload, experimentIsApplied: action.payload });
        case ActionType.SET_FORM_TYPE:
            return Object.assign(Object.assign({}, state), { formType: action.payload });
        case ActionType.SET_IS_EDITING:
            return Object.assign(Object.assign({}, state), { isEditing: action.payload });
        case ActionType.SET_EXPLANATION_MODAL_VISIBLE:
            return Object.assign(Object.assign({}, state), { explanationModalVisible: action.payload });
        case ActionType.SUBMIT_ADDRESS:
            return Object.assign(Object.assign({}, state), { isLoading: true, globalErrors: [] });
        case ActionType.SHOW_GENERIC_FAILURE:
            return Object.assign(Object.assign({}, state), { isLoading: false, globalErrors: [GENERIC_FAILURE] });
        case ActionType.INVALID_ADDRESS:
            return Object.assign(Object.assign({}, state), { isLoading: false, globalErrors: [action.payload] });
        case ActionType.ADDRESS_SUCCESSFULLY_SAVED:
            return Object.assign(Object.assign({}, state), { isEditing: false, confirmedAddress: action.payload });
        case ActionType.SET_ADDRESS_CONFIRMATION_MODAL:
            return Object.assign(Object.assign({}, state), { isLoading: false, userAddress: action.payload.userAddress, validatedZipCode: action.payload.validatedZipCode, addressConfirmationModal: action.payload.showAddressConfirmationModal });
        case ActionType.SET_TRACKED_ERRORS:
            return Object.assign(Object.assign({}, state), { trackedErrors: action.payload });
        default:
            return state;
    }
}
//# sourceMappingURL=reducer.js.map