import React, { useEffect } from 'react';
import { ActionType } from './reducer';
import { isUsingExperimentationPlatform } from '../../lib/remoteConfiguration/remoteConfiguration';
const RemoteConfigWrapper = ({ children, dispatch, state, resolver, }) => {
    const { experimentIsApplied } = state;
    useEffect(() => {
        if (!resolver.isActive && isUsingExperimentationPlatform()) {
            dispatch({ type: ActionType.SET_EXPERIMENT_IS_APPLIED, payload: false });
            resolver.activationPromise.then(() => {
                dispatch({
                    type: ActionType.SET_EXPERIMENT_IS_APPLIED,
                    payload: true,
                });
            });
        }
        if (!isUsingExperimentationPlatform()) {
            dispatch({ type: ActionType.SET_EXPERIMENT_IS_APPLIED, payload: true });
        }
    }, [dispatch, resolver]);
    return experimentIsApplied ? React.createElement(React.Fragment, null, children) : null;
};
export default RemoteConfigWrapper;
//# sourceMappingURL=RemoteConfigWrapper.js.map