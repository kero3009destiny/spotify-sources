import React, { useContext, useEffect, useState } from 'react';
import { ActionType } from '../AddressCollection/reducer';
import FullAddressForm from '../FullAddressForm';
import AutocompleteForm from '../AutocompleteForm';
import getHandleSubmit from '../../lib/handleSubmit';
import { TranslationsContext } from '../TranslationsContext/TranslationsContext';
import { isUsingExperimentationPlatform } from '../../lib/remoteConfiguration/remoteConfiguration';
export default function AddressForm(props) {
    const { dispatch, addressCollectionProps, resolver } = props;
    const { country, fallbackEnabled, environment, addressProfile, onCancel, onSuccess, onSetPostalCode, } = addressCollectionProps;
    const { translations } = useContext(TranslationsContext);
    const [showAutocomplete, setShowAutocomplete] = useState(false);
    const openAddressValidationModal = (userAddress, validatedZipCode) => {
        dispatch({
            type: ActionType.SET_ADDRESS_CONFIRMATION_MODAL,
            payload: {
                showAddressConfirmationModal: true,
                userAddress,
                validatedZipCode,
            },
        });
    };
    useEffect(() => {
        if (resolver.isActive && props.state.experimentIsApplied) {
            setShowAutocomplete(resolver.getBool('show_autocomplete'));
            dispatch({
                type: ActionType.SET_FORM_TYPE,
                payload: 1,
            });
        }
    }, [resolver, props.state.experimentIsApplied, dispatch]);
    const handleSubmit = getHandleSubmit({
        country,
        fallbackEnabled,
        dispatch,
        environment,
        onCancel,
        onSuccess,
        onSetPostalCode,
        addressProfile,
        translations,
        openAddressValidationModal,
    });
    if (isUsingExperimentationPlatform() && props.state.experimentIsApplied) {
        if (props.state.formType === 1 && showAutocomplete) {
            return React.createElement(AutocompleteForm, Object.assign({}, props, { handleSubmit: handleSubmit }));
        }
        return React.createElement(FullAddressForm, Object.assign({}, props, { handleSubmit: handleSubmit }));
    }
    if (props.state.formType === 1) {
        return React.createElement(AutocompleteForm, Object.assign({}, props, { handleSubmit: handleSubmit }));
    }
    return React.createElement(FullAddressForm, Object.assign({}, props, { handleSubmit: handleSubmit }));
}
//# sourceMappingURL=AddressForm.js.map