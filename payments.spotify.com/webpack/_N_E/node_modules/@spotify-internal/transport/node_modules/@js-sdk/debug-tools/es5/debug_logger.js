"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DebugLogger = void 0;
var tslib_1 = require("tslib");
var log_level_1 = require("./enums/log_level");
var dummy_logger_1 = require("./_internal/dummy_logger");
var ConsoleLogger = /** @class */ (function () {
    function ConsoleLogger(tag, description, predicate) {
        if (description === void 0) { description = ''; }
        if (predicate === void 0) { predicate = function () { return false; }; }
        this._tagParts = [];
        this._tagText = '';
        this._enabled = true;
        this._level = log_level_1.LogLevel.NONE;
        this.tag = '';
        this.description = '';
        this._predicate = function () {
            return false;
        };
        this.tag = tag;
        this.description = description;
        this._predicate = predicate;
        this._tagParts = tag.split('.');
        this._tagText = "[" + tag + "]";
    }
    ConsoleLogger.prototype._print = function (levelName, logLevel, args) {
        if (!this._enabled && !(this._level & logLevel)) {
            return;
        }
        var logObj = {
            args: args,
            type: levelName,
            tag: this.tag,
        };
        if (this._predicate(logObj)) {
            return;
        }
        /* eslint-disable-next-line no-console */
        console[levelName].apply(console, tslib_1.__spreadArray([this._tagText], args));
    };
    ConsoleLogger.prototype.matchesTag = function (tag) {
        var _tag = Array.isArray(tag) ? tag : tag.split('.');
        var tagParts = this._tagParts;
        if (_tag.length > tagParts.length) {
            return false;
        }
        for (var i = 0, l = _tag.length; i < l; i++) {
            if (_tag[i] === '*' && tagParts[i]) {
                // matches anything
                continue;
            }
            if (_tag[i] !== tagParts[i]) {
                return false;
            }
        }
        return true;
    };
    ConsoleLogger.prototype.setLevel = function (level) {
        var value = 0;
        switch (level) {
            case 'error':
                value = log_level_1.LogLevel.ERROR;
                break;
            case 'warn':
                value = log_level_1.LogLevel.WARN | log_level_1.LogLevel.ERROR;
                break;
            case 'info':
                value = log_level_1.LogLevel.INFO | log_level_1.LogLevel.WARN | log_level_1.LogLevel.ERROR;
                break;
            case 'debug':
                value = log_level_1.LogLevel.DEBUG | log_level_1.LogLevel.INFO | log_level_1.LogLevel.WARN | log_level_1.LogLevel.ERROR;
                break;
            case 'log':
            default:
                value =
                    log_level_1.LogLevel.LOG |
                        log_level_1.LogLevel.DEBUG |
                        log_level_1.LogLevel.INFO |
                        log_level_1.LogLevel.WARN |
                        log_level_1.LogLevel.ERROR;
                break;
        }
        this._level = value;
    };
    ConsoleLogger.prototype.enable = function () {
        this._enabled = true;
    };
    ConsoleLogger.prototype.disable = function () {
        this._enabled = false;
    };
    ConsoleLogger.prototype.log = function () {
        var _args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _args[_i] = arguments[_i];
        }
        this._print('log', log_level_1.LogLevel.LOG, _args);
    };
    ConsoleLogger.prototype.debug = function () {
        var _args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _args[_i] = arguments[_i];
        }
        this._print('debug', log_level_1.LogLevel.DEBUG, _args);
    };
    ConsoleLogger.prototype.info = function () {
        var _args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _args[_i] = arguments[_i];
        }
        this._print('info', log_level_1.LogLevel.INFO, _args);
    };
    ConsoleLogger.prototype.warn = function () {
        var _args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _args[_i] = arguments[_i];
        }
        this._print('warn', log_level_1.LogLevel.WARN, _args);
    };
    ConsoleLogger.prototype.error = function () {
        var _args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _args[_i] = arguments[_i];
        }
        this._print('error', log_level_1.LogLevel.ERROR, _args);
    };
    return ConsoleLogger;
}());
exports.DebugLogger = typeof process !== 'undefined' && process.env.DEBUG === 'true'
    ? ConsoleLogger
    : dummy_logger_1.DummyLogger;
//# sourceMappingURL=debug_logger.js.map