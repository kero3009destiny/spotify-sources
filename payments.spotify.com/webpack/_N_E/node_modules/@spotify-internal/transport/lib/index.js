export { TransportErrors } from './enums/errors';
export { Event as TransportEvent } from './enums/event';
export { Method } from './enums/method';
export { PluginEvent } from './enums/plugin_event';
export { DisconnectionReason } from './enums/disconnection_reason';
import { dealerCreator } from './plugins/dealer';
import * as Fetch from './http/fetch';
import { Transport, } from './transport';
import * as XHR from './http/xhr';
import { HTTPResponse } from './http/response';
import { HTTPRequest } from './http/request';
import { PublicTransport } from './_internal/public_transport';
// XResolveProvider
export { createProvider as createXResolveProvider } from './providers/endpoints/xresolve';
// Plugins
export { DEALER_PLUGIN_NAME } from './plugins/dealer';
/**
 * Creates an instance of Transport.
 *
 * @param config - The configuration object for this transport instance.
 * @returns The created Transport instance.
 */
export function createBaseTransport(config) {
    const _config = Object.assign({}, config);
    if (!_config.XHR) {
        _config.XHR = XHR;
    }
    _config.Fetch = Fetch;
    return Transport.create(_config);
}
/**
 * Creates an instance of Transport with default plugins added.
 *
 * @param config - The configuration object for this transport instance.
 * @returns The created Transport instance.
 */
export function createTransport(config) {
    const transport = createBaseTransport(config);
    transport.addPlugin(dealerCreator, { WebSocket: WebSocket });
    return transport;
}
//# sourceMappingURL=index.js.map