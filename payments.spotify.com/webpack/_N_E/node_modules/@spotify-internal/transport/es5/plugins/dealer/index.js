"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dealerCreator = exports.DealerErrors = exports.DEALER_PLUGIN_NAME = void 0;
var tslib_1 = require("tslib");
var typedefs_1 = require("./typedefs");
Object.defineProperty(exports, "DealerErrors", { enumerable: true, get: function () { return typedefs_1.DealerErrors; } });
var plugin_event_1 = require("../../enums/plugin_event");
var error_1 = require("./error");
var event_1 = require("./event");
var dealer_1 = require("./dealer");
/**
 * The name of the Dealer Plugin.
 *
 * This value should be used when calling Transport methods like `hasPlugin()`
 * or `getPluginAPI()`.
 */
exports.DEALER_PLUGIN_NAME = 'dealer';
/**
 * A Transport Plugin that implements the Dealer protocol.
 */
var DealerPlugin = /** @class */ (function () {
    function DealerPlugin(options) {
        var _this = this;
        /**
         * The name of the plugin.
         */
        this.name = exports.DEALER_PLUGIN_NAME;
        this._dealer = new dealer_1.Dealer(options);
        // Create the API, which is always bound to the instance.
        this.api = {
            hasConnectionInfo: function () { return _this._dealer.hasConnectionId(); },
            getConnectionInfo: function () {
                return _this._dealer.getConnectionInfo().then(function (info) {
                    return tslib_1.__assign({ plugin: _this.name }, info);
                });
            },
        };
        // Rebind
        this._onDealerConnectionId = this._onDealerConnectionId.bind(this);
        this._onDealerDisconnected = this._onDealerDisconnected.bind(this);
        this._onDealerMessage = this._onDealerMessage.bind(this);
        this._onDealerRequest = this._onDealerRequest.bind(this);
        this._onTransportConnect = this._onTransportConnect.bind(this);
        this._onTransportAuthenticate = this._onTransportAuthenticate.bind(this);
        this._onTransportDisconnect = this._onTransportDisconnect.bind(this);
    }
    /**
     * Called when the Dealer instance receives a connection id.
     *
     * @param ev - The event object
     */
    DealerPlugin.prototype._onDealerConnectionId = function (ev) {
        if (!this._mediator) {
            return;
        }
        this._mediator.emit(plugin_event_1.PluginEvent.PLUGIN_CONNECTION_INFO, tslib_1.__assign({ plugin: this.name }, ev.data));
    };
    /**
     * Called when the dealer instance gets disconnected.
     *
     * @param ev - The event object
     */
    DealerPlugin.prototype._onDealerDisconnected = function (ev) {
        if (!this._mediator) {
            return;
        }
        var data = ev.data;
        this._mediator.emit(plugin_event_1.PluginEvent.PLUGIN_DISCONNECTED, {
            plugin: this.name,
            code: data.wsCode,
            reason: data.reason,
        });
    };
    /**
     * Called when the dealer instance receives a message.
     *
     * @param ev - The event object
     */
    DealerPlugin.prototype._onDealerMessage = function (ev) {
        if (!this._mediator) {
            return;
        }
        this._mediator.emit(plugin_event_1.PluginEvent.PLUGIN_MESSAGE, tslib_1.__assign({ plugin: this.name }, ev.data));
    };
    /**
     * Called when the dealer instance receives a request.
     *
     * @param ev - The event object
     */
    DealerPlugin.prototype._onDealerRequest = function (ev) {
        if (!this._mediator) {
            return;
        }
        this._mediator.emit(plugin_event_1.PluginEvent.PLUGIN_REQUEST, tslib_1.__assign({ plugin: this.name }, ev.data));
    };
    /**
     * Called when the transport instance starts connecting.
     *
     * @param ev - The event.
     */
    DealerPlugin.prototype._onTransportConnect = function (ev) {
        var endpoints = ev.data.endpoints;
        var awaitPromise = ev.data.awaitPromise;
        if (!endpoints.dealer) {
            awaitPromise(Promise.reject(new error_1.DealerError(typedefs_1.DealerErrors.ENDPOINT_NOT_DEFINED, 'No "dealer" endpoint defined.')));
            return;
        }
        if (!/^wss:/.test(endpoints.dealer)) {
            awaitPromise(Promise.reject(new error_1.DealerError(typedefs_1.DealerErrors.INVALID_ENDPOINT, 'Dealer endpoint needs to be wss://')));
            return;
        }
        awaitPromise(this._dealer.connect(endpoints.dealer));
    };
    /**
     * Called when the Transport instance starts authenticating.
     *
     * @param ev - The event.
     */
    DealerPlugin.prototype._onTransportAuthenticate = function (ev) {
        var data = ev.data;
        data.awaitPromise(this._dealer.authenticate(data.token));
    };
    /**
     * Called when the Transport instance is disconnecting.
     */
    DealerPlugin.prototype._onTransportDisconnect = function () {
        this._dealer.disconnect();
    };
    DealerPlugin.prototype._onDealerError = function (ev) {
        var _a;
        (_a = this._mediator) === null || _a === void 0 ? void 0 : _a.emit(plugin_event_1.PluginEvent.PLUGIN_ERROR, {
            plugin: this.name,
            error: ev.data.error,
        });
    };
    /**
     * Attaches the plugin to a Transport instance.
     *
     * @param _t - The Transport instance.
     * @param mediator - The PluginMediator from the Transport instance.
     */
    DealerPlugin.prototype.attach = function (_t, mediator) {
        var _a, _b;
        this._mediator = mediator;
        mediator.addListeners((_a = {},
            _a[plugin_event_1.PluginEvent.TRANSPORT_CONNECT] = this._onTransportConnect,
            _a[plugin_event_1.PluginEvent.TRANSPORT_AUTHENTICATE] = this._onTransportAuthenticate,
            _a[plugin_event_1.PluginEvent.TRANSPORT_DISCONNECT] = this._onTransportDisconnect,
            _a));
        this._dealer.addListeners((_b = {},
            _b[event_1.DealerEvent.DISCONNECTED] = this._onDealerDisconnected,
            _b[event_1.DealerEvent.CONNECTION_ID] = this._onDealerConnectionId,
            _b[event_1.DealerEvent.MESSAGE] = this._onDealerMessage,
            _b[event_1.DealerEvent.REQUEST] = this._onDealerRequest,
            _b[event_1.DealerEvent.ERROR] = this._onDealerError,
            _b));
    };
    /**
     * Detaches the plugin from a Transport instance.
     *
     * @param _t - The Transport instance.
     * @param mediator - The PluginMediator from the Transport instance.
     */
    DealerPlugin.prototype.detach = function (_t, mediator) {
        var _a, _b;
        this._mediator = undefined;
        mediator.removeListeners((_a = {},
            _a[plugin_event_1.PluginEvent.TRANSPORT_CONNECT] = this._onTransportConnect,
            _a[plugin_event_1.PluginEvent.TRANSPORT_AUTHENTICATE] = this._onTransportAuthenticate,
            _a[plugin_event_1.PluginEvent.TRANSPORT_DISCONNECT] = this._onTransportDisconnect,
            _a));
        this._dealer.removeListeners((_b = {},
            _b[event_1.DealerEvent.DISCONNECTED] = this._onDealerDisconnected,
            _b[event_1.DealerEvent.CONNECTION_ID] = this._onDealerConnectionId,
            _b[event_1.DealerEvent.MESSAGE] = this._onDealerMessage,
            _b[event_1.DealerEvent.REQUEST] = this._onDealerRequest,
            _b[event_1.DealerEvent.ERROR] = this._onDealerError,
            _b));
    };
    return DealerPlugin;
}());
/**
 * Creates a new Dealer Plugin.
 *
 * This function should be passed to `transport.addPlugin()` directly.
 *
 * @param _t - The Transport instance.
 * @param options - The options for the plugin.
 * @returns A new DealerPlugin.
 */
function dealerCreator(_t, options) {
    return new DealerPlugin(options);
}
exports.dealerCreator = dealerCreator;
//# sourceMappingURL=index.js.map