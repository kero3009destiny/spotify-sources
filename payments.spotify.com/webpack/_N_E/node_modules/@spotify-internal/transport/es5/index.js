"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTransport = exports.createBaseTransport = exports.DEALER_PLUGIN_NAME = exports.createXResolveProvider = exports.DisconnectionReason = exports.PluginEvent = exports.Method = exports.TransportEvent = exports.TransportErrors = void 0;
var tslib_1 = require("tslib");
var errors_1 = require("./enums/errors");
Object.defineProperty(exports, "TransportErrors", { enumerable: true, get: function () { return errors_1.TransportErrors; } });
var event_1 = require("./enums/event");
Object.defineProperty(exports, "TransportEvent", { enumerable: true, get: function () { return event_1.Event; } });
var method_1 = require("./enums/method");
Object.defineProperty(exports, "Method", { enumerable: true, get: function () { return method_1.Method; } });
var plugin_event_1 = require("./enums/plugin_event");
Object.defineProperty(exports, "PluginEvent", { enumerable: true, get: function () { return plugin_event_1.PluginEvent; } });
var disconnection_reason_1 = require("./enums/disconnection_reason");
Object.defineProperty(exports, "DisconnectionReason", { enumerable: true, get: function () { return disconnection_reason_1.DisconnectionReason; } });
var dealer_1 = require("./plugins/dealer");
var Fetch = require("./http/fetch");
var transport_1 = require("./transport");
var XHR = require("./http/xhr");
var response_1 = require("./http/response");
var request_1 = require("./http/request");
var public_transport_1 = require("./_internal/public_transport");
// XResolveProvider
var xresolve_1 = require("./providers/endpoints/xresolve");
Object.defineProperty(exports, "createXResolveProvider", { enumerable: true, get: function () { return xresolve_1.createProvider; } });
// Plugins
var dealer_2 = require("./plugins/dealer");
Object.defineProperty(exports, "DEALER_PLUGIN_NAME", { enumerable: true, get: function () { return dealer_2.DEALER_PLUGIN_NAME; } });
/**
 * Creates an instance of Transport.
 *
 * @param config - The configuration object for this transport instance.
 * @returns The created Transport instance.
 */
function createBaseTransport(config) {
    var _config = tslib_1.__assign({}, config);
    if (!_config.XHR) {
        _config.XHR = XHR;
    }
    _config.Fetch = Fetch;
    return transport_1.Transport.create(_config);
}
exports.createBaseTransport = createBaseTransport;
/**
 * Creates an instance of Transport with default plugins added.
 *
 * @param config - The configuration object for this transport instance.
 * @returns The created Transport instance.
 */
function createTransport(config) {
    var transport = createBaseTransport(config);
    transport.addPlugin(dealer_1.dealerCreator, { WebSocket: WebSocket });
    return transport;
}
exports.createTransport = createTransport;
//# sourceMappingURL=index.js.map