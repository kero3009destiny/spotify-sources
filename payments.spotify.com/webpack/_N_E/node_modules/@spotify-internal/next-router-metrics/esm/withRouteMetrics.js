var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as React from 'react';
import Router, { withRouter } from 'next/router';
import { Timer } from '@spotify-internal/semantic-metrics';
import App from 'next/app';
import { warn, info } from '@spotify-internal/isomorphic-logger';
const createRouteMetrics = (sendMetric) => {
    const withRouteMetrics = (CustomApp, options = { debug: false }) => {
        class AppWithRouteMetrics extends React.Component {
            static getInitialProps(appContext) {
                return __awaiter(this, void 0, void 0, function* () {
                    if (typeof window === 'undefined' &&
                        appContext.router.route !== '/_error') {
                        AppWithRouteMetrics.startRoute(appContext.router.asPath);
                    }
                    let appProps;
                    if (typeof CustomApp.getInitialProps === 'function') {
                        appProps = yield CustomApp.getInitialProps(appContext);
                    }
                    else {
                        appProps = yield App.getInitialProps(appContext);
                    }
                    return appProps;
                });
            }
            static startRoute(url) {
                AppWithRouteMetrics.timers[url] = Timer.start();
            }
            componentDidMount() {
                Router.events.on('routeChangeStart', AppWithRouteMetrics.startRoute);
                Router.events.on('routeChangeComplete', this.endRoute);
            }
            componentWillUnmount() {
                Router.events.off('routeChangeStart', AppWithRouteMetrics.startRoute);
                Router.events.off('routeChangeComplete', this.endRoute);
                AppWithRouteMetrics.timers = {};
            }
            endRoute(url) {
                const router = typeof window === 'undefined' ? this.props.router : Router.router;
                if (!router) {
                    delete AppWithRouteMetrics.timers[url];
                    return;
                }
                const route = router.route;
                try {
                    const timer = AppWithRouteMetrics.timers[url];
                    if (!timer) {
                        return;
                    }
                    const time = timer.end();
                    delete AppWithRouteMetrics.timers[url];
                    if (options.debug) {
                        info(`withRouteMetrics: Reporting time metrics for url '${url}' (route '${route}'): ${time.milliseconds}ms`);
                    }
                    sendMetric({
                        metric_type: 'timer',
                        what: 'route-time-nanos',
                        value: time.nanoseconds,
                        tags: {
                            route,
                        },
                    });
                }
                catch (err) {
                    if (options.debug) {
                        warn(`withRouteMetrics: Failed while reporting time metrics for url '${url}' (route '${route}') due to '${err}'`);
                    }
                }
            }
            render() {
                const { router } = this.props;
                if (typeof window === 'undefined') {
                    this.endRoute(router.asPath);
                }
                return React.createElement(CustomApp, Object.assign({}, this.props));
            }
        }
        AppWithRouteMetrics.timers = {};
        return withRouter(AppWithRouteMetrics);
    };
    return withRouteMetrics;
};
export { createRouteMetrics };
//# sourceMappingURL=withRouteMetrics.js.map