/**
 * This module was automatically generated by `ts-interface-builder`
 */
import * as t from 'ts-interface-checker';
// tslint:disable:object-literal-key-quotes
export var RCProperties = t.iface([], {
    version: 'string',
    properties: t.array('RCPublishProperty'),
});
export var RCPublishProperty = t.iface([], {
    name: 'string',
    description: 'string',
    enumSpec: t.opt('RCPublishEnumSpec'),
    boolSpec: t.opt('RCPublishBoolSpec'),
    intSpec: t.opt('RCPublishIntSpec'),
});
export var RCPublishEnumSpec = t.iface([], {
    default: 'string',
    values: t.array('string'),
});
export var RCPublishBoolSpec = t.iface([], {
    default: 'boolean',
});
export var RCPublishIntSpec = t.iface([], {
    default: 'number',
    lower: 'number',
    upper: 'number',
});
export var RCResolverProperty = t.iface([], {
    name: 'string',
    groupId: t.opt('string'),
    clientId: t.opt('string'),
    boolValue: t.opt(t.iface([], {
        value: 'boolean',
    })),
    intValue: t.opt(t.iface([], {
        value: 'number',
    })),
    enumValue: t.opt(t.iface([], {
        value: 'string',
    })),
});
var exportedTypeSuite = {
    RCProperties: RCProperties,
    RCPublishProperty: RCPublishProperty,
    RCPublishEnumSpec: RCPublishEnumSpec,
    RCPublishBoolSpec: RCPublishBoolSpec,
    RCPublishIntSpec: RCPublishIntSpec,
    RCResolverProperty: RCResolverProperty,
};
export default exportedTypeSuite;
//# sourceMappingURL=types-ti.js.map