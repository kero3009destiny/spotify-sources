'use strict';
var Harmony = require('./_internal/lib/harmony');
var Client = require('./client');
var Streamer = require('./streamer');
var Controller = require('./controller');

// Enums
var DeviceType = require('./types/device_type');
var Event = require('./types/event');
var Errors = require('./types/errors');
var ErrorSource = require('./types/error_source');
var KeySystem = require('spotify-playback/types/keysystem');
var RepeatMode = require('./types/repeat_mode');
var Robustness = require('spotify-playback/types/robustness');

module.exports = {
  // Backwards compatibility exports
  Client: Client,
  Streamer: Streamer,
  Controller: Controller,

  DeviceType: DeviceType,
  Event: Event,
  Error: Errors,
  ErrorSource: ErrorSource,
  KeySystem: KeySystem,
  RepeatMode: RepeatMode,
  Robustness: Robustness,

  // Entrypoint
  create: function(options) {
    var _options = options || {};

    if (_options.hidden) {
      _options.client.hidden = true;
    }
    if (_options.hidden && !_options.onlyLocalState) {
      _options.client.playTokenLostBehavior = 'stop';
    } else {
      _options.client.playTokenLostBehavior = 'pause';
    }

    var client = Client.create(_options.client);
    var streamer = null;

    var streamerOptions = _options.streamer || {};
    var controllerOptions = _options.controller || {};
    if (streamerOptions.disabled) {
      // Observer Mode only.
      _options.hidden = true;
      _options.onlyLocalState = false;
      _options.claimInactivePlayerStates = false;
      controllerOptions.enableWithoutStreamer = true;
    } else {
      // Default: Local Playback and Observer Mode.
      streamer = Streamer.forClient(client, streamerOptions);
      controllerOptions.autoregister = false;

      if (_options.onlyLocalState) {
        // Local Playback Mode Only.
        _options.preferControllerState = false;
        controllerOptions.decorateTrackWindow = false;
        controllerOptions.disableProgress = true;
      }
    }
    var controller = Controller.forClient(client, controllerOptions);

    return Harmony.create({
      client: client,
      streamer: streamer,
      controller: controller,

      hidden: _options.hidden,
      onlyLocalState: _options.onlyLocalState,
      preferControllerState: _options.preferControllerState,
      claimInactivePlayerStates: _options.claimInactivePlayerStates,
      disconnectBeforeUnload: _options.disconnectBeforeUnload,
      enableControllerWithoutStreamer: controllerOptions.enableWithoutStreamer
    });
  }
};
