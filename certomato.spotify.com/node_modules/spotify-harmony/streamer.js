'use strict';

var Promise = require('spotify-promise-plus');
var KeySystem = require('spotify-playback/types/keysystem');
var Playback = require('spotify-playback');
var ListPlayer = require('spotify-playback/lib/listplayer');

var TPServiceClient = require('./_internal/lib/tp_service/client');
var TPServiceContext = require('./_internal/lib/tp_service/context');

var ManifestFormat = require('./_internal/types/manifest_format');

var HarmonyStreamer = require('./_internal/lib/streamer');

function createForClient(client, options) {
  var _options = options || {};
  var sdkId = client.getSDKId();
  var transport = client.getPublicTransport();
  var logger = client.getLogger();
  var abbaClient = client.getABBAClient();
  var descriptor = client.getDeviceDescriptor();

  var initialVolume = 'initialVolume' in _options ? _options.initialVolume : 1;

  _options.sdkId = client.getUntaggedSDKId();
  _options.logger = logger;

  var playerPromise = Playback
    .createACMEPlayer(transport, _options)
    .then(function(obj) {
      // Unpack the player.
      return obj.player;
    });

  var keySystemConfiguration = playerPromise
    .then(function(player) {
      return player.getKeySystemInfo();
    })
    .then(function(keySystemInfo) {
      return {
        keySystem: keySystemInfo.keySystem,
        supportsVideo: !!keySystemInfo.videoFormats.length
      };
    })
    .catch(function() {
      // Default in case there's an issue with the KeySystem.
      return {
        keySystem: '',
        supportsVideo: false
      };
    });

  var descriptorPromise = Promise.all([descriptor, keySystemConfiguration])
    .spread(function(_desc, ksConf) {
      // Add external podcasts if podcasts are enabled.
      if (
        _desc.getCapability('audio_podcasts') &&
        !_options.disableExternalFiles
      ) {
        _desc.appendManifestFormat(ManifestFormat.FILE_URLS_EXTERNAL);
      }

      // Add the audio file formats
      if (
        ksConf.keySystem === KeySystem.WIDEVINE &&
        !_options.preferMultiDRMFormat
      ) {
        _desc.appendManifestFormat(
          ManifestFormat.FILE_IDS_MP4,
          ManifestFormat.FILE_IDS_MP4_DUAL
        );
      } else {
        _desc.appendManifestFormat(
          ManifestFormat.FILE_IDS_MP4_DUAL,
          ManifestFormat.FILE_IDS_MP4
        );
      }

      // Add the video file formats, if supported
      if (ksConf.supportsVideo && _desc.getCapability('video_playback')) {
        _desc.appendManifestFormat(ManifestFormat.MANIFEST_IDS_VIDEO);
      }
      return _desc;
    });

  // List Player
  var listPlayer = ListPlayer.create({
    trackPlayer: playerPromise
  });

  // TP-API Client
  var tpApiClient = TPServiceClient.create({
    ListClass: TPServiceContext,
    clientVersion: sdkId,
    transport: transport,
    logger: logger,
    listPlayer: listPlayer,
    descriptor: descriptorPromise,
    endpoint: _options.endpoint,
    abbaClient: abbaClient,
    initialVolume: initialVolume
  });

  return new HarmonyStreamer({
    client: client,
    descriptor: descriptorPromise,
    listPlayer: listPlayer,
    tpApiClient: tpApiClient,
    playerPromise: playerPromise,
    initialVolume: initialVolume
  });
}

module.exports = {

  forClient: createForClient,

  of: function(item) {
    return item._streamer;
  }

};
