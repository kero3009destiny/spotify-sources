'use strict';

/**
 * Exports a function that generates an ID using either crypto (if available)
 * or Math.random.
 */

var Base62 = require('spotify-crypto/base62');

// Check whether we have the required APIs to use the Web Crypto based ID
// generator.
var hasAPI = typeof global.Uint8Array === 'function' &&
             typeof global.crypto !== 'undefined' &&
             typeof global.crypto.getRandomValues === 'function';

/**
 * Generates an ID using Web Crypto.
 *
 * @return {string} The generated ID.
 */
function generateIdWithCrypto() {
  var numbers = new global.Uint8Array(16);
  global.crypto.getRandomValues(numbers);
  var id = Base62.toHex(numbers.join(''), 40);
  return id.slice(0, 40);
}

/**
 * Generates an ID Math.random.
 *
 * @return {string} The generated ID.
 */
function generateIdWithRandom() {
  var numbers = new Array(27);
  var l = numbers.length;
  while (l--) {
    numbers[l] = Math.floor(Math.random() * (9 - 1));
  }
  var id = Base62.toHex(numbers.join(''), 40);
  return id;
}

var generate = hasAPI ? generateIdWithCrypto : generateIdWithRandom;

/**
 * Used as the LocalStorage key for a generated ID.
 *
 * @const
 */
var DEFAULT_DEVICE_ID_KEY = '_spharmony_device_id';

/**
 * Utility function that is used to generate an id.
 *
 * @param {string} maybeId If set to a non-empty string, this value is
 *     immediately returned. Otherwise, the function will generate and store an
 *     id.
 * @param {boolean} noCached When set to true, the function will always return a
 *     new ID when it's called, bypassing any generated ids.
 * @return {string} The generated ID.
 */
function getDeviceId(maybeId, noCached) {
  if (maybeId && typeof maybeId === 'string') {
    return maybeId;
  }
  if (noCached) {
    return generate();
  }
  var stored = global.localStorage.getItem(DEFAULT_DEVICE_ID_KEY);
  if (!stored) {
    stored = generate();
    global.localStorage.setItem(DEFAULT_DEVICE_ID_KEY, stored);
  }
  return stored;
}

module.exports = {
  get: getDeviceId,
  generate: generate,
  // Expose for unit tests.
  generateWithCrypto: generateIdWithCrypto,
  generateWithRandom: generateIdWithRandom
};

