'use strict';

var debugEnum = require('spotify-debug-tools/debug_enum');

/**
 * The various events that can be emitted from the module.
 *
 * @enum {string}
 */
var Event = {
  // Native Events
  WINDOW_BEFORE_UNLOAD: 'beforeunload',

  // Harmony Client Events
  CLIENT_AUTHENTICATED: 'authenticated',
  CLIENT_AUTHENTICATION_ERROR: 'authentication_error',
  CLIENT_BEFORE_DISCONNECT: 'before_disconnect',
  CLIENT_BEFORE_OFFLINE_DISCONNECT: 'before_offline_disconnect',
  CLIENT_CONNECTED: 'connected',
  CLIENT_CONNECTION_ERROR: 'connection_error',
  CLIENT_DEVICE_DESCRIPTOR_CHANGED: 'descriptor_changed',
  CLIENT_ERROR: 'error',
  CLIENT_LOGGED_OUT: 'logged_out',
  CLIENT_PRODUCT_STATE_CHANGED: 'product_state_changed',
  CLIENT_RECONNECTED: 'reconnected',
  CLIENT_RECONNECTING: 'reconnecting',
  CLIENT_UNRECOVERABLE_FAILURE: 'unrecoverable_failure',

  // Connect API Client
  CONNECT_API_DEREGISTERED: 'deregistered',
  CONNECT_API_DEVICE_STATE_CHANGED: 'device_state_changed',
  CONNECT_API_DEVICES_CHANGED: 'devices_changed',
  CONNECT_API_MAX_SUBSCRIPTIONS_REACHED: 'max_subscriptions_reached',
  CONNECT_API_PLAYER_STATE_CHANGED: 'player_state_changed',
  CONNECT_API_REGISTERED: 'registered',

  // Controller Events
  CONTROLLER_DEREGISTERED: 'deregistered',
  CONTROLLER_DEVICES_CHANGED: 'devices_changed',
  CONTROLLER_DEVICE_INFO_CHANGED: 'device_info_changed',
  CONTROLLER_MAX_SUBSCRIPTIONS_REACHED: 'max_subscriptions_reached',
  CONTROLLER_PROGRESS: 'progress',
  CONTROLLER_REGISTERED: 'registered',
  CONTROLLER_STATE_CHANGED: 'state_changed',

  // DeviceDescriptor
  DEVICE_DESCRIPTOR_CHANGED: 'descriptor_changed',

  // Harmony Streamer
  STREAMER_AUTOPLAY_FAILED: 'autoplay_failed',
  STREAMER_BEFORE_VOLUME_CHANGE: 'before_volume_change',
  STREAMER_BUFFERING_END: 'buffering_end',
  STREAMER_BUFFERING_START: 'buffering_start',
  STREAMER_CONTEXT_ENDED: 'context_ended',
  STREAMER_DEREGISTERED: 'deregistered',
  STREAMER_DEVICE_INFO_CHANGED: 'device_info_changed',
  STREAMER_DURATION_CHANGED: 'duration_changed',
  STREAMER_ERROR: 'error',
  STREAMER_LOAD_VIDEO: 'load_video',
  STREAMER_LOGGED_OUT: 'logged_out',
  STREAMER_MAX_LIST_ERRORS_REACHED: 'max_list_errors_reached',
  STREAMER_MAX_SUBSCRIPTIONS_REACHED: 'max_subscriptions_reached',
  STREAMER_PLAYBACK_CAPPED: 'playback_capped',
  STREAMER_PLAYER_INITIALIZATION_DONE: 'player_initialization_done',
  STREAMER_PLAYER_INITIALIZATION_FAILED: 'player_initialization_failed',
  STREAMER_POSITION_CHANGED: 'position_changed',
  STREAMER_PROGRESS: 'progress',
  STREAMER_REGISTERED: 'registered',
  STREAMER_REGISTRATION_ABORTED: 'registration_aborted',
  STREAMER_REGISTRATION_ERROR: 'registration_error',
  STREAMER_REGISTRATION_UPDATED: 'registration_updated',
  STREAMER_STATE_CHANGED: 'state_changed',
  STREAMER_STOPPED_VIDEO: 'stopped_video',
  STREAMER_TRACK_LOADED: 'track_loaded',
  STREAMER_TRACK_ENDED: 'track_ended',
  STREAMER_VIDEO_ELEMENT_APPENDED: 'video_element_appended',
  STREAMER_VIDEO_ELEMENT_REMOVED: 'video_element_removed',

  // Playback State Observer
  PLAYBACK_STATE_OBSERVER_STATE_CHANGED: 'state_changed',

  // Product State Observer
  PRODUCT_STATE_OBSERVER_PRODUCT_STATE_CHANGED: 'product_state_changed',

  // TP API Client
  TP_API_DEVICE_UPDATED: 'device_updated',
  TP_API_DEREGISTERED: 'deregistered',
  TP_API_ERROR: 'error',
  TP_API_LOGOUT: 'logout',
  TP_API_MAX_SUBSCRIPTIONS_REACHED: 'max_subscriptions_reached',
  TP_API_READY: 'ready', // deprecated
  TP_API_REGISTERED: 'registered',
  TP_API_REGISTRATION_ABORTED: 'registration_aborted',
  TP_API_REGISTRATION_UPDATED: 'registration_updated',
  TP_API_STATE_CHANGED: 'state_changed',
  TP_API_STATE_CLEARED: 'state_cleared'
};

module.exports = debugEnum(Event);
