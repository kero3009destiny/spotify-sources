'use strict';

var EDGE_UA_REGEXP = /(edge)[\s\/:]([\w\d\.]+)/;

var UA_REGEXP = new RegExp('(opera|ie|firefox|chrome|trident|crios|version)' +
  '[\\s\/:]([\\w\\d\\.]+)?.*?(safari|(?:rv[\\s\\/:]|version[\\s\\/:])' +
  '([\\w\\d\\.]+)|$)');

/**
 * Used for caching parsed user agents to avoid multiple parsing.
 *
 * @type {Object.<string, Object>>}
 * @private
 */
var cache = {};


/**
 * Parse the userAgent and platformStr and return a deviceInfo structure.
 *
 * @param  {string} userAgent   String like navigator.userAgent
 * @param  {string} platformStr String like navigator.platform
 * @return {Object} deviceInfo structure with name, version and platform.
 */
module.exports = function(userAgent, platformStr) {
  var ua = userAgent.toLowerCase();
  var platform = (platformStr ? platformStr.toLowerCase() : '');

  var cacheKey = ua + ':' + platform;
  if (cacheKey in cache) {
    return cache[cacheKey];
  }

  // chrome is included in the edge UA, so need to check for edge first,
  // before checking if it's chrome.
  var UA = ua.match(EDGE_UA_REGEXP);
  if (!UA) {
    UA = ua.match(UA_REGEXP) || [null, 'unknown', 0];
  }
  if (UA[1] === 'trident') {
    UA[1] = 'ie';
    if (UA[4]) UA[2] = UA[4];
  } else if (UA[1] === 'crios') {
    UA[1] = 'chrome';
  }
  platform = ua.match(/ip(?:ad|od|hone)/) ?
    'ios' :
    (ua.match(/(?:webos|android)/) ||
     ua.match(/mac|win|linux|cros/) ||
    ['other'])[0];
  if (platform === 'win') {
    platform = 'windows';
  }

  var parsed = {
    name: (UA[1] === 'version') ? UA[3] : UA[1],
    version: parseFloat((UA[1] === 'opera' && UA[4]) ? UA[4] : UA[2]),
    platform: platform || 'unknown'
  };

  cache[cacheKey] = parsed;
  return parsed;
};
