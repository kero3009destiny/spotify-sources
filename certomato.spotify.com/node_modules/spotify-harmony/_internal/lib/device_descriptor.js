'use strict';

var inherit = require('spotify-inheritance/inherit');
var EventEmitter = require('spotify-eventemitter');
var Event = require('../types/event');

function jsonClone(obj) {
  return JSON.parse(JSON.stringify(obj));
}

function DeviceDescriptor(options) {
  EventEmitter.call(this);

  if (!options) {
    throw new TypeError('Invalid argument `options`.');
  }
  if (!options.id) {
    throw new TypeError('Argument `options.id` is required.');
  }
  if (!options.name || !options.model || !options.type) {
    throw new TypeError('Incomplete `options` value.');
  }

  /**
   * The device id.
   *
   * @type {string}
   * @protected
   */
  this._id = options.id;

  /**
   * The device type.
   *
   * @type {module:spotify-harmony/types/device_type}
   * @protected
   */
  this._type = options.type;

  /**
   * The brand.
   *
   * @type {string}
   * @protected
   */
  this._brand = options.brand;

  /**
   * The model.
   *
   * @type {string}
   * @protected
   */
  this._model = options.model;

  /**
   * The name.
   *
   * @type {string}
   * @protected
   */
  this._name = options.name;

  /**
   * The value of the `platform` field that will be used for logs.
   *
   * @type {string}
   * @protected
   */
  this._platformIdentifier = options.platform_identifier;

  /**
   * A user defined string that determines the version of the client.
   *
   * @type {string}
   * @protected
   */
  this._platformVersion = options.platform_version;

  /**
   * A map of the device specific metadata.
   *
   * @type {Object.<string, string>}
   * @protected
   */
  this._metadata = options.metadata || {};

  /**
   * A map of the device capabilities.
   *
   * @type {Object.<string, string>}
   * @protected
   */
  this._capabilities = options.capabilities || {
    manifest_formats: []
  };
}
inherit(DeviceDescriptor, EventEmitter);

DeviceDescriptor.create = function(options) {
  return new DeviceDescriptor(options);
};

DeviceDescriptor.prototype.getId = function() {
  return this._id;
};

DeviceDescriptor.prototype.setCapability = function(key, value) {
  switch (key) {
    case 'manifest_formats':
      throw new TypeError('Cannot change capability "manifest_formats"');
    default:
      this._capabilities[key] = value;
      this.emit(Event.DEVICE_DESCRIPTOR_CHANGED, {
        descriptor: this.toJSON()
      });
      return true;
  }
};

DeviceDescriptor.prototype.getCapability = function(key) {
  switch (key) {
    case 'manifest_formats':
      throw new TypeError('Use `descriptor.getManifestFormats()`.');
    default:
      return this._capabilities[key];
  }
};

DeviceDescriptor.prototype.setName = function(name) {
  this._name = name;
  this.emit(Event.DEVICE_DESCRIPTOR_CHANGED, {
    descriptor: this.toJSON()
  });
  return true;
};

DeviceDescriptor.prototype.getName = function() {
  return this._name;
};

DeviceDescriptor.prototype.getPlatformIdentifier = function() {
  return this._platformIdentifier ||
    ['Partner', this._brand, this._model].join(' ');
};

DeviceDescriptor.prototype.getPlatformVersion = function() {
  return this._platformVersion;
};

DeviceDescriptor.prototype.getManifestFormats = function() {
  return this._capabilities.manifest_formats || [];
};

DeviceDescriptor.prototype.appendManifestFormat = function() {
  var formats = Array.prototype.slice.call(arguments);
  var manifestFormats = this._capabilities.manifest_formats;
  if (!Array.isArray(manifestFormats)) {
    return;
  }
  manifestFormats.push.apply(manifestFormats, formats);
};

DeviceDescriptor.prototype.toJSON = function() {
  return {
    id: this._id,
    type: this._type,
    brand: this._brand,
    model: this._model,
    name: this._name,
    platform_identifier: this._platformIdentifier,
    platform_version: this._platformVersion,
    metadata: jsonClone(this._metadata),
    capabilities: jsonClone(this._capabilities)
  };
};

DeviceDescriptor.prototype.toTrackPlaybackJSON = function() {
  return {
    device_id: this._id,
    device_type: this._type,
    brand: this._brand,
    model: this._model,
    name: this._name,
    platform_identifier: this._platformIdentifier,
    platform_version: this._platformVersion,
    metadata: jsonClone(this._metadata),
    capabilities: jsonClone(this._capabilities)
  };
};

module.exports = DeviceDescriptor;
