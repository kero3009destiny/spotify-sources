'use strict';

var URI = require('spotify-liburi');

var ManifestFormat = require('../../types/manifest_format');

var HTTPS_EXP = /^https:\/\//;
var FILE_ID_EXP = /^(.+?)\/([^./]+)(\.[^/]*)?$/;

var _containerFormat = {};
_containerFormat[ManifestFormat.FILE_URLS_MP3] = 'MP3';
_containerFormat[ManifestFormat.FILE_URLS_EXTERNAL] = 'MP3';
_containerFormat[ManifestFormat.FILE_IDS_MP4] = 'MP4';
_containerFormat[ManifestFormat.FILE_IDS_MP4_DUAL] = 'MP4';
_containerFormat[ManifestFormat.MANIFEST_IDS_VIDEO] = 'MANIFEST';

/**
 * Resolves a playable manifest from a file.
 *
 * @param {Array.<string>} manifestFormats An array of manifest formats,
 *     supported, ordered in preference.
 * @param {module:spotify-tpapi-client/types.StateTrack} item The track.
 * @return {Object} The resolved file, or null if it cannot be resolved.
 */
function resolveFile(manifestFormats, item) {
  var manifest = item.manifest;
  var uri = item.metadata.uri;
  var uriObj = URI.from(uri);
  var isAd = !!(
    uriObj &&
    (uriObj.type === URI.Type.AD || uriObj.type === URI.Type.INTERRUPTION)
  );

  for (var i = 0, l = manifestFormats.length; i < l; i++) {
    var format = manifestFormats[i];
    if (!(format in manifest)) {
      continue;
    }

    var files = manifest[format];
    if (!files.length) {
      continue;
    }

    var file = files[0];
    if (!file.file_id && !file.file_url) {
      continue;
    }

    var fileURL = file.file_url || null;
    var fileId = file.file_id || '';

    // Special case: ads are delivered with a file_url, but we do not want to
    // play directly from that URL. Instead, we want to resolve the ad file id
    // through Storage Resolve, so we extract the ad id from the URL and use
    // that as the file id.
    if (format === ManifestFormat.FILE_URLS_MP3 && isAd) {
      fileId = fileURL.replace(FILE_ID_EXP, '$2');
      if (fileId === fileURL) {
        // The URL is not what we expected, so we can't use this file.
        continue;
      }
      // We set the fileURL to null so we are forced to play the fileId.
      fileURL = null;
    }

    if (fileURL && !HTTPS_EXP.test(fileURL)) {
      // This file URL is invalid. We null it so it can't be used.
      fileURL = null;
    }

    if (!fileId && !fileURL) {
      // Nothing can be played from this file.
      continue;
    }

    var mediaType;
    if (item.track_type) {
      mediaType = item.track_type.toLowerCase();
    } else {
      // Guess via the manifest format.
      mediaType = format === ManifestFormat.MANIFEST_IDS_VIDEO ?
        'video' :
        'audio';
    }

    return {
      uri: uri,
      uriType: uriObj && uriObj.type,

      fileId: fileId,
      resolvedURL: fileURL,

      mediaType: mediaType,
      format: _containerFormat[format],
      bitrate: file.bitrate || 128000,

      impressionURL: file.impression_url,
      impressionURLs: file.impression_urls,

      isAd: isAd,
      noLog: false,
      noTSV: isAd,
      noStats: isAd,
      noManifest: !!file.file_url,
      playable: true
    };
  }

  return null;
}

module.exports = resolveFile;
