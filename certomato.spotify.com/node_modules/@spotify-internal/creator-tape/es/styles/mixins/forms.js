//
// Forms
// --------------------------------------------------
import { css } from 'styled-components';
import { white, gray10, gray20, gray40, gray45, gray60, gray75, gray90, gray95, screenXsMax, screenSmMin, spacer4, spacer12, spacer16, spacer24, spacer32, failure } from '../variables';
import { typeStyleBody2 } from './type';

var borderColor = function borderColor(color) {
  var persistentBorder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  return persistentBorder ? css(["box-shadow:inset 0 0 0 1px ", ";"], color) : css(["@media (max-width:", "){border-color:", ";}@media (min-width:", "){box-shadow:inset 0 0 0 1px ", ";}"], screenXsMax, color, screenSmMin, color);
};

var formControlMobileStyles = function formControlMobileStyles() {
  return css(["border-radius:0;border-bottom:1px solid;padding-top:10px;padding-bottom:9px;&:focus,&:hover:focus{padding-bottom:8px;border-bottom-width:2px;}"]);
}; // Shared styles for inputs, textareas, selects


export var formControlBase = function formControlBase() {
  return css(["-webkit-appearance:none;background-image:none;border:0;display:block;", ";transition:box-shadow ease-in-out 0.1s,color fade 0.1s;width:100%;&::placeholder{opacity:1;}&:focus,&:hover:focus{outline:0;}&:disabled,&[readonly]{cursor:not-allowed;opacity:1;}"], typeStyleBody2());
}; // Styles for inputs only

export var formControlBaseInput = function formControlBaseInput() {
  return css(["@media (max-width:", "){", ";}@media (min-width:", "){border-radius:", ";padding:14px;}"], screenXsMax, formControlMobileStyles(), screenSmMin, spacer4);
}; // Styles for textareas only

export var formControlBaseTextarea = function formControlBaseTextarea() {
  return css(["border-radius:", ";padding:14px;"], spacer4);
}; // Styles for selects only

export var formControlBaseSelect = function formControlBaseSelect() {
  return css(["appearance:none;box-shadow:none;text-indent:0.01px;text-overflow:'';&::-ms-expand{display:none;}@media (max-width:", "){", ";padding-right:", ";}@media (min-width:", "){border-radius:", ";padding:14px 44px 14px 14px;}"], screenXsMax, formControlMobileStyles(), spacer24, screenSmMin, spacer4);
}; // Styles the down arrow icon on FormSelect and Dropdown

export var formChevronDown = function formChevronDown() {
  return css(["color:", ";pointer-events:none;position:absolute;@media (max-width:", "){right:0;top:", ";}@media (min-width:", "){right:14px;top:", ";}"], gray60, screenXsMax, spacer12, screenSmMin, spacer16);
}; // Shared styles for radios + checkboxes

export var formCheck = function formCheck() {
  return css(["align-items:center;display:flex;padding-bottom:", ";padding-top:", ";min-height:", ";"], spacer4, spacer4, spacer32);
};
export var formCheckIndicator = function formCheckIndicator(radius) {
  return css(["background:transparent;border-radius:", ";display:inline-block;height:", ";position:relative;user-select:none;width:", ";flex-shrink:0;align-self:flex-start;top:", ";"], radius, spacer16, spacer16, spacer4);
}; // Light Theme

var themeLightColorDefault = gray10;
var themeLightColorPlaceholder = gray45;
var themeLightColorSelection = gray90;
var themeLightColorDisabled = gray45;
var themeLightBackgroundDefault = white;
var themeLightBackgroundDisabled = gray95;
var themeLightBorderDefault = gray75;
var themeLightBorderFocus = gray10;
var themeLightBorderDisabled = gray75;
var themeLightBorderError = failure; // Dark Theme

var themeDarkColorDefault = white;
var themeDarkColorPlaceholder = gray45;
var themeDarkColorDisabled = gray40;
var themeDarkColorSelection = gray20;
var themeDarkBackgroundDefaultXs = 'transparent';
var themeDarkBackgroundDefault = 'rgba(0, 0, 0, 0.4)';
var themeDarkBackgroundDisabled = gray20;
var themeDarkBorderDefault = gray40;
var themeDarkBorderFocus = white;
var themeDarkBorderDisabled = gray40;
var themeDarkBorderError = failure;
export var formControlTheme = function formControlTheme() {
  var theme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'light';
  var persistentBorder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  // Dark Theme
  if (theme === 'dark') {
    return css(["background-color:", ";", ";color:", ";&:focus,&:hover:focus{", ";}&::placeholder{color:", ";}&::selection{background-color:", ";}&:disabled,&[readonly]{", ";color:", ";@media (min-width:", "){background-color:", ";}}&:invalid,&:invalid:hover{", ";}@media (min-width:", "){background-color:", ";}"], themeDarkBackgroundDefaultXs, borderColor(themeDarkBorderDefault, persistentBorder), themeDarkColorDefault, borderColor(themeDarkBorderFocus, persistentBorder), themeDarkColorPlaceholder, themeDarkColorSelection, borderColor(themeDarkBorderDisabled, persistentBorder), themeDarkColorDisabled, screenSmMin, themeDarkBackgroundDisabled, borderColor(themeDarkBorderError, persistentBorder), screenSmMin, themeDarkBackgroundDefault);
  } // Light Theme


  return css(["background-color:", ";", ";color:", ";&:focus,&:hover:focus{", ";}&::placeholder{color:", ";}&::selection{background-color:", ";}&:disabled,&[readonly]{", ";color:", ";@media (min-width:", "){background-color:", ";}}&:invalid,&:invalid:hover{", ";}"], themeLightBackgroundDefault, borderColor(themeLightBorderDefault, persistentBorder), themeLightColorDefault, borderColor(themeLightBorderFocus, persistentBorder), themeLightColorPlaceholder, themeLightColorSelection, borderColor(themeLightBorderDisabled, persistentBorder), themeLightColorDisabled, screenSmMin, themeLightBackgroundDisabled, borderColor(themeLightBorderError, persistentBorder));
};
export var formControlInputIconTheme = function formControlInputIconTheme() {
  var theme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'light';

  // Dark Theme
  if (theme === 'dark') {
    return css(["color:", ";input:focus + &{color:", ";}input:disabled + &,input[readonly] + &{color:", ";}"], themeDarkBorderDefault, themeDarkBorderFocus, themeDarkBorderDisabled);
  }

  return css(["color:", ";input:focus + &{color:", ";}input:disabled + &,input[readonly] + &{color:", ";}"], themeLightBorderDefault, themeLightBorderFocus, themeLightBorderDisabled);
};
export var formControlErrorTheme = function formControlErrorTheme() {
  var theme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'light';
  var persistentBorder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var errorTheme = theme === 'dark' ? themeDarkBorderError : themeLightBorderError;
  return css(["&,&:hover{", ";}"], borderColor(errorTheme, persistentBorder));
};