import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
//
// Overlays: Dialogs, Tooltips, Popovers, etc
// --------------------------------------------------
import { css } from 'styled-components';
import { triangle } from './triangle';
import { white, gray10, gray20, gray95, spacer4, spacer8, spacer12, spacer24, spacer48, screenSmMin, fontWeightBook, zIndexDialogBackdrop, zIndexDialog } from '../variables';
var overlayBoxShadow = "0 ".concat(spacer4, " ").concat(spacer12, " 0 rgba(0, 0, 0, 0.2)");
var overlayBorderColor = "rgba(0, 0, 0, 0.1)";
export var overlayDirections = {
  top: 'top',
  topRight: 'topRight',
  topLeft: 'topLeft',
  left: 'left',
  leftTop: 'leftTop',
  leftBottom: 'leftBottom',
  bottom: 'bottom',
  bottomLeft: 'bottomLeft',
  bottomRight: 'bottomRight',
  right: 'right',
  rightTop: 'rightTop',
  rightBottom: 'rightBottom'
};
/* TODO - move these specific theme checks back to their home components and just pass them in as a variable to the individual mixins. We handle this properly in mixins/forms.js, as an example */

var isDarkTheme = function isDarkTheme(props) {
  return props.theme.popover === 'dark' || props.theme.tooltip === 'dark' || props.theme.dropdownList === 'dark' || props.theme.paginationDropdownList === 'dark';
};

export var overlayBackdrop = function overlayBackdrop() {
  return css(["background-color:rgba(0,0,0,0.4);height:100%;left:0;position:fixed;top:0;width:100%;z-index:", ";"], zIndexDialogBackdrop);
};
export var overlayBackdropCentered = function overlayBackdropCentered() {
  return css(["align-items:center;display:flex;justify-content:center;"]);
};
export var overlayBase = function overlayBase() {
  return css(["background:", ";border-radius:", ";box-shadow:", ";color:", ";font-weight:", ";text-align:left;"], function (props) {
    return isDarkTheme(props) ? gray20 : white;
  }, spacer8, overlayBoxShadow, function (props) {
    return isDarkTheme(props) ? gray95 : gray10;
  }, fontWeightBook);
};
export var dialog = function dialog() {
  return css(["", ";display:flex;flex-direction:column;max-height:90vh;max-width:calc(100% - ", ");z-index:", ";@media (min-width:", "){max-height:80vh;}"], overlayBase(), spacer48, zIndexDialog, screenSmMin);
};
export var overlay = function overlay() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$maxWidth = _ref.maxWidth,
      maxWidth = _ref$maxWidth === void 0 ? '296px' : _ref$maxWidth;

  return css(["", ";border:1px solid ", ";cursor:default;display:inline-block;max-width:", ";position:relative;"], overlayBase(), function (props) {
    return isDarkTheme(props) ? 'transparent' : overlayBorderColor;
  }, maxWidth);
};
var arrowBase = {
  border: overlayBorderColor,
  color: function color(props) {
    return isDarkTheme(props) ? gray20 : white;
  },
  width: spacer8
};
export var overlayArrow = function overlayArrow(direction) {
  switch (direction) {
    case 'top':
      return triangle(_objectSpread({}, arrowBase, {
        offset: 'center',
        position: 'top'
      }));

    case 'topLeft':
      return triangle(_objectSpread({}, arrowBase, {
        offset: spacer8,
        position: 'top'
      }));

    case 'topRight':
      return triangle(_objectSpread({}, arrowBase, {
        offset: "calc(100% - ".concat(spacer24, ")"),
        position: 'top'
      }));

    case 'bottom':
      return triangle(_objectSpread({}, arrowBase, {
        offset: 'center',
        position: 'bottom'
      }));

    case 'bottomLeft':
      return triangle(_objectSpread({}, arrowBase, {
        offset: spacer8,
        position: 'bottom'
      }));

    case 'bottomRight':
      return triangle(_objectSpread({}, arrowBase, {
        offset: "calc(100% - ".concat(spacer24, ")"),
        position: 'bottom'
      }));

    case 'left':
      return triangle(_objectSpread({}, arrowBase, {
        offset: 'center',
        position: 'left'
      }));

    case 'leftTop':
      return triangle(_objectSpread({}, arrowBase, {
        offset: spacer8,
        position: 'left'
      }));

    case 'leftBottom':
      return triangle(_objectSpread({}, arrowBase, {
        offset: "calc(100% - ".concat(spacer24, ")"),
        position: 'left'
      }));

    case 'right':
      return triangle(_objectSpread({}, arrowBase, {
        offset: 'center',
        position: 'right'
      }));

    case 'rightTop':
      return triangle(_objectSpread({}, arrowBase, {
        offset: spacer8,
        position: 'right'
      }));

    case 'rightBottom':
      return triangle(_objectSpread({}, arrowBase, {
        offset: "calc(100% - ".concat(spacer24, ")"),
        position: 'right'
      }));

    default:
      throw new Error("Arrow direction \"".concat(direction, "\" is not supported."));
  }
};