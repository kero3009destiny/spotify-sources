import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

/* eslint-disable jsx-a11y/label-has-for */
import React from 'react';
import PropTypes from 'prop-types';
import { ThemeProvider } from 'styled-components';
import Group from './Group';
import LabelGroup from './LabelGroup';
import Label from './Label';
import Optional from './Optional';
import Required from './Required';
import Popover from './Popover';
var propTypes = {
  children: PropTypes.node,
  indicator: PropTypes.oneOf(['optional', 'required']),
  label: PropTypes.node,
  labelFor: PropTypes.string,
  popover: PropTypes.node,
  inline: PropTypes.bool,
  theme: PropTypes.shape({
    formGroup: PropTypes.oneOf(['dark'])
  })
};
var defaultProps = {
  theme: {}
};
export default function FormGroup(_ref) {
  var children = _ref.children,
      indicator = _ref.indicator,
      label = _ref.label,
      labelFor = _ref.labelFor,
      popover = _ref.popover,
      theme = _ref.theme,
      props = _objectWithoutProperties(_ref, ["children", "indicator", "label", "labelFor", "popover", "theme"]);

  var indicatorMap = {
    optional: React.createElement(Optional, null, "(Optional)"),
    required: React.createElement(Required, {
      title: "required"
    }, "*")
  };
  return React.createElement(ThemeProvider, {
    theme: theme
  }, React.createElement(Group, props, label && React.createElement(LabelGroup, null, React.createElement(Label, {
    htmlFor: labelFor
  }, label), indicatorMap[indicator], popover && React.createElement(Popover, null, popover)), children));
}
FormGroup.darkTheme = {
  formGroup: 'dark'
};
FormGroup.propTypes = propTypes;
FormGroup.defaultProps = defaultProps;