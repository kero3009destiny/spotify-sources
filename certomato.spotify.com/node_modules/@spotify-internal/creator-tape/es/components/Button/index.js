import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React from 'react';
import PropTypes from 'prop-types';
import { ThemeProvider } from 'styled-components';
import { buttonSizes } from '../../styles/mixins/buttons';
import ButtonElement from './Button';
var propTypes = {
  buttonSize: PropTypes.oneOf(['sm', 'md', 'lg']),
  component: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),
  condensed: PropTypes.bool,

  /** optional, if you want you button to be an anchor element (`<a>`) */
  href: PropTypes.string,
  theme: PropTypes.shape({
    button: PropTypes.oneOf(['dark'])
  }),
  variantRules: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string.isRequired, PropTypes.func.isRequired]).isRequired)
};
var defaultProps = {
  buttonSize: 'md',
  theme: {}
};
export default function Button(_ref) {
  var component = _ref.component,
      theme = _ref.theme,
      elementProps = _objectWithoutProperties(_ref, ["component", "theme"]);

  var propOverrides = {};

  if (!component && elementProps.href) {
    propOverrides.component = 'a';
  }

  if (elementProps.href && elementProps.target === '_blank') {
    propOverrides.rel = 'noopener noreferrer';
  }

  return React.createElement(ThemeProvider, {
    theme: theme
  }, React.createElement(ButtonElement, Object.assign({
    component: component
  }, elementProps, propOverrides)));
}
Object.keys(buttonSizes).forEach(function (size) {
  Button[size] = size;
});
Button.darkTheme = {
  button: 'dark'
};
Button.propTypes = propTypes;
Button.defaultProps = defaultProps;