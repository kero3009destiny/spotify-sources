import PropTypes from 'prop-types';
import React from 'react';
import { css } from 'styled-components';
import Button from '../Button';
import { buttonHover, buttonSizes } from '../../styles/mixins/buttons';
import { white, gray10, gray25, gray40, gray75, gray90 } from '../../styles';

var isDarkTheme = function isDarkTheme(props) {
  return props.theme.button === 'dark';
};

var borderStyle = '1.12pt solid';

var color = function color(props) {
  return isDarkTheme(props) ? white : gray10;
};

var border = function border(props) {
  return isDarkTheme(props) ? gray75 : gray75;
};

var background = function background(props) {
  return isDarkTheme(props) ? 'rgba(24, 24, 24, 0.7)' : 'rgba(255, 255, 255, 0.3)';
};

var colorHover = function colorHover(props) {
  return isDarkTheme(props) ? white : gray10;
};

var borderHover = function borderHover(props) {
  return isDarkTheme(props) ? white : gray10;
};

var colorActive = function colorActive(props) {
  return isDarkTheme(props) ? gray75 : gray40;
};

var borderActive = function borderActive(props) {
  return isDarkTheme(props) ? gray40 : gray75;
};

var colorFocus = function colorFocus(props) {
  return isDarkTheme(props) ? gray90 : gray25;
};

var buttonStroked = css(["background-color:", ";border:", " ", ";color:", ";position:relative;line-height:0.8;&:hover:not(:focus):not(:disabled){", ";border:", " ", ";color:", ";}&:active{&,&:hover{transform:scale(1);border:", " ", ";color:", ";}}&:focus{border:", " ", ";color:", ";}&[disabled],fieldset[disabled] &{background-color:transparent;box-shadow:", " ", ";color:", ";cursor:not-allowed;opacity:0.4;}"], background, borderStyle, border, color, buttonHover(), borderStyle, borderHover, colorHover, borderStyle, borderActive, colorActive, borderStyle, borderActive, colorFocus, borderStyle, borderActive, color);
var propTypes = {
  buttonSize: PropTypes.oneOf(['sm', 'md', 'lg']),
  component: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),

  /** optional, if you want you button to be an anchor element (`<a>`) */
  href: PropTypes.string,
  theme: PropTypes.shape({
    button: PropTypes.oneOf(['dark'])
  })
};
var defaultProps = {
  buttonSize: 'md',
  theme: {}
};
export default function ButtonSecondary(props) {
  return React.createElement(Button, Object.assign({}, props, {
    condensed: false,
    variantRules: buttonStroked
  }));
}
Object.keys(buttonSizes).forEach(function (size) {
  ButtonSecondary[size] = size;
});
ButtonSecondary.darkTheme = Button.darkTheme;
ButtonSecondary.defaultProps = defaultProps;
ButtonSecondary.propTypes = propTypes;