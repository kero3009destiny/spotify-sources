import PropTypes from 'prop-types';
import styled, { css } from 'styled-components';
import { color } from '@spotify-internal/tokens/creator/web/tokens.common';
import { typeStyleDisplay1, typeStyleDisplay2, typeStyleH1, typeStyleH2, typeStyleH3, typeStyleH4, typeStyleBody1, typeStyleBody2, typeStyleBody3, typeStyleBody4, typeStyleCta1, typeStyleCta2, typeStyleCta3, typeStyleCta4, fontWeightBlack, fontWeightBook, fontWeightBold } from '../../styles';
var variants = {
  component: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'small', 'li', 'span'],
  variant: ['display1', 'display2', 'heading1', 'heading2', 'heading3', 'heading4', 'body1', 'body2', 'body3', 'body4', 'cta1', 'cta2', 'cta3', 'cta4'],
  weight: ['book', 'bold', 'black']
};

var weight = function weight(props) {
  switch (props.weight) {
    case 'book':
      return fontWeightBook;

    case 'bold':
      return fontWeightBold;

    case 'black':
      return fontWeightBlack;

    default:
      return undefined;
  }
};

var propTypes = {
  variant: PropTypes.oneOf(variants.variant),

  /** Use a valid CSS color value, like `#000`, `rgba(0,0,0)`, or `black` */
  color: PropTypes.string,
  weight: PropTypes.oneOf(variants.weight),

  /** when true, renders with no bottom padding */
  condensed: PropTypes.bool
};
var defaultProps = {
  variant: 'body2'
}; // If the prop value is a tokenized name (e.g. 'spotifyGreen'), use its hex value.

var adjustedColor = function adjustedColor(props) {
  return color[props.color] || props.color;
}; // eslint-disable-next-line prefer-arrow-callback


var Type = styled.span.withConfig({
  displayName: "Type",
  componentId: "sc-1ko42fc-0"
})(["", ";", ";", ";", ";"], function (props) {
  switch (props.variant) {
    case 'display1':
      return typeStyleDisplay1();

    case 'display2':
      return typeStyleDisplay2();

    case 'heading1':
      return typeStyleH1();

    case 'heading2':
      return typeStyleH2();

    case 'heading3':
      return typeStyleH3();

    case 'heading4':
      return typeStyleH4();

    case 'body1':
      return typeStyleBody1();

    case 'body2':
      return typeStyleBody2();

    case 'body3':
      return typeStyleBody3();

    case 'body4':
      return typeStyleBody4();

    case 'cta1':
      return typeStyleCta1();

    case 'cta2':
      return typeStyleCta2();

    case 'cta3':
      return typeStyleCta3();

    case 'cta4':
      return typeStyleCta4();

    default:
      return undefined;
  }
}, function (props) {
  return props.condensed && css(["padding-bottom:0;"]);
}, function (props) {
  return props.color && css(["color:", ";"], adjustedColor);
}, function (props) {
  return props.weight && css(["font-weight:", ";"], weight);
});
Type.propTypes = propTypes;
Type.defaultProps = defaultProps; // export components

variants.component.forEach(function (key) {
  Type[key] = Type.withComponent(key);
}); // export variants

variants.variant.forEach(function (key) {
  Type[key] = key;
}); // export weights

variants.weight.forEach(function (key) {
  Type[key] = key;
});
/** @component */

export default Type;