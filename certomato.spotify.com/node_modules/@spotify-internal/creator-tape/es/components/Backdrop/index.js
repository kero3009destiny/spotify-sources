import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import styled, { css } from 'styled-components';
import { overlayBackdrop, overlayBackdropCentered } from '../../styles';
var OverlayBackdrop = styled.div.attrs({
  role: 'presentation'
}).withConfig({
  displayName: "Backdrop__OverlayBackdrop",
  componentId: "sc-1h5p1v-0"
})(["", ";", ";"], overlayBackdrop, function (props) {
  return props.center && css(["", ";"], overlayBackdropCentered);
});

var Backdrop =
/*#__PURE__*/
function (_Component) {
  _inherits(Backdrop, _Component);

  function Backdrop() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Backdrop);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Backdrop)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _this.onClick = function (event) {
      if (event.target === _this.element || !_this.element.contains(event.target)) {
        _this.props.onClose(event);
      }
    };

    _this.onKeydown = function (event) {
      if (event.keyCode === 27) {
        _this.props.onClose(event);
      }
    };

    _this.handleRef = function (ref) {
      _this.element = ref;
    };

    return _this;
  }

  _createClass(Backdrop, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      window.addEventListener('keydown', this.onKeydown, true);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('keydown', this.onKeydown, true);
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement(OverlayBackdrop, Object.assign({
        ref: this.handleRef,
        onClick: this.onClick
      }, this.props));
    }
  }]);

  return Backdrop;
}(Component);

Backdrop.propTypes = {
  onClose: PropTypes.func,
  center: PropTypes.bool
};
Backdrop.defaultProps = {
  onClose: function onClose() {}
};
export { Backdrop as default };