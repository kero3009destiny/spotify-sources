import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React from 'react';
import PropTypes from 'prop-types';
import styled, { css, ThemeProvider } from 'styled-components';
import { buttonReset, gray10, gray25, gray40, gray45, gray60, gray75, gray95 } from '../../styles';
var propTypes = {
  /** Icon element wrapper with link, `button`, `a` or React component expected */
  component: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),

  /** application theme */
  theme: PropTypes.shape({
    buttonIcon: PropTypes.oneOf(['dark'])
  })
};
var defaultProps = {
  theme: {}
}; // eslint-disable-next-line prefer-arrow-callback

var ButtonIcon = styled(function ButtonIconComponent(_ref) {
  var _ref$component = _ref.component,
      Component = _ref$component === void 0 ? 'button' : _ref$component,
      theme = _ref.theme,
      props = _objectWithoutProperties(_ref, ["component", "theme"]);

  return React.createElement(ThemeProvider, {
    theme: theme
  }, React.createElement(Component, props));
}).withConfig({
  displayName: "ButtonIcon",
  componentId: "sc-11d7r5u-0"
})(["", ";cursor:inherit;display:inline-flex;", ";", ";"], function (props) {
  return (!props.component || props.component === 'button') && css(["", ";"], buttonReset());
}, function (props) {
  return props.theme.buttonIcon !== 'dark' && css(["color:", ";&:hover{color:", ";}&:active{color:", ";}&:focus{color:", ";}"], gray45, gray10, gray25, gray40);
}, function (props) {
  return props.theme.buttonIcon === 'dark' && css(["color:", ";&:hover{color:", ";}&:active{color:", ";}&:focus{color:", ";}"], gray45, gray95, gray75, gray60);
});
ButtonIcon.darkTheme = {
  buttonIcon: 'dark'
};
ButtonIcon.propTypes = propTypes;
ButtonIcon.defaultProps = defaultProps;
/** @component */

export default ButtonIcon;