import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["component", "active", "focus", "hover", "colorSet", "fallbackSet", "isUsingKeyboard"],
    _excluded2 = ["colorSet", "fallbackSet"];
import React from 'react';
import { spacer8 } from '@spotify-internal/encore-foundation';
import styled, { css } from 'styled-components';
import { cssColorValue, focusTransitionFade, focusTransitionType, opacityDisabled, rootStyle, semanticColors } from "../../styles";
import { TagFocus } from "./TagFocus";
import { TagInner } from "./TagInner";
import { TagInnerSelected } from "./TagInnerSelected";
export var TagElement = styled(function (_ref) {
  var _ref$component = _ref.component,
      Component = _ref$component === void 0 ? 'span' : _ref$component,
      active = _ref.active,
      focus = _ref.focus,
      hover = _ref.hover,
      colorSet = _ref.colorSet,
      fallbackSet = _ref.fallbackSet,
      isUsingKeyboard = _ref.isUsingKeyboard,
      props = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/React.createElement(Component, props);
}).withConfig({
  displayName: "Tag__TagElement",
  componentId: "sc-15ycdu9-0"
})(["", ""], function (_ref2) {
  var colorSet = _ref2.colorSet,
      fallbackSet = _ref2.fallbackSet,
      props = _objectWithoutProperties(_ref2, _excluded2);

  var tagInnerBackgroundColor = colorSet ? cssColorValue(semanticColors.backgroundBase, fallbackSet.background.base) : cssColorValue(semanticColors.backgroundTintedBase, fallbackSet.background.tinted.base);
  var componentPropReset = "\n      &[href],\n      &[href]:focus,\n      &[href]:hover {\n        text-decoration: none;\n        box-shadow: none;\n      }\n    ";
  var disabledStyles = "\n      ".concat(TagInner, " {\n        background-color: ").concat(tagInnerBackgroundColor, ";\n      }\n      ").concat(TagInnerSelected, " {\n        background-color: ").concat(cssColorValue(semanticColors.backgroundBase, fallbackSet.background.base), ";\n      }\n      ").concat(TagInner, ", ").concat(TagInnerSelected, " {\n        color: ").concat(cssColorValue(semanticColors.textBase, fallbackSet.text.base), ";\n        opacity: ").concat(opacityDisabled, ";\n      }\n      ").concat(TagFocus, " {\n        border-color: transparent;\n      }\n    ");
  var tagInnerHoverBgColor = colorSet === 'mutedAccent' ? cssColorValue(semanticColors.backgroundHighlight, fallbackSet.background.highlight) : cssColorValue(semanticColors.backgroundTintedHighlight, fallbackSet.background.tinted.highlight);
  var hoverStyles = "\n      ".concat(TagInner, " {\n        background-color: ").concat(tagInnerHoverBgColor, ";\n        color: ").concat(cssColorValue(semanticColors.textBase, fallbackSet.text.base), ";\n      }\n      ").concat(TagInnerSelected, " {\n        background-color: ").concat(cssColorValue(semanticColors.backgroundHighlight, fallbackSet.background.highlight), ";\n        color: ").concat(cssColorValue(semanticColors.textBase, fallbackSet.text.base), ";\n      }\n    ");
  var tagInnerActiveBgColor = colorSet === 'mutedAccent' ? cssColorValue(semanticColors.backgroundPress, fallbackSet.background.press) : cssColorValue(semanticColors.backgroundTintedPress, fallbackSet.background.tinted.press);
  var activeStyles = "\n      ".concat(TagInner, " {\n        background-color: ").concat(tagInnerActiveBgColor, ";\n        color: ").concat(cssColorValue(semanticColors.textSubdued, fallbackSet.text.subdued), ";\n      }\n      ").concat(TagInnerSelected, " {\n        background-color: ").concat(cssColorValue(semanticColors.backgroundPress, fallbackSet.background.press), ";\n        color: ").concat(cssColorValue(semanticColors.textBase, fallbackSet.text.base), ";\n      }\n    ");
  var focusStyles = "\n      outline: none;\n\n      ".concat(TagFocus, " {\n        border-color: ").concat(cssColorValue(semanticColors.essentialBase, fallbackSet.essential.base), "\n      }\n    ");
  return css(["", ";position:relative;display:inline-block;transition:box-shadow 0.2s,transform 0.2s;align-self:center;&:not(:last-child){margin-right:", ";}", "{transition:border-color ", " ", ";}&:hover{", ";}&:active{", ";}&:focus{", ";}&[disabled],&[aria-disabled='true']{", "}&&{", " ", " ", " ", "}"], rootStyle(), spacer8, TagFocus, focusTransitionFade, focusTransitionType, hoverStyles, activeStyles, props.isUsingKeyboard && focusStyles, disabledStyles, componentPropReset, props.hover && hoverStyles, props.active && activeStyles, props.focus && props.isUsingKeyboard && focusStyles);
});