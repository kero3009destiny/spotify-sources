import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["colorSet", "selectedColorSet", "selected", "children", "color", "className", "theme"];
import React, { useContext } from 'react';
import { KeyboardDetectionContext } from "../../contexts/KeyboardDetectionContext";
import { deprecatedPropWarning } from "../../deprecationWarnings";
import { addColorSet, defaultColorSetName, defaultTheme } from "../../styles";
import { TagElement } from "./Tag";
import { TagFocus } from "./TagFocus";
import { TagInner } from "./TagInner";
import { TagInnerSelected } from "./TagInnerSelected";

/* TODO: For accessibility, this should render different markup when used as a toggle
 * (e.g. positive tab index, <button> or <input type="checkbox"> element, aria-pressed or aria-selected state).
 * Consider splitting this into 2 components - static `Tag` and interactive `TagToggle`.
 */
export var Tag = function Tag(_ref) {
  var colorSet = _ref.colorSet,
      _ref$selectedColorSet = _ref.selectedColorSet,
      selectedColorSet = _ref$selectedColorSet === void 0 ? 'invertedDark' : _ref$selectedColorSet,
      selected = _ref.selected,
      children = _ref.children,
      color = _ref.color,
      className = _ref.className,
      theme = _ref.theme,
      props = _objectWithoutProperties(_ref, _excluded);

  if (theme) {
    deprecatedPropWarning('theme', 'Please use `colorSet` and `selectedColorSet` instead to customize the colors of this component.');
  }

  if (color) {
    deprecatedPropWarning('color', 'Please use `colorSet` and `selectedColorSet` instead to customize the colors of this component.');
  }

  var _useContext = useContext(KeyboardDetectionContext),
      isUsingKeyboard = _useContext.isUsingKeyboard;

  var TagInnerComponent = selected ? TagInnerSelected : TagInner;
  var currentColorSet = selected ? selectedColorSet : colorSet;
  var fallbackSet = defaultTheme[currentColorSet || defaultColorSetName];
  return /*#__PURE__*/React.createElement(TagElement, Object.assign({}, props, {
    colorSet: currentColorSet,
    fallbackSet: fallbackSet,
    isUsingKeyboard: isUsingKeyboard
  }), /*#__PURE__*/React.createElement(TagInnerComponent, {
    className: addColorSet(currentColorSet, className),
    colorSet: currentColorSet,
    fallbackSet: fallbackSet
  }, children), /*#__PURE__*/React.createElement(TagFocus, null));
};
/**
* **Tag** ![Status: Production](https://img.shields.io/badge/PRODUCTION-%2357B560|height=14)
*
* [GitHub](https://ghe.spotify.net/encore/web/tree/master/src/core/components/Tag) | [Storybook](https://encore-web.spotify.net/?path=/story/components-tag--default) | [Encore](https://encore.spotify.net/web/components/tags) | [Figma](https://www.figma.com/file/bnQXqGkLeiTlbk8JXGDcsX/Encore-Web---Light-Theme-Toolkit?node-id=522:6) |
*
* Use Tags to present a collection of attributes (metadata, filters, multiple values in a text field, or selectable short choices in a form) to describe a piece of content.
*
* @example
* () => (
*  <List aria-label="Tags">
*    <StyledTag component="li">Afro</StyledTag>
*    <StyledTag component="li">Jazz</StyledTag>
*    <StyledTag component="li">Shoegaze</StyledTag>
*    <StyledTag component="li">Emo</StyledTag>
*    <StyledTag component="li">Pop Punk</StyledTag>
*    <StyledTag component="li">Rock</StyledTag>
*    <StyledTag component="li">House</StyledTag>
*    <StyledTag component="li">Hip Hop</StyledTag>
*    <StyledTag component="li">Dance</StyledTag>
*    <StyledTag component="li">R &amp; B</StyledTag>
*    <StyledTag component="li">Electronic</StyledTag>
*    <StyledTag component="li">Pop</StyledTag>
*    <StyledTag component="li">Indie</StyledTag>
*    <StyledTag component="li">Soul</StyledTag>
*    <StyledTag component="li">Disco</StyledTag>
*    <StyledTag component="li">Afro</StyledTag>
*    <StyledTag component="li">Jazz</StyledTag>
*    <StyledTag component="li">Shoegaze</StyledTag>
*    <StyledTag component="li">Emo</StyledTag>
*    <StyledTag component="li">Pop Punk</StyledTag>
*    <StyledTag component="li">Rock</StyledTag>
*    <StyledTag component="li">House</StyledTag>
*    <StyledTag component="li">Hip Hop</StyledTag>
*    <StyledTag component="li">Dance</StyledTag>
*    <StyledTag component="li">R &amp; B</StyledTag>
*    <StyledTag component="li">Electronic</StyledTag>
*    <StyledTag component="li">Pop</StyledTag>
*    <StyledTag component="li">Indie</StyledTag>
*    <StyledTag component="li">Soul</StyledTag>
*    <StyledTag component="li">Disco</StyledTag>
*    <StyledTag component="li">Afro</StyledTag>
*    <StyledTag component="li">Jazz</StyledTag>
*    <StyledTag component="li">Shoegaze</StyledTag>
*    <StyledTag component="li">Emo</StyledTag>
*    <StyledTag component="li">Pop Punk</StyledTag>
*    <StyledTag component="li">Rock</StyledTag>
*    <StyledTag component="li">House</StyledTag>
*    <StyledTag component="li">Hip Hop</StyledTag>
*    <StyledTag component="li">Dance</StyledTag>
*    <StyledTag component="li">R &amp; B</StyledTag>
*    <StyledTag component="li">Electronic</StyledTag>
*    <StyledTag component="li">Pop</StyledTag>
*    <StyledTag component="li">Indie</StyledTag>
*    <StyledTag component="li">Soul</StyledTag>
*    <StyledTag component="li">Disco</StyledTag>
*  </List>
*);
*
*/

export default Tag;