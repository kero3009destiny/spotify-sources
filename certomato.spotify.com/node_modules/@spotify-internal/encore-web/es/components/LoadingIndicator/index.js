import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["indicatorSize", "role", "ariaValueText", "theme"];
import React from 'react';
import { deprecatedPropWarning } from "../../deprecationWarnings";
import { LoadingIndicatorCircle } from "./LoadingIndicatorCircle";
import { LoadingIndicatorSvg } from "./LoadingIndicatorSvg";
var indicatorSizes = {
  sm: 'sm',
  md: 'md',
  lg: 'lg'
};

function LoadingIndicatorComponent(_ref) {
  var _ref$indicatorSize = _ref.indicatorSize,
      indicatorSize = _ref$indicatorSize === void 0 ? 'sm' : _ref$indicatorSize,
      _ref$role = _ref.role,
      role = _ref$role === void 0 ? 'progressbar' : _ref$role,
      _ref$ariaValueText = _ref.ariaValueText,
      ariaValueText = _ref$ariaValueText === void 0 ? 'Loading' : _ref$ariaValueText,
      theme = _ref.theme,
      props = _objectWithoutProperties(_ref, _excluded);

  if (theme) {
    deprecatedPropWarning('theme', 'This component is intended to inherit its parentâ€™s color set or color.');
  }

  return /*#__PURE__*/React.createElement(LoadingIndicatorSvg, Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    x: "0px",
    y: "0px",
    viewBox: "0 0 1 100",
    xmlSpace: "preserve",
    indicatorSize: indicatorSize,
    role: role,
    "aria-valuetext": ariaValueText
  }, props), /*#__PURE__*/React.createElement(LoadingIndicatorCircle, {
    stroke: "none",
    cx: "-140",
    cy: "50",
    r: "32"
  }), /*#__PURE__*/React.createElement(LoadingIndicatorCircle, {
    stroke: "none",
    cx: "0",
    cy: "50",
    r: "32"
  }), /*#__PURE__*/React.createElement(LoadingIndicatorCircle, {
    stroke: "none",
    cx: "140",
    cy: "50",
    r: "32"
  }));
}
/**
* **LoadingIndicator** ![Status: Production](https://img.shields.io/badge/PRODUCTION-%2357B560|height=14)
*
* [GitHub](https://ghe.spotify.net/encore/web/tree/master/src/core/components/LoadingIndicator) | [Storybook](https://encore-web.spotify.net/?path=/story/components-loadingindicator--default) | [Encore](https://encore.spotify.net/web/components/indicators) | [Figma](https://www.figma.com/file/bnQXqGkLeiTlbk8JXGDcsX/Encore-Web---Light-Theme-Toolkit?node-id=291:1182) |
*
* LoadingIndicator is used to help end users understand the app is waiting for a response or loading data from the server.
*
* @example
* () => <LoadingIndicator indicatorSize={LoadingIndicator.sm} />;
*
*/


export var LoadingIndicator = Object.assign(LoadingIndicatorComponent, indicatorSizes);
export default LoadingIndicator;