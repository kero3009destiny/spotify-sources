import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["component", "isActive", "isHover", "isFocus", "isUsingKeyboard"];
import React from 'react';
import { spacer8, spacer16, spacer32 } from '@spotify-internal/encore-foundation';
import styled, { css } from 'styled-components';
import { useEncoreContextType } from "../../hooks/useEncoreContextType";
import { absoluteBorder, browserFocusReset, buttonBorderRadius, cssColorValue, focusBorderColor, focusBorderWidth, focusBottomBorder, minuetBold, opacityDisabled, semanticColors, typeStyleCta3 } from "../../styles";
var transitionColor = '0.2s';
var NavPillListItemLink = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var Component = _ref.component,
      isActive = _ref.isActive,
      isHover = _ref.isHover,
      isFocus = _ref.isFocus,
      isUsingKeyboard = _ref.isUsingKeyboard,
      props = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {
    ref: ref
  }));
});
var activeStyles = css(["background-color:", ";color:", ";"], cssColorValue(semanticColors.backgroundTintedBase), cssColorValue(semanticColors.textBase));
var focusStyles = css(["", " ", " padding-bottom:0;&:after{color:", ";width:calc(100% - ", ");}"], browserFocusReset, focusBottomBorder(focusBorderWidth, true, true), focusBorderColor, spacer32);
var focusSelectedStyles = css(["position:relative;", " &:after{", " content:'';border-radius:", ";border:", "px solid ", ";}"], browserFocusReset, absoluteBorder(), buttonBorderRadius, focusBorderWidth, focusBorderColor);

var getFocusStyles = function getFocusStyles(isActive, isUsingKeyboard) {
  if (!isUsingKeyboard) return null;
  if (isActive) return focusSelectedStyles;
  return focusStyles;
};

var hoverStyles = css(["color:", ";"], cssColorValue(semanticColors.textBase));
var disabledStyles = css(["color:", ";cursor:not-allowed;pointer-events:none;opacity:", ";"], cssColorValue(semanticColors.textSubdued), opacityDisabled); // eslint-disable-next-line prefer-arrow-callback

export var Link = styled(NavPillListItemLink).withConfig({
  displayName: "Link",
  componentId: "nmmha9-0"
})(["", ";color:", ";border-radius:16px;display:block;padding:", " ", ";transition:", " color linear;text-decoration:none;&:hover{", "}", " &[disabled],&[aria-disabled=\"true\"]{", "}", " &:not(:active){", "}&:active{", " ", "}&:focus{", " &:not(:active){", "}&:active{", "}}"], function () {
  return useEncoreContextType(typeStyleCta3(), minuetBold());
}, cssColorValue(semanticColors.textSubdued), spacer8, spacer16, transitionColor, hoverStyles, function (props) {
  return props.isHover && hoverStyles;
}, disabledStyles, function (props) {
  return props.isActive && css(["&,&:hover{", "}"], activeStyles);
}, function (props) {
  return props.isFocus && getFocusStyles(props.isActive, true);
}, activeStyles, function (props) {
  return props.isFocus && getFocusStyles(true, true);
}, browserFocusReset, function (props) {
  return getFocusStyles(props.isActive, props.isUsingKeyboard);
}, function (props) {
  return getFocusStyles(true, props.isUsingKeyboard);
});