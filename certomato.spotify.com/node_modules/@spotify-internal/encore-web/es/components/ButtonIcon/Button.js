import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["component", "isUsingKeyboard", "useBrowserDefaultFocusStyle", "isHover", "isActive", "isFocus", "semanticColor"],
    _excluded2 = ["semanticColor"];
import React from 'react';
import styled, { css } from 'styled-components';
import { buttonLinkReset, buttonStylesActive, buttonStylesDisabled, cssColorValue, focusBottomBorder, rootStyle, semanticColors } from "../../styles";
var hoverStyles = css(["color:", ";"], cssColorValue(semanticColors.textBase));
var activeStyles = css(["", " color:", ";"], buttonStylesActive, cssColorValue(semanticColors.textSubdued));
export var Button = styled( /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _ref$component = _ref.component,
      Component = _ref$component === void 0 ? 'button' : _ref$component,
      isUsingKeyboard = _ref.isUsingKeyboard,
      useBrowserDefaultFocusStyle = _ref.useBrowserDefaultFocusStyle,
      isHover = _ref.isHover,
      isActive = _ref.isActive,
      isFocus = _ref.isFocus,
      semanticColor = _ref.semanticColor,
      props = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {
    ref: ref
  }));
})).withConfig({
  displayName: "Button",
  componentId: "me270r-0"
})(["", ""], function (_ref2) {
  var _ref2$semanticColor = _ref2.semanticColor,
      semanticColor = _ref2$semanticColor === void 0 ? 'textSubdued' : _ref2$semanticColor,
      props = _objectWithoutProperties(_ref2, _excluded2);

  return css(["", ";", ";cursor:inherit;display:inline-flex;color:", ";&:hover{", "}", " &:active{", "}&[disabled],&[aria-disabled='true'],fieldset[disabled] &{", " color:", ";}", " ", ";"], rootStyle(), (!props.component || props.component === 'button') && buttonLinkReset(props.useBrowserDefaultFocusStyle), cssColorValue(semanticColor), hoverStyles, props.isHover && hoverStyles, activeStyles, buttonStylesDisabled, cssColorValue(semanticColor), props.isActive && activeStyles, !props.useBrowserDefaultFocusStyle && focusBottomBorder(0, props.isUsingKeyboard, props.isFocus));
});