import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

var _buttonFontSizeLegacy, _buttonPaddingLegacy;

import { css } from 'styled-components';
import { fontWeightBold, rootStyle } from "../../styles";
import { buttonBorderRadius, buttonSizes, buttonTransitionFade } from "./buttons";
import { browserFocusReset } from "./focusBorders";
var buttonFontWeightLegacy = fontWeightBold;
var buttonLineHeightLegacy = '1';
var buttonFontSizeLegacy = (_buttonFontSizeLegacy = {}, _defineProperty(_buttonFontSizeLegacy, buttonSizes.sm, '12px'), _defineProperty(_buttonFontSizeLegacy, buttonSizes.md, '14px'), _defineProperty(_buttonFontSizeLegacy, buttonSizes.lg, '16px'), _buttonFontSizeLegacy);
var buttonPaddingLegacy = (_buttonPaddingLegacy = {}, _defineProperty(_buttonPaddingLegacy, buttonSizes.sm, '10px'), _defineProperty(_buttonPaddingLegacy, buttonSizes.md, '17px'), _defineProperty(_buttonPaddingLegacy, buttonSizes.lg, '20px'), _buttonPaddingLegacy);
/** Legacy base styles shared by most buttons, including root style, focus reset and font sizes */

export var buttonStylesBaseLegacy = function buttonStylesBaseLegacy(buttonSize, useBrowserDefaultFocusStyle) {
  return css(["", ";", " background-color:transparent;border:0;border-radius:", ";display:inline-block;font-size:", ";font-weight:", ";letter-spacing:2px;line-height:", ";text-align:center;text-decoration:none;text-transform:uppercase;touch-action:manipulation;transition-duration:", ";transition-property:background-color,border-color,color,box-shadow,filter,transform;user-select:none;vertical-align:middle;transform:translate3d(0,0,0);"], rootStyle(), !useBrowserDefaultFocusStyle && browserFocusReset, buttonBorderRadius, buttonFontSizeLegacy[buttonSize], buttonFontWeightLegacy, buttonLineHeightLegacy, buttonTransitionFade);
};
export function getButtonPaddingValuesLegacy(buttonSize) {
  var size = parseInt(buttonFontSizeLegacy[buttonSize], 10);
  var paddingTopBottom = parseInt(buttonPaddingLegacy[buttonSize], 10);
  var paddingLeftRight = size + paddingTopBottom * 2;
  return {
    paddingTopBottom: paddingTopBottom,
    paddingLeftRight: paddingLeftRight
  };
}