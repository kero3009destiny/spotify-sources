'use strict';

var LinkedList = require('./linkedlist');

/**
 * A simple synchronous in memory LRU cache.
 *
 * @constructor
 * @param {number} limit The maximum number of items to cache. Defaults to 100.
 */
function LRUCache(limit) {
  /**
   * The maximum number of entries in the cache.
   *
   * @type {number}
   * @protected
   */
  this._limit = limit || 100;

  /**
   * An instance of LinkedList that's used to store the items in the cache.
   *
   * @type {module:spotify-linkedlist?}
   * @protected
   */
  this._list = null;

  /**
   * A mapping of keys to items in the LinkedList.
   *
   * @type {Object.<string, module:spotify-linkedlist.Node>?}
   * @protected
   */
  this._map = null;

  // Reset the LRUCache
  this.clear();
}

/**
 * Retrieves an item from the cache.
 *
 * @param {string} key The key of the item to get.
 * @return {*} The cached item or null.
 *
 */
LRUCache.prototype.get = function(key) {
  var node = this._map[key];
  if (!node) {
    return null;
  }
  var list = this._list;
  list.remove(node);
  list.append(node);
  return node.value;
};

/**
 * Inserts an item into the cache.
 *
 * @param {string} key The key of the item to set.
 * @param {*} data The value of the item to set.
 */
LRUCache.prototype.set = function(key, data) {
  if (!key) {
    throw new TypeError('Cache key can\'t be empty!');
  }
  var list = this._list;
  var map = this._map;
  if (list.length >= this._limit) {
    var first = list.first;
    map[first.key] = null;
    list.remove(first);
  }
  var node = map[key];
  if (node) {
    list.remove(node);
    node.value = data;
  } else {
    node = new LinkedList.Node(data);
    node.key = key;
  }
  list.append(node);
  map[key] = node;
};

/**
 * Removes an item from the cache.
 *
 * @param {string} key The key of the item to remove.
 * @return {*} The value of the item removed from the cache.
 */
LRUCache.prototype.remove = function(key) {
  var map = this._map;
  var node = map[key];
  if (!node) {
    return null;
  }
  this._list.remove(node);
  map[key] = null;
  return node.value;
};

/**
 * Returns the number of entries in the cache.
 *
 * @return {number} The number of entries in the cache.
 */
LRUCache.prototype.size = function() {
  return this._list.length;
};

/**
 * Clear the entire cache.
 */
LRUCache.prototype.clear = function() {
  this._list = new LinkedList();
  this._map = {};
};

module.exports = LRUCache;
