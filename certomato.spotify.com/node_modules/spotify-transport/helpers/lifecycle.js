'use strict';

var Promise = require('spotify-promise-plus');
var Errors = require('../types/errors');
var TransportError = require('../types/transport_error');

/**
 * Calls connect on the given Transport instance if the passed ownerRef matches
 * the ownerRef of the instance. Otherwise, it rejects with an error.
 *
 * @param {spotify-transport} transport The transport instance.
 * @param {Object} ownerRef The owner ref object.
 * @return {Promise} A promise that will be resolved by the Transport instance,
 *     or rejected with a TRANSPORT_LIFECYCLE_ERROR if the ownerRef does not
 *     match the instance's.
 */
function connectIfOwned(transport, ownerRef) {
  if (!transport.hasOwnerRef(ownerRef)) {
    return Promise.reject(
      new TransportError(
        Errors.TRANSPORT_LIFECYCLE_DISABLED,
        'Method `connect` must be called from the Transport instance.'
      )
    );
  }
  return transport.connect();
}

/**
 * Calls disconnect on the given Transport instance if the passed ownerRef
 * matches the ownerRef of the instance. Otherwise, it rejects with an error.
 *
 * @param {spotify-transport} transport The transport instance.
 * @param {Object} ownerRef The owner ref object.
 * @return {Promise} A promise that will be resolved by the Transport instance,
 *     or rejected with a TRANSPORT_LIFECYCLE_ERROR if the ownerRef does not
 *     match the instance's.
 */
function disconnectIfOwned(transport, ownerRef) {
  if (!transport.hasOwnerRef(ownerRef)) {
    return Promise.reject(
      new TransportError(
        Errors.TRANSPORT_LIFECYCLE_DISABLED,
        'Method `disconnect` must be called from the Transport instance.'
      )
    );
  }
  return transport.disconnect();
}

/**
 * Calls forceDisconnect on the given Transport instance if the passed ownerRef
 * matches the ownerRef of the instance. Otherwise, it rejects with an error.
 *
 * @param {spotify-transport} transport The transport instance.
 * @param {Object} ownerRef The owner ref object.
 * @return {Promise} A promise that will be resolved by the Transport instance,
 *     or rejected with a TRANSPORT_LIFECYCLE_ERROR if the ownerRef does not
 *     match the instance's.
 */
function forceDisconnectIfOwned(transport, ownerRef) {
  if (!transport.hasOwnerRef(ownerRef)) {
    return Promise.reject(
      new TransportError(
        Errors.TRANSPORT_LIFECYCLE_DISABLED,
        'Method `forceDisconnect` must be called from the Transport instance.'
      )
    );
  }
  return transport.forceDisconnect();
}

module.exports = {
  connectIfOwned: connectIfOwned,
  disconnectIfOwned: disconnectIfOwned,
  forceDisconnectIfOwned: forceDisconnectIfOwned
};
