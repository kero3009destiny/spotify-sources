'use strict';

var debugEnum = require('spotify-debug-tools/debug_enum');

/**
 * The events that are exposed by the library.
 *
 * @enum {string}
 */
var Event = {
  // ConnectionObserver Events

  /**
   * Emitted by the `ConnectionObserver` class when the connection goes back
   * online.
   */
  CONNECTION_ONLINE: 'online',

  /**
   * Emitted by the `ConnectionObserver` class when the connection goes offline.
   */
  CONNECTION_OFFLINE: 'offline',


  // Dealer Events

  /**
   * Emitted by the `Dealer` class when it receives a Connection ID.
   */
  DEALER_AUTHENTICATED: 'authenticated',

  /**
   * Emitted by the `Dealer` class when the Dealer service encounters an error
   * during authentication.
   */
  DEALER_AUTHENTICATION_FAILED: 'authentication_failed',

  /**
   * Emitted by the `Dealer` class when it has successfully connected.
   */
  DEALER_CONNECTED: 'connected',

  /**
   * Emitted by the `Dealer` class when it receives a connection id from the
   * Dealer service.
   */
  DEALER_CONNECTION_ID: 'connection_id',

  /**
   * Emitted by the `Dealer` class when it encounters an error.
   */
  DEALER_ERROR: 'error',

  /**
   * Emitted by the `Dealer` class when it gets disconnected.
   */
  DEALER_DISCONNECTED: 'disconnected',

  /*
   * Emitted by the `Dealer` class when it receives a message from the Dealer
   * service.
   */
  DEALER_MESSAGE: 'message',

  /**
   * Emitted by the `Dealer` class when it receives a request from the Dealer
   * service.
   */
  DEALER_REQUEST: 'request',

  /**
   * Internal event for dealer messages.
   */
  INTERNAL_DEALER_MESSAGE: '__dealer_message',

  /**
   * Internal event for dealer requests.
   */
  INTERNAL_DEALER_REQUEST: '__dealer_request',

  /**
   * Emitted by the `ProductStateObserver` class when the user's product state
   * has changed.
   */
  PRODUCT_STATE_CHANGED: 'product_state_changed',


  // Session Events

  /**
   * Emitted by the `Session` class when it receives an access token.
   */
  TRANSPORT_ACCESS_TOKEN: 'access_token',

  /**
   * Emitted by the `Session` class when it successfully authenticates.
   */
  TRANSPORT_AUTHENTICATED: 'authenticated',

  /**
   * Emitted by the `Session` class when it encounters an error during
   * authentication.
   */
  TRANSPORT_AUTHENTICATION_FAILED: 'authentication_failed',

  /**
   * Emitted by the `Transport` class before disconnection while offline.
   */
  TRANSPORT_BEFORE_OFFLINE_DISCONNECT: 'before_offline_disconnect',

  /**
   * Emitted by the `Transport` class before disconnection while online.
   */
  TRANSPORT_BEFORE_ONLINE_DISCONNECT: 'before_online_disconnect',

  /**
   * Emitted by the `Session` class when it successfully connects to the
   * messaging endpoints.
   */
  TRANSPORT_CONNECTED: 'connected',

  /**
   * Emitted by the `Session` class when it encounters an error while trying to
   * connect to the messaging endpoints.
   *
   * @deprecated
   */
  TRANSPORT_CONNECTION_ERROR: 'connection_error',

  /**
   * Emitted by the `Session` class when it encounters an error while trying to
   * connect to the messaging endpoints.
   */
  TRANSPORT_CONNECTION_FAILED: 'connection_failed',

  /**
   * Emitted by the `Session` when it receives a connection id.
   */
  TRANSPORT_CONNECTION_ID: 'connection_id',

  /**
   * Emitted by the `Session` when it receives a connection id.
   */
  TRANSPORT_CONNECTION_OFFLINE: 'connection_offline',

  /**
   * Emitted by the `Session` when it receives a connection id.
   */
  TRANSPORT_CONNECTION_ONLINE: 'connection_online',

  /**
   * Emitted by the `Session` when it receives a message from its internal
   * `Dealer` instance.
   */
  TRANSPORT_DEALER_MESSAGE: 'dealer_message',

  /**
   * Emitted by the `Session` when it gets disconnected.
   */
  TRANSPORT_DISCONNECTED: 'disconnected',

  /**
   * Emitted when the endpoints have been resolved.
   */
  TRANSPORT_ENDPOINTS_RESOLVED: 'endpoints_resolved',

  /**
   * Emitted when the current transport instance is directed by the backend
   * to logout.
   */
  TRANSPORT_LOGGED_OUT: 'logged_out',

  /**
   * Emitted by the `Session` when it gets disconnected after being connected
   *     less than five seconds.
   */
  TRANSPORT_SHORT_SESSION_DISCONNECTED: 'short_session_disconnected',

  /**
   * Emitted by the `Session` when it starts reconnecting.
   */
  TRANSPORT_RECONNECTED: 'reconnected',

  /**
   * Emitted by the `Session` when it successfully reconnects.
   */
  TRANSPORT_RECONNECTING: 'reconnecting',

  /**
   * Emitted by the `window` when it's about to unload.
   */
  WINDOW_BEFORE_UNLOAD: 'beforeunload'
};

module.exports = debugEnum(Event);
