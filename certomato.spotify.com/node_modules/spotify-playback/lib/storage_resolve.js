'use strict';
/**
 * @module spotify-playback/lib/storage_resolve
 */

var Promise = require('spotify-promise-plus');

var StorageError = require('./storage_error');
var Errors = require('../types/errors');

var debugLogger = require('spotify-debug-tools/logging')
  .forTag('playback.storage_resolve');

var MANIFEST_URL = 'https://seektables.scdn.co/seektable';

function StorageResolve(transport) {
  this._transport = transport;
}

StorageResolve.prototype._parseResponse = function(fileId, response) {
  var error;
  if (response.status !== 200) {
    error = new StorageError(
      Errors.STORAGE_FAILED_WITH_STATUS,
      'Storage Resolve responded with ' + response.status
    );
    error.status = response.status;
    error.fileId = fileId;
    return Promise.reject(error);
  }
  var body = response.body;
  if (!body || !body.cdnurl || !body.cdnurl.length) {
    error = new StorageError(
      Errors.STORAGE_RETURNED_NO_TRACKS,
      'Storage Resolve returned no tracks for fileId ' + fileId
    );
    error.fileId = fileId;
    return Promise.reject(error);
  }
  var result = {
    uri: body.cdnurl[0],
    uris: body.cdnurl,
    protection: 'cenc'
  };
  return result;
};

StorageResolve.prototype.getCDNURL = function(uri, fileId) {
  debugLogger.info('Requesting CDN URL for ', fileId);
  var endpoint = [
    'http://@webgate/storage-resolve/files/audio/interactive/',
    fileId,
    '?version=10000000&product=9&platform=39&alt=json'
  ].join('');
  return this._transport.request(endpoint, {
    responseType: 'json',
    retry: {
      condition: function(response, StatusFamily) {
        return response.getStatusFamily() !== StatusFamily.SUCCESS;
      }
    }
  }).then(this._parseResponse.bind(this, fileId));
};

StorageResolve.prototype.getManifest = function(fileId) {
  var url = MANIFEST_URL + '/' + fileId + '.json';
  debugLogger.info('Requesting JSON manifest for ', fileId);
  return this._transport.request(url, {
    responseType: 'json',
    retry: {
      condition: function(response, StatusFamily) {
        return response.getStatusFamily() !== StatusFamily.SUCCESS;
      }
    }
  }).then(function(response) {
    var error;
    if (response.status !== 200) {
      error = new StorageError(
        Errors.STORAGE_TRACK_MANIFEST_FAILED,
        'Track manifest request failed with status code ' + response.status
      );
      error.debug.file_id = fileId;
      error.status = response.status;
      return Promise.reject(error);
    }
    if (!response.body) {
      error = new StorageError(
        Errors.STORAGE_TRACK_MANIFEST_EMPTY,
        'Received empty manifest.'
      );
      error.debug.file_id = fileId;
      error.status = response.status;
      return Promise.reject(error);
    }
    return response.body;
  });
};

module.exports = StorageResolve;
