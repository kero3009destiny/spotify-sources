'use strict';

function PlaybackError(code, message) {
  Error.call(this, message);

  /**
   * Error code.
   *
   * @type {string}
   * @see {module:spotify-playback/types/Errors}
   */
  this.code = code;

  /**
   * Error message string.
   *
   * @type {string}
   */
  this.message = message;

  /**
   * Will be set to `true` if the severity of the error is such that the
   *     player can't recover from it - for example when it's sprung from the
   *     platform not supporting the required technologies.
   *
   * @type {boolean}
   */
  this.unrecoverable = false;

  /**
   * Will be set to true if the error should be ignored in the listplayer's
   *     error counter.
   *
   *     From inline description of this in player:
   *     The list player takes note of the number of errors that occur and
   *     stops playback after a certain threshold. If the track is not
   *     protected (which is assume for ads), we want the list player to
   *     ignore the error.
   *
   * @type {boolean}
   */
  this.listPlayerIgnore = false;

  /**
   * Object for storing properties of an event that's useful for debugging.
   *
   * @type {object}
   */
  this.debug = {};
}

PlaybackError.prototype = new Error();
PlaybackError.prototype.constructor = PlaybackError;
PlaybackError.prototype.name = 'PlaybackError';

PlaybackError.prototype.fatal = function() {
  this.unrecoverable = true;
  return this;
};

module.exports = PlaybackError;
