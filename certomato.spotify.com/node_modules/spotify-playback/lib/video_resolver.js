'use strict';

var Promise = require('spotify-promise-plus');
var StorageError = require('./storage_error');
var Errors = require('../types/errors');

function VideoResolver(transport) {
  this._transport = transport;
}

VideoResolver.create = function(options) {
  return new VideoResolver(options);
};

VideoResolver.prototype._parseManifestResponse = function(response) {
  if (response.status !== 200) {
    var error = new StorageError(
      Errors.STORAGE_VIDEO_MANIFEST_FAILED,
      'Video manifest request failed with status ' + response.status
    );
    error.status = response.status;
    return Promise.reject(error);
  }
  return response.body;
};

VideoResolver.prototype.getInitSegmentURLs = function(
  baseURL,
  initTemplate,
  audioProfile,
  videoProfile
) {
  var audioURL = baseURL + initTemplate
    .replace('{{profile_id}}', audioProfile.id)
    .replace('{{file_type}}', audioProfile.file_type);
  var videoURL = baseURL + initTemplate
    .replace('{{profile_id}}', videoProfile.id)
    .replace('{{file_type}}', videoProfile.file_type);

  return {
    audio: audioURL,
    video: videoURL,

    // Logged URLs
    audioLogging: audioURL,
    videoLogging: videoURL
  };
};

VideoResolver.prototype.getSegmentURLs = function(
  baseURL,
  segmentTemplate,
  position,
  audioProfile,
  videoProfile
) {
  var audioURL = baseURL + segmentTemplate
    .replace('{{profile_id}}', audioProfile.id)
    .replace('{{file_type}}', audioProfile.file_type);
  var videoURL = baseURL + segmentTemplate
    .replace('{{profile_id}}', videoProfile.id)
    .replace('{{file_type}}', videoProfile.file_type);

  return {
    audio: audioURL.replace('{{segment_timestamp}}', position),
    video: videoURL.replace('{{segment_timestamp}}', position),

    // Logged URLs
    audioLogging: audioURL,
    videoLogging: videoURL
  };
};

VideoResolver.prototype.getManifest = function(fileId) {
  var endpoint = [
    'https://@webgate/manifests/v6/json/sources/',
    fileId,
    '/options/supports_drm'
  ].join('');
  return this._transport
    .request(endpoint, {
      authorize: true,
      responseType: 'json',
      retry: {
        condition: function(response, StatusFamily) {
          return response.getStatusFamily() !== StatusFamily.SUCCESS;
        }
      }
    })
    .then(this._parseManifestResponse);
};

module.exports = VideoResolver;
