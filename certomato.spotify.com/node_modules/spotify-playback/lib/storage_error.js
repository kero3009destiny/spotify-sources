'use strict';

var Errors = require('../types/errors');

/**
 * Represents a storage resolution error.
 *
 * @param {string} code The error code.
 * @param {string} message The error message.
 */
function StorageError(code, message) {
  Error.call(this, message);

  /**
   * Error message.
   *
   * @type {string}
   */
  this.code = code || Errors.STORAGE_ERROR;

  /**
   * Error message.
   *
   * @type {string}
   */
  this.message = message || 'Storage Error';

  /**
   * Status code for http related errors.
   *
   * @type {number}
   */
  this.status = -1;

  /**
   * FileId related to the storage request failure.
   *
   * @type {string}
   */
  this.fileId = '';

  /**
   * Additional debugging information for the error.
   *
   * @type {Object.<string, *>}
   */
  this.debug = {};

  /**
   * True if the error breaks the ability to play tracks ie. if the user has
   *     been play capped.
   *
   * @type {boolean}
   */
  this.canPlayNext = true;
}

// inherit from Native event.
StorageError.prototype = new Error();
StorageError.prototype.constructor = StorageError;
StorageError.prototype.name = 'StorageError';

module.exports = StorageError;
