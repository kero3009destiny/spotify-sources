'use strict';

var debugEnum = require('spotify-debug-tools/debug_enum');

/**
 * Describes the different events that can be emitted by the module.
 *
 * @enum {string}
 */
var Event = {
  // Native Events
  KEY_SESSION_MESSAGE: 'message',
  KEY_SESSION_STATUSES_CHANGE: 'keystatuseschange',
  MEDIA_SOURCE_OPEN: 'sourceopen',
  MEDIA_SOURCE_CLOSE: 'sourceclose',
  SOURCE_BUFFER_UPDATE_END: 'updateend',

  // MS EME Events
  MS_KEY_ADDED: 'mskeyadded',
  MS_KEY_ERROR: 'mskeyerror',
  MS_KEY_MESSAGE: 'mskeymessage',
  MS_NEEDKEY: 'msneedkey',

  // WebKit EME Events
  V0_1B_KEY_ADDED: 'keyadded',
  V0_1B_KEY_ERROR: 'keyerror',
  V0_1B_KEY_MESSAGE: 'keymessage',
  V0_1B_NEEDKEY: 'needkey',

  MEDIA_CANPLAY: 'canplay',
  MEDIA_CANPLAYTHROUGH: 'canplaythrough',
  MEDIA_DURATIONCHANGE: 'durationchange',
  MEDIA_ENCRYPTED: 'encrypted',
  MEDIA_ENDED: 'ended',
  MEDIA_ERROR: 'error',
  MEDIA_LOADEDMETADATA: 'loadedmetadata',
  MEDIA_PAUSE: 'pause',
  MEDIA_PLAYING: 'playing',
  MEDIA_SEEKING: 'seeking',
  MEDIA_TIMEUPDATE: 'timeupdate',
  MEDIA_WAITING: 'waiting',

  // Internal Events
  INTERNAL_PLAYER_CANPLAY: '__canplay',
  INTERNAL_PLAYER_CANPLAYTHROUGH: '__canplaythrough',
  INTERNAL_MEDIA_REQUIRES_DURATION: '__requiresduration',
  INTERNAL_PLAYER_LOADED_METADATA: '__loadedmetadata',

  // Buffer events
  BUFFER_APPEND_ERROR: 'append_error',
  BUFFER_QUOTA_EXCEEDED: 'quota_exceeded',
  BUFFER_STALLED: 'stalled',
  BUFFER_SOURCE_OPEN: 'source_open',
  BUFFER_SOURCE_CLOSE: 'source_close',
  BUFFERING_START: 'buffering_start',
  BUFFERING_END: 'buffering_end',

  // EME Manager
  EME_LICENSE_REQUEST_ERROR: 'license_request_error',
  EME_LICENSE_REQUEST_CAPPED: 'license_request_capped',

  // List Player
  LIST_PLAYER_AUTOPLAY_FAILED: 'player_autoplay_failed',
  LIST_PLAYER_BEFORE_LIST_CHANGE: 'before_list_change',
  LIST_PLAYER_BEFORE_NEXT: 'before_next',
  LIST_PLAYER_BEFORE_PLAYER_LOAD: 'before_player_load',
  LIST_PLAYER_BEFORE_PREVIOUS: 'before_previous',
  LIST_PLAYER_BEFORE_TRACK_LOAD: 'before_track_load',
  LIST_PLAYER_BEFORE_VOLUME_CHANGE: 'before_volume_change',
  LIST_PLAYER_BUFFER_STALLED: 'stalled',
  LIST_PLAYER_BUFFERING_START: 'buffering_start',
  LIST_PLAYER_BUFFERING_END: 'buffering_end',
  LIST_PLAYER_CAPPED: 'capped',
  LIST_PLAYER_CLEARED: 'cleared',
  LIST_PLAYER_DURATION_CHANGED: 'duration_changed',
  LIST_PLAYER_ERROR: 'error',
  LIST_PLAYER_ERROR_SYNC: 'error_sync',
  LIST_PLAYER_LIST_CHANGED: 'list_change',
  LIST_PLAYER_LIST_ENDED: 'list_ended',
  LIST_PLAYER_LOAD_VIDEO: 'load_video',
  LIST_PLAYER_MAX_LIST_ERRORS_REACHED: 'max_list_errors_reached',
  LIST_PLAYER_PAUSED: 'paused',
  LIST_PLAYER_PLAYED_THRESHOLD_REACHED: 'played_threshold_reached',
  LIST_PLAYER_PLAYER_LOAD: 'player_load',
  LIST_PLAYER_PLAYING: 'playing',
  LIST_PLAYER_POSITION_CHANGED: 'position_changed',
  LIST_PLAYER_PROGRESS: 'progress',
  LIST_PLAYER_REPEAT_MODE_CHANGED: 'repeat_mode_changed',
  LIST_PLAYER_SHUFFLE_CHANGED: 'shuffle_changed',
  LIST_PLAYER_STOPPED: 'stopped',
  LIST_PLAYER_STOPPED_VIDEO: 'stopped_video',
  LIST_PLAYER_TRACKING_DATA_CREATED: 'tracking_data_created',
  LIST_PLAYER_TRACKING_DATA_FINALIZED: 'tracking_data_finalized',
  LIST_PLAYER_TRACK_ENDED: 'track_ended',
  LIST_PLAYER_TRACK_LOADED: 'track_loaded',
  LIST_PLAYER_TRACK_TIMEOUT: 'track_timeout',
  LIST_PLAYER_TRACK_UNPLAYABLE: 'track_unplayable',
  LIST_PLAYER_DATA_CREATED: 'tracking_data_created',
  LIST_PLAYER_DATA_FINALIZED: 'tracking_data_finalized',
  LIST_PLAYER_VOLUME_CHANGED: 'volume_changed',
  LIST_PLAYER_VIDEO_ELEMENT_APPENDED: 'video_element_appended',
  LIST_PLAYER_VIDEO_ELEMENT_REMOVED: 'video_element_removed',

  // Logger
  LOGGER_ERROR: 'error',

  // Player
  PLAYER_AUTOPLAY_FAILED: 'player_autoplay_failed',
  PLAYER_BEFORE_LOAD: 'before_load',
  PLAYER_BEFORE_STOP: 'before_stop',
  PLAYER_BEFORE_VOLUME_CHANGE: 'before_volume_change',
  PLAYER_BUFFER_STALLED: 'stalled',
  PLAYER_BUFFERING_START: 'buffering_start',
  PLAYER_BUFFERING_END: 'buffering_end',
  PLAYER_CAN_PRELOAD: 'can_preload',
  PLAYER_CAPPED: 'capped',
  PLAYER_DURATION_CHANGED: 'duration_changed',
  PLAYER_ENDED: 'ended',
  PLAYER_ENDED_VIDEO: 'ended_video',
  PLAYER_ERROR: 'error',
  PLAYER_WARNING: 'warning',
  PLAYER_FIRST_BYTES: 'first_bytes',
  PLAYER_KEY_RECEIVED: 'key',
  PLAYER_LOAD: 'load',
  PLAYER_LOAD_VIDEO: 'load_video',
  PLAYER_LOADING_FAILED: 'loading_failed',
  PLAYER_PAUSED: 'paused',
  PLAYER_PLAYING: 'playing',
  PLAYER_POSITION_CHANGED: 'position_changed',
  PLAYER_PRELOADING_ERROR: 'preloading_error',
  PLAYER_PROGRESS: 'progress',
  PLAYER_STALLED: 'stalled',
  PLAYER_STOPPED: 'stopped',
  PLAYER_STOPPED_VIDEO: 'stopped_video',
  PLAYER_PLAYED_THRESHOLD_REACHED: 'played_threshold_reached',
  PLAYER_TIMEOUT: 'timeout',
  PLAYER_PLAYBACK_START: 'playback_start',
  PLAYER_TRACKING_DATA_CREATED: 'tracking_data_created',
  PLAYER_TRACKING_DATA_FINALIZED: 'tracking_data_finalized',
  PLAYER_VIDEO_ELEMENT_APPENDED: 'video_element_appended',
  PLAYER_VIDEO_ELEMENT_REMOVED: 'video_element_removed',

  // PlayerManager
  PLAYER_MANAGER_READY: 'ready',

  // Tracker
  TRACKER_PLAYBACK_START: 'playback_start',
  TRACKER_PLAYED_THRESHOLD_REACHED: 'played_threshold_reached',
  TRACKER_TRACKING_DATA_CREATED: 'tracking_data_created',
  TRACKER_TRACKING_DATA_FINALIZED: 'tracking_data_finalized',

  ABR_MANAGER_BITRATE_CHANGE: 'bitrate_change'
};

module.exports = debugEnum(Event);
