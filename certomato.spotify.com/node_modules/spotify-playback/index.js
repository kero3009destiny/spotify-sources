'use strict';
/**
 * @module spotify-playback
 */

var Promise = require('spotify-promise-plus');
var ACMEPlayer = require('./player');
var ACMELogger = require('./_internal/logger');
var StorageResolver = require('./lib/storage_resolve');
var Tracker = require('./lib/tracker');
var VideoResolver = require('./lib/video_resolver');
var LicenseURLResolver = require('./_internal/license_url_resolver');
var Robustness = require('./types/robustness');

module.exports = {

  createACMEPlayer: function(transport, options) {
    return new Promise(function(resolve, reject) {
      if (!transport) {
        reject(new TypeError('Argument transport is required.'));
        return;
      }

      var opts = options || {};

      if (!opts.logger) {
        reject(new TypeError('Argument `options.logger` is required.'));
        return;
      }

      var createPlayer = opts.createPlayer || null;
      var videoPlayerContainer = opts.videoPlayerContainer || null;

      var tracker = Tracker.create();

      var audioResolver = new StorageResolver(transport);
      var videoResolver = new VideoResolver(transport);

      var sdkIdParts = (opts.sdkId || '').split(':');
      var licenseURLResolver = new LicenseURLResolver({
        transport: transport,
        sdk: {
          name: sdkIdParts[0] || '',
          version: sdkIdParts[1] || ''
        },
        securityLevel: opts.securityLevel
      });

      if (opts.ensureEMERobustness) {
        if (!opts.disallowRobustnessValues) {
          opts.disallowRobustnessValues = [];
        }
        opts.disallowRobustnessValues.push(Robustness.EMPTY);
      }

      var _options = {
        transport: transport,

        // Playback options
        createPlayer: createPlayer,
        videoPlayerContainer: videoPlayerContainer,

        // Tracker
        tracker: tracker,

        // Resolvers
        audioResolver: audioResolver,
        videoResolver: videoResolver,
        licenseURLResolver: licenseURLResolver,

        // Cache size
        trackCacheSize: opts.trackCacheSize,

        // Flags
        disallowRobustnessValues: opts.disallowRobustnessValues,
        synthesizeEnded: opts.synthesizeEnded,
        noServerCertificate: opts.noServerCertificate,
        preferredKeySystems: opts.preferredKeySystems,
        newElementPerTrack: opts.newElementPerTrack,
        newBufferPerTrack: 'newBufferPerTrack' in opts ?
          opts.newBufferPerTrack :
          true,
        newMediaKeysPerTrack: opts.newMediaKeysPerTrack,
        clearBufferOnSeek: opts.clearBufferOnSeek,
        rebufferOnQuotaExceeded: opts.rebufferOnQuotaExceeded,
        disableCache: opts.disableCache,
        cubicVolume: opts.cubicVolume,
        disallowProtectedTracks: opts.disallowProtectedTracks,
        disableBufferAbort: opts.disableBufferAbort
      };

      ACMEPlayer.create(_options)
        .then(function(player) {
          var logger = ACMELogger.create({
            transport: transport,
            player: player,
            logger: opts.logger
          });
          return {
            player: player,
            logger: logger
          };
        }).then(resolve, reject);
    });
  }

};
