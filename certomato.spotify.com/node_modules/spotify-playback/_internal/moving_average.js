'use strict';

/**
 * This is an implementation of the "Exponential Moving Average" algorithm.
 *     https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average
 *
 * @param {number} weightingFactorBase Used to calculate the degree of
 *     weighting decrease in the moving average.
 *     A higher value discounts older observations faster.
 * @constructor
 */
function MovingAverage(weightingFactorBase) {
  if (weightingFactorBase < 0) {
    throw new TypeError('Halflife must be set to a positive value.');
  }

  /**
   * This represents the degree of weighting decrease, a constant smoothing
   *     factor between 0 and 1.
   *
   * @type {number}
   */
  this._weightingDecrease = Math.exp(Math.log(0.5) / weightingFactorBase);

  /**
   * The current estimated value of the exponential moving average.
   *
   * @type {number}
   */
  this._estimate = 0;

  /**
   * The total number of sampled bytes.
   *
   * @type {number}
   */
  this._totalWeight = 0;
}

/**
 * Function for adding a sample to the window.
 *
 * @param {number} time Duration of a time period, in milliseconds.
 * @param {number} bytes The value of the exponential moving average at the end
 *     of the period represented by the `time` parameter.
 */
MovingAverage.prototype.sample = function(time, bytes) {
  var ms = time / 1000;
  var a = Math.pow(this._weightingDecrease, ms);
  var estimate = bytes * (1 - a) + a * this._estimate;

  if (!isNaN(estimate)) {
    this._estimate = estimate;
    this._totalWeight += bytes;
  }
};

/**
 * Get current estimated value of the exponential moving average.
 *
 * @return {number}
 */
MovingAverage.prototype.getEstimate = function() {
  return this._estimate / 1 - Math.pow(
    this._weightingDecrease,
    this._totalWeight
  );
};

module.exports = MovingAverage;
